<languages/>
{{VeryImportantMessage|(Novembre 2018) Ces informations peuvent être incomplètes et obsolètes. Pour la dernière API, consultez [https://www.freecad.org/api autogenerated API documentation].}}
Ces fonctions font partie de l'[[TechDraw_Workbench/fr|atelier TechDraw]] et peuvent être utilisées dans des [[Macros/fr|macros]] et à partir de la console [[Python/fr|Python]] une fois que le module {{incode|TechDraw}} a été importé.

Vous trouverez de bons exemples de scripts TechDraw de base dans le site [https://github.com/FreeCAD/FreeCAD/tree/master/src/Mod/TechDraw/TDTest unit test scripts]. 

Voir [[TechDrawGui_API/fr|TechDrawGui API]] pour plus de fonctions.

Exemple :

{{Code|code=
import FreeCAD
import TechDraw

page = FreeCAD.ActiveDocument.addObject('TechDraw::DrawPage', 'Page')
FreeCAD.ActiveDocument.addObject('TechDraw::DrawSVGTemplate', 'Template')
FreeCAD.ActiveDocument.Template.Template = templateFileSpec
FreeCAD.ActiveDocument.Page.Template = FreeCAD.ActiveDocument.Template
page.ViewObject.show()
view = FreeCAD.ActiveDocument.addObject('TechDraw::DrawViewPart', 'View')
rc = page.addView(view)
}}

{{APIFunction|EdgeWalker|listOfEdges, [bool]|crée des polylignes à partir des arêtes en entrée en parcourant le graphe planaire.  Il est possible d'exclure la polyligne extérieure (OuterWire) en définissant le paramètre optionnel à false.|liste de polylignes triées par taille (décroissante) }}
{{APIFunction|findOuterWire|listOfEdges|trouve la polyligne extérieure (la plus grande) d'une liste d'arêtes (qui forment un graphe planaire).|polyligne extérieur}}
{{APIFunction|findShapeOutline|TopoShape, scale, direction|projette la forme dans la direction et trouve la polyligne extérieure du résultat.|polyligne de contour}}

{{APIFunction|viewPartAsDxf|DrawViewPart|renvoie les bords de DrawViewPart au format Dxf.|chaîne de caractères}}
Exemple :

{{Code|code=
fileSpecDxf = "fcOut.dxf"
v = App.ActiveDocument.View
s = TechDraw.viewPartAsDxf(v)
dxfEnd = "0\nEOF\n"
dxfFile = open(fileSpecDxf, "w")
dxfFile.write(s)
dxfFile.write(dxfEnd)
dxfFile.close()
}}

{{APIFunction|viewPartAsSvg|DrawViewPart|renvoie les bords de DrawViewPart au format Svg.|chaîne de caractères}}
Exemple :

{{Code|code=
fileSpecSvg = "fcOut.svg"
v = App.ActiveDocument.View
s = TechDraw.viewPartAsSvg(v)
head = '<svg\n' + \
       '	xmlns="http://www.w3.org/2000/svg" version="1.1" \n' + \
       '	xmlns:freecad="https://wiki.freecad.org/index.php?title=Svg_Namespace">\n'
tail = '\n</svg>'
svgFile = open(fileSpecSvg, "w")
svgFile.write(head)
svgFile.write(s)
svgFile.write(tail)
svgFile.close()
}}

{{APIFunction|writeDXFView|DrawViewPart, FileName|enregistre DrawViewPart au format Dxf.|fichier}}
Exemple :

{{Code|code=
import TechDraw
TechDraw.writeDXFView(myPart,myFileName)
}}

{{APIFunction|writeDXFPage|DrawPage, FileName|enregistre DrawPage au format Dxf.|fichier}}
Exemple :

{{Code|code=
import TechDraw
TechDraw.writeDXFPage(myPage,myFileName)
}}

<span id="DrawViewPart_Cosmetics"></span>
===Cosmétiques de DrawViewPart===

<span id="CosmeticVertex_(CV)_routines_accessible_from_Python"></span>
====Routines de CosmeticVertex (CV) accessibles à partir de Python====

dvp = App.ActiveDocument.View  #Les CV appartiennent à des vues.<br>

Ajoute un CosmeticVertex à p1 (coordonnées de la vue). Renvoie une balise unique.<br>
tag = dvp.makeCosmeticVertex(vector p1) 

Ajoute un CosmeticVertex à p1 (coordonnées du modèle 3D). Renvoie une balise unique.<br>
tag = dvp.makeCosmeticVertex3d(vector p1) 

Renvoie un CosmeticVertex avec un identifiant unique.<br>
cv = dvp.getCosmeticVertex(string id) 

Renvoie le CosmeticVertex avec le nom (Vertex6). Utilisé dans les sélections.<br>
cv = dvp.getCosmeticVertexBySelection(string name) 

Supprime un CosmeticVertex d'une vue. Ne renvoie rien.<br>
dvp.removeCosmeticVertex(object cv) 

Supprime tous les CosmeticVertices de la vue. Ne renvoie rien.<br>
dvp.clearCosmeticVertices()

Attributs de CosmeticView<br>
Tag : identifiant unique. Chaîne de caractères.<br>
Point : emplacement dans la vue. Vecteur.<br>

<!--T:28-->
********************************************************************************
{{Code|code=
#!/usr/bin/env python
# -*- coding: utf-8 -*-

<!--T:29-->
# Py CosmeticVertex demo
import FreeCAD
import TechDraw

<!--T:30-->
v = App.ActiveDocument.View
p = App.Vector(-3.0, -3.0, 0.0)

<!--T:31-->
#make CV
tag = v.makeCosmeticVertex(p)
print("t: {}".format(tag))

<!--T:32-->
#retrieve CV
cv = v.getCosmeticVertex(tag)
print("cv: {}".format(cv))
print("Tag: {}".format(cv.Tag))


<!--T:34-->
cv2 = v.getCosmeticVertexBySelection("Vertex4")
print("New Point: {}".format(cv2.Point))

<!--T:35-->
#make CV from 3d
p3d = App.Vector(2.0, 2.0, 2.0)
print("3d point in: {}".format(p3d))
tag3d = v.makeCosmeticVertex3d(p3d)
cv3 = v.getCosmeticVertex(tag3d)
print("3d point out: {}".format(cv3.Point))
}}

<span id="CosmeticEdge_(CE)_routines_accessible_from_Python"></span>
====Routines de CosmeticEdge (CE) accessibles à partir de Python====

dvp = App.ActiveDocument.View  #Les CE appartiennent à des vues.<br>

Crée un CosmeticEdge de p1 à p2 (coordonnées de la vue). Renvoie une balise unique.<br>
tag = dvp.makeCosmeticLine(p1, p2)

Crée un CosmeticEdge au centre avec un rayon (coordonnées de la vue). Retourne une balise unique.<br>
balise = dvp.makeCosmeticCircle(center, radius)

Crée un CosmeticEdge au centre avec un rayon rayon(coordonnées de la vue). Retourne une balise unique.<br>
tag = dvp.makeCosmeticCircleArc(center, radius, start, end)

Renvoie un CosmeticEdge avec un identifiant unique.<br>
ce = dvp.getCosmeticEdge(id)

Renvoie un CosmeticEdge avec le nom (Edge25). Utilisé dans les sélections.<br>
ce = dvp.getCosmeticEdgeBySelection(name)

Supprime un CosmeticEdge d'une vue. Ne renvoie rien.<br>
dvp.removeCosmeticEdge(ce)

Supprime tous les CosmeticLines de la vue. Ne renvoie rien.<br>
dvp.clearCosmeticEdges()

Attributs de CosmeticEdge<br>
Tag : identifiant unique. Chaîne de caractère.<br>
Format : attributs d'apparence (style, couleur, poids, visible). Tuple.<br>

<!--T:47-->
********************************************************************************
{{Code|code=
#!/usr/bin/env python
# -*- coding: utf-8 -*-

<!--T:48-->
# Py CosmeticEdge demo
import FreeCAD
import TechDraw

<!--T:49-->
#points
org = App.Vector(0.0, 0.0, 0.0)
midTop = FreeCAD.Vector (1.0, 5.0, 0.0)   # middle, top
midBot = FreeCAD.Vector(2.0, -5.0, 0.0)      # middle, bottom
stdZ = FreeCAD.Vector(0.0, 0.0, 1.0)
center = FreeCAD.Vector(0.0, 0.0, 0.0)
arcCenter = FreeCAD.Vector(3.0, 3.0, 0.0)
vPt = FreeCAD.Vector(-3.0, 3.0, 0.0)
topRight = FreeCAD.Vector(5.0, 5.0, 0.0)
bottomLeft = FreeCAD.Vector(-5.0, -5.0, 0.0)

<!--T:50-->
#angles
arcStart = -45
arcEnd = 45

<!--T:51-->
#styles
solid = 1 
dashed = 2
dotted = 3
#weights
weight15 = 0.15
weight75 = 0.75
#colors
pyRed = (1.0, 0.0, 0.0, 0.0)
pyBlue = (0.0, 1.0, 0.0, 0.0)
pyGreen = (0.0, 0.0, 1.0, 0.0)
pyBlack = (0.0, 0.0, 0.0, 0.0)
shadow = (0.1, 0.1, 0.1, 0.0)

<!--T:52-->
radius = 5.0
style = dashed
weight = weight75

<!--T:53-->
dvp = App.ActiveDocument.View

<!--T:54-->
print(dvp)

<!--T:55-->
print("making line")
tag = dvp.makeCosmeticLine(midTop,midBot,style, weight, pyBlue)
ce = dvp.getCosmeticEdge(tag)
print("line tag: {}".format(tag))

<!--T:56-->
print("making diagonal")
dvp.makeCosmeticLine(bottomLeft,topRight,solid, weight, pyGreen)

<!--T:57-->
print("making circle")
tag2 = dvp.makeCosmeticCircle(center, radius, style, weight, pyRed)
ce2 = dvp.getCosmeticEdge(tag2)

<!--T:58-->
print("making circleArc")
dvp.makeCosmeticCircleArc(arcCenter, radius, arcStart, arcEnd, style, weight, shadow)

<!--T:59-->
#replace
print("making new format")
oldFormat = ce.Format
newFormat = (dotted,oldFormat[1], pyRed, True)
ce.Format = newFormat

<!--T:61-->
print("removing CE with tag: {}".format(tag2))
dvp.removeCosmeticEdge(tag2)

<!--T:62-->
print("finished")
}}

<span id="CenterLine_(CL)_routines_accessible_from_Python"></span>
====Routines de CenterLine (CL) accessibles à partir de Python====

Crée un nouveau CenterLine<br>
tag = dvp.makeCenterLine(subObjs, mode)<br>

Récupère un CenterLine avec une balise unique.<br>
cl = dvp.getCenterLine(tag)

Récupère un CenterLine par nom de sous-objet. Utilisé dans la sélection.<br>
cl = dvp.getCenterLine("Edge5")

Supprime un CenterLine cl d'une vue. Ne renvoie rien.<br>
dvp.removeCenterLine(cl)

Attributs de CenterLine<br>
Tag : identifiant unique. Chaîne de caractères. En lecture seule.<br>
Type : 0 - face, 1 - 2 lignes, 2 - 2 points. Entier. En lecture seule.<br>
Mode : 0 - vertical, 1 - horizontal, 2 - aligné. Entier.<br>
Format : attributs d'apparence (style, couleur, poids, visible). Tuple.<br>
HorizShift : décalage gauche/droite. Flottant.<br>
VertShift : décalage haut/bas. Flottant.<br>
Rotation : rotation en degrés. Flottant.<br>
Extension : longueur supplémentaire à ajouter. Flottant.<br>
Flip : inverse l'ordre des points pour une ligne centrale à 2 points. Booléen.<br>
Edges : noms des bords de la source. Liste de chaînes de caractères.<br>
Faces : noms des faces sources. Liste de chaînes de caractères.<br>
Points : noms des points sources (sommets). Liste de chaînes de caractères.<br>

<!--T:70-->
********************************************************************************
{{Code|code=
#!/usr/bin/env python
# -*- coding: utf-8 -*-

<!--T:71-->
# Py CenterLine demo
import FreeCAD
import Part
import TechDraw

<!--T:72-->
start = FreeCAD.Vector (1.0, 5.0, 0.0)   # middle, top
end = FreeCAD.Vector(1.0, -5.0, 0.0)      # middle, bottom
faceNames = ["Face0"]
edgeNames = ["Edge2", "Edge3"]
vertNames = ["Vertex1", "Vertex2"]
vMode = 0   #vertical
hMode = 1   #horizontal
aMode = 2   #aligned
#styles
solid = 1 
dashed = 2
dotted = 3
#weights
weight15 = 0.15
weight75 = 0.75
#colors
pyRed = (1.0, 0.0, 0.0, 0.0)
pyBlue = (0.0, 1.0, 0.0, 0.0)
pyBlack = (0.0, 0.0, 0.0, 0.0)
#adjustments
hShift = 1.0
vShift = 1.0
extend = 4.0
rotate = 30.0
flip = False;

<!--T:73-->
dvp = App.ActiveDocument.View

<!--T:74-->
print("making face CenterLine")
tag = dvp.makeCenterLine(faceNames,vMode)
cline = dvp.getCenterLine(tag)
print("cline tag: {}".format(tag))

<!--T:75-->
#replace
print("making new format")
oldFormat = cline.Format
newFormat = (dotted,oldFormat[1], pyRed, True)
cline.Format = newFormat
cline.Extension = 10.0

<!--T:77-->
print("making edgeCenterLine")
cline2 = dvp.makeCenterLine(edgeNames,hMode)

<!--T:78-->
print("making vertexCenterLine")
cline3 = dvp.makeCenterLine(vertNames,aMode)

<!--T:79-->
print("finished")
}}

<span id="DrawViewPart_Geometry"></span>
===Géométrie de DrawViewPart===

[topoShapeEdge] = dvp.getVisibleEdges() 

[topoShapeEdge] = dvp.getHiddenEdges()

topoShapeEdge = dvp.getEdgeByIndex(i) <br/>
topoShapeEdge = dvp.getEdgeBySelection("Edge1")

topoShapeVertex = dvp.getVertexByIndex(i) <br/>
topoShapeVertex = dvp.getVertexBySelection("Vertex1")

Redessine le graphique pour cette vue.<br>
dvp.requestPaint()

{{TechDraw Tools navi{{#translation:}}}}
{{Userdocnavi{{#translation:}}}}
[[Category:API{{#translation:}}]]
[[Category:Poweruser Documentation{{#translation:}}]]
{{clear}}