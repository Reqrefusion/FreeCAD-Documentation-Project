<languages/>
{{TOCright}}

<div lang="en" dir="ltr" class="mw-content-ltr">
== Introduction ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The main source code management tool for the FreeCAD project is [https://en.wikipedia.org/wiki/Git_%28software%29 Git], which can be easily installed in most operating systems from a package manager or directly from [https://git-scm.com/ Git's website]. You are advised to become familiar with Git before working with the FreeCAD source code directly. Visit the [https://git-scm.com/doc Git documentation] page for the reference manual, as well as the [https://git-scm.com/book/en/v2 Pro Git book] to learn to use the system in a general way. The present document focuses on the use of Git for FreeCAD development. Compiling FreeCAD is described in [[Compiling|Compiling]].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
While Git is primarily a terminal application, there are many graphical clients for it which facilitate working with branches, applying patches, and submitting pull requests to a main branch. Examples include [https://git-scm.com/docs/git-gui git-gui] (helps with staging and commits, can start gitk), [https://git-scm.com/docs/gitk gitk] (shows commit history, the first graphical interface developed),  [https://wiki.gnome.org/Apps/Gitg/ gitg] (Gnome), [https://github.com/tibirna/qgit qgit] (Qt), [https://jonas.github.io/tig/ tig] (Ncurses), [http://github.com/git-cola/git-cola git-cola], and [https://www.gitkraken.com/ GitKraken] (proprietary). Please see [[Developing FreeCAD with GitKraken|Developing FreeCAD with GitKraken]] for a cursory introduction to this tool.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Note: if any of this is starting to make you dizzy, there is a very good non-technical series on how to use git and Github called '[https://youtu.be/BCQHnlnPusY Git and Github for Poets]'
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Source code access ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Everybody can access and get a copy of the FreeCAD source code, but only the FreeCAD project managers have write access to it. You can get a copy of the code, study it and modify it as you wish, but if you want your changes to be included in the official source code, you need to perform a "pull request" against the main repository so that your modifications can be reviewed by the managers. This style of development is known as the [https://git-scm.com/book/en/v2/Distributed-Git-Distributed-Workflows Dictator and lieutenants workflow], as the core developers (dictators) and trusted developers (lieutenants) filter the code that is submitted by independent developers and users.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
If your source code changes are significant, you are advised to explain them in the pull request section of the [https://forum.freecad.org/viewforum.php?f=17 FreeCAD forum].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
[[File:FreeCAD_git_workflow.svg|600px]]
{{Caption|Generic workflow to develop code for FreeCAD; everybody can get the code from the main repository, but the main developers have the exclusive right to review and merge submissions by other developers.}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Official GitHub repository ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The FreeCAD source code is hosted on Github, {{URL|https://github.com/FreeCAD/FreeCAD}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In order to contribute code, you need to have a [https://github.com/join GitHub account].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In the past, the source code was hosted as an SVN repository, {{URL|https://free-cad.svn.sourceforge.net/svnroot/free-cad}}. This was moved to GitHub on 2011 October 10th, with [https://github.com/FreeCAD/FreeCAD/commit/120ca87015 commit 120ca87015].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
:Therefore, there are many changes that were made before this time which are not recorded in the modern Git commit history. Read more about this on the [[History|History]] page.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Setting your Git username ===
</div>

<div class="mw-translate-fuzzy">
=== Configurando tu nombre de usuario en Git ===

Los usuarios deberían enviar a sus repositorios de proyecto utilizando sus nombres de usuario de SourceForge.net. Si no está definido globalmente, lo puedes definir localmente para el repositorio de Gir actual así:
</div>

{{Code|lang=text|code=
git config user.name "YOUR_NAME"
git config user.email GITHUB_USERNAME@users.noreply.github.com
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Where {{incode|"YOUR_NAME"}} represents your full name or nickname, used to identify the author of a particular commit, and {{incode|GITHUB_USERNAME}} indicates the name of your account on GitHub.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Remote repositories ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Please read [https://stackoverflow.com/questions/9257533/what-is-the-difference-between-origin-and-upstream-on-github#9257901 What is the difference between origin and upstream on GitHub?] (Stackoverflow) to help you understand the difference between {{incode|origin}} and {{incode|upstream}} in the context of Git. This section explains how to set the correct repositories for development.
Essentially: 
* {{incode|origin}} is your personal fork of the official FreeCAD repository, that is, {{URL|https://github.com/GITHUB_USERNAME/FreeCAD}}
* {{incode|upstream}} is the official FreeCAD repository, that is, {{URL|https://github.com/FreeCAD/FreeCAD}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
This distinction is important, as you should write code in your own copy of the repository first, before pushing those changes to the official repository.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Based on the above, there are two ways to setup your Git development environment:
* 1st Method: fork on GitHub and clone your fork locally
* 2nd Method: clone FreeCAD directly to your local machine, and adjust the remote servers
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
We recommend the 1st method because it's one step faster.
</div>

<div class="mw-collapsible mw-collapsed toccolours">

<div lang="en" dir="ltr" class="mw-content-ltr">
==== 1st Method: Fork on GitHub and clone your fork locally ====
</div>

<div class="mw-collapsible-content">

<div lang="en" dir="ltr" class="mw-content-ltr">
First you will fork the FreeCAD repository in GitHub, then clone this personal fork to your computer, and finally set the {{incode|upstream}} repository.
* [https://github.com/join Log in] to your GitHub account.
* Go to the official FreeCAD repository: {{URL|https://github.com/FreeCAD/FreeCAD}}
* In the top right of the page press the "Fork" button. This will create a personal copy of the FreeCAD repository under your GitHub username: {{URLn|https://github.com/GITHUB_USERNAME/FreeCAD}}
* On your machine, clone your newly created FreeCAD fork. It will be created inside a directory {{incode|freecad-source}}.
</div>

{{Code|lang=text|code=
git clone https://github.com/GITHUB_USERNAME/FreeCAD.git freecad-source
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
* Once the download is complete, enter the new source directory and set the {{incode|upstream}} repository.
</div>

{{Code|lang=text|code=
cd  freecad-source
git remote add upstream https://github.com/FreeCAD/FreeCAD.git
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
* Confirm your remote repositories with {{incode|git remote -v}}; the output should be similar to this
</div>

{{Code|lang=text|code=
origin	https://github.com/GITHUB_USERNAME/FreeCAD.git (fetch)
origin	https://github.com/GITHUB_USERNAME/FreeCAD.git (push)
upstream	https://github.com/FreeCAD/FreeCAD.git (fetch)
upstream	https://github.com/FreeCAD/FreeCAD.git (push)
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
* Now development can begin.
</div>

</div>
</div>

<div class="mw-collapsible mw-collapsed toccolours">

<div lang="en" dir="ltr" class="mw-content-ltr">
==== 2nd Method: Clone FreeCAD directly to your local machine  ====
</div>

<div class="mw-collapsible-content">

<div lang="en" dir="ltr" class="mw-content-ltr">
First you will fork the FreeCAD repository in GitHub, however, you will clone the original FreeCAD repository to your local machine, and then alter your remotes via the terminal.
* [https://github.com/join Log in] to your GitHub account.
* Go to the official FreeCAD repository: {{URL|https://github.com/FreeCAD/FreeCAD}}
* In the top right of the page press the "Fork" button. This will create a personal copy of the FreeCAD repository under your GitHub username: {{URLn|https://github.com/GITHUB_USERNAME/FreeCAD}}
* Clone the original FreeCAD repository. It will be created inside a directory {{incode|freecad-source}}.
</div>

{{Code|lang=text|code=
git clone https://github.com/FreeCAD/FreeCAD.git freecad-source
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
* Once the download is complete, enter the new source directory and set the {{incode|origin}} repository.
</div>

{{Code|lang=text|code=
cd freecad-source
git remote add origin https://github.com/GITHUB_USERNAME/FreeCAD.git
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
* Then set up the {{incode|upstream}} repository.
</div>

{{Code|lang=text|code=
git remote add upstream https://github.com/FreeCAD/FreeCAD.git
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
* Confirm your remote repositories with {{incode|git remote -v}}; the output should be similar to this
</div>

{{Code|lang=text|code=
origin	https://github.com/GITHUB_USERNAME/FreeCAD.git (fetch)
origin	https://github.com/GITHUB_USERNAME/FreeCAD.git (push)
upstream	https://github.com/FreeCAD/FreeCAD.git (fetch)
upstream	https://github.com/FreeCAD/FreeCAD.git (push)
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
* Now development can begin.
</div>

</div>
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
If for some reason the remote repositories exist but point to the wrong address, you can remedy the situation by renaming the remote repository's name. For example, {{incode|origin}} should point to your personal fork; if it is pointing to the original FreeCAD repository, change the name of this remote to {{incode|upstream}}, and manually add the {{incode|origin}} repository.
</div>

{{Code|lang=text|code=
git remote rename origin upstream
git remote add origin https://github.com/GITHUB_USERNAME/FreeCAD.git
git remote -v
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
You can also show more information with the {{incode|show}} keyword.
</div>

{{Code|lang=text|code=
git remote show origin
git remote show upstream
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
== Git development process ==
</div>

<div class="mw-translate-fuzzy">
== En desarrollo == 
Antes de nada '''nunca desarrolles en el '''ramal principal'''! Crea un ramal local para el desarrollo. 
Puedes aprender a hacer esto [http://book.git-scm.com/3_basic_branching_and_merging.html aquí].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
[[File:FreeCAD_git_branches_workflow.svg|800px]]
{{Caption|Generic workflow to develop code for FreeCAD using {{incode|git}}; the main repository is forked online and cloned to an offline computer (0); new branches (1) are used to commit local changes and additions to the code (2); the branches are rebased to the latest online code (3), and then are pushed to the remote repository (4); then a pull request is created in order to merge the code into the main repository (5). Then the personal clone is updated with the new main code (a); this updated main is also pushed to the remote repository (b) in order to have the same code both online and offline.}}
</div>

<span id="Branching"></span>
=== Ramificado ===

Una importante característica de Git es que es extremadamente sencillo trabajar con ramas y fusionarlas. La mejor forma de trabajar recomienda crear una nueva rama siempre que quieras trabajar en una nueva característica. La creación de una rama se hace con:

<div lang="en" dir="ltr" class="mw-content-ltr">
Instead of working on the main version of the code, best practices with Git recommend creating a new branch whenever you want to work on a new feature. Branches are inexpensive, they don't copy the entire source tree, but merely create a point in time on top of which you will write code; thus branches help keep work in progress separate from the main code.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Using a new branch is done in two steps, first your create the branch, and then you switch to it:
</div>

{{Code|lang=text|code=
git branch myNewBranch
git checkout myNewBranch
}}

o, ambas operaciones en una:

{{Code|lang=text|code=
git checkout -b myNewBranch
}}

siempre puedes comprobar con que rama estas:

{{Code|lang=text|code=
git branch
git branch -vv
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
After you've made changes and committed those changes use the {{incode|log}} operation with the following options to visualize the branches
</div>

{{Code|lang=text|code=
git log --oneline --decorate --graph --all
}}

<span id="Committing"></span>
=== Envío ===

Una vez que hagas algo de trabajo, envíalo con:

<div lang="en" dir="ltr" class="mw-content-ltr">
Once you are inside a new branch, edit the source files that you want with a text editor. To see which files were modified use the {{incode|status}} and {{incode|diff}} operations; when you are satisfied with the modifications, save the changes with the {{incode|commit}} operation:
</div>

{{Code|lang=text|code=
git status
git diff
git commit -a
}}

A diferencia de SVN, tienes que especificar los archivos que quieres enviar (o todos con la opción -a). Tu editor de texto se abrirá para permitirte escribir un mensaje de envío.

<div lang="en" dir="ltr" class="mw-content-ltr">
Alternatively add the message in the commit itself:
</div>

{{Code|lang=text|code=
git commit -a -m "Fix the bug in the clone function."
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
If you create new files or directories, you must use the {{incode|add}} operation first to add them to the local repository before committing the changes.
</div>

{{Code|lang=text|code=
git add path
git commit -a
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Where {{incode|path}} can be any directory or file.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Writing good commit messages ===
</div>

<div class="mw-translate-fuzzy">
=== Escribiendo buenos mensajes de envío ===

Deberías tratar de trabajar en pedazos pequeños. Si no puedes resumir tus cambios en una frase, entonces posiblemente ha pasado pasado demasiado tiempo desde que hiciste un envío. También es importante que ofrezcas descripciones de tu trabajo que sean útiles y ayuden. Para los mensajes de envío, FreeCAD ha adoptado un formato mencionado en el libro Pro Git (mira [[#Otras lecturas]]).
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
For big changes, it is important that you have helpful and useful descriptions of your work. FreeCAD has adopted a format mentioned in the [https://git-scm.com/book/en/v2 Pro Git] book, which consists of a short message, and then a larger descriptive paragraph.
</div>

<div class="mw-translate-fuzzy">
 Resumen corto (50 caracteres o menos) de cambios

 Texto de explicación más detallado, si es necesario. En unos 72 caracteres.
 En algunos contextos, la primera línea es tratada como el tema
 de un email y el resto del texto como el cuerpo. La línea en blanco
 separando el tema del cuerpo es crítica (a menos que omitas el cuerpo por
 completo); las herramientas de recálculo se pueden confundir si pones los
 dos juntos.
 
 Más párrafos van después de líneas en blanco. 
 
  - Las listas con viñetas también están bien
 
  - Tipicamente un guión o asterisco se utiliza para la viñeta, precedido 
    por un espacio en blanco, con líneas en blanco en medio, pero las 
    convenciones aquí varían
</div>

<div class="mw-translate-fuzzy">
Si estas haciendo un montón de trabajo relacionado, se sugiere [http://forum.freecadweb.org/viewtopic.php?f=10&t=2062&p=14887#p14886 aquí] que deberías hacer tantos envíos grandes o pequeños como sea necesario para que tengan sentido en lo que estés trabajando utilizado los mensajes cortos de envío. Cuando quieras fusionarlos, haz un registro master..BRANCH y utiliza el resultado para tu mensaje de envío. Cuando fusionas con el principal utiliza la opción --squash y envía con tu mensaje de envío. Esto te permitirá ser muy liberal con tus envíos y ayudar a proporcionar un buen nivel de detalle en los mensajes de envío sin demasiadas descripciones distintas.
</div>

{{Code|lang=text|code=
git log main..myNewBranch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
to see the individual commit messages. Then you can write a high quality message when performing a merge.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
When you merge to main use the {{incode|--squash}} option and commit with your quality commit message. This will allow you to be very liberal with your commits and help to provide a good level of detail in commit messages without so many distinct descriptions.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Squashing commits ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Squashing refers to the process of combining various consecutive commits into one. This may be desirable if you made many small commits that you want to present as a single commit, for example, when changing a single variable, correcting spelling mistakes, and adjusting the spacing of the code. You should squash only small commits to a single file; big changes to the code across multiple files should contain the full commit history.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
With {{incode|git log --oneline}} you can see many commits in sequence, with the newest commit on top. In this example, starting from "feature A" many commits are made to implement "feature B"; we would like to squash all commits belonging to "feature B" into one.
</div>

{{Code|lang=text|code=
871adb OK, feature B is fully implemented
1c3317 Whoops, it is not ready yet...
87871a I'm almost ready!
643d0e Code cleanup
af2581 Fix this and that
4e9baa Good implementation
d94e78 Prepare the module for feature B
6394da Feature A
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Use the {{incode|rebase}} operation with the {{incode|--interactive}} or {{incode|-i}} option to select various commits and squash them. Use the hash of the commit just before the first one that you want to squash, in this case the one corresponding to "feature A".
</div>

{{Code|lang=text|code=
git rebase -i 6394da
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
(TIP: If you know how many commits you want to edit, you can use {{incode|git rebase -i HEAD~n}} to work on the last {{incode|n}} commits)
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The command line editor, like {{incode|nano}} or {{incode|vim}}, will open to show you the commits again, now with the older commit on top. Before each commit, the word {{incode|pick}} will be shown. Delete the word {{incode|pick}}, and write the word {{incode|squash}} or just the letter {{incode|s}} instead, with the exception of the first entry; this commit is the oldest one, so all future commits will be squashed into it.
</div>

{{Code|lang=text|code=
pick d94e78 Prepare the module for feature B
s 4e9baa Good implementation
s af2581 Fix this and that
s 643d0e Code cleanup
s 87871a I'm almost ready!
s 1c3317 Whoops, it is not ready yet...
s 871adb OK, feature B is fully implemented
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Save the file and close the editor.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The editor will open up again. Now you can add a longer message that describes all changes as if they were a single commit. Save the file and close the editor once more. This will finish combining those commits into one, with the new commit message that you wrote.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
You can use {{incode|git log --oneline}} again to observe the new commit history. In this case only a single commit for "feature B" will appear, on top of the unmodified commit for "feature A".
</div>

{{Code|lang=text|code=
c83d67 OK, feature B is fully implemented now, with proper module setup, and clean code.
6394da Feature A
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
When coding for FreeCAD, we ask that you begin each commit message with the module that it affects. For example, a commit message for a change to sketcher might be:
<pre>
Sketcher: make straight lines curve a bit
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Straight lines are sort of ugly, so this commit adds a little bit of curvature to them, so
they are more visually pleasing. They also sparkle some, and change colors over time.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Fixes bug #1234.
</pre>
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Your PR will be easier to review, and faster to be merged, if you are careful to use rebase to structure and describe your commits before submitting.
</div>

<span id="Pushing_your_work_to_your_GitHub_repository"></span>
<div class="mw-translate-fuzzy">
=== Publicación de tu trabajo en el repositorio de sourceforge ===

Después de hacer algunos cambios en tu ramal local y enviarlos (es decir, enviarlos "localmente") puedes enviar tu repositorio al servidor. Esto abre tu ramal al público y permite que los desarrolladores principales revisen e integren tu ramal en el ''principal''.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The local branches in your computer aren't automatically synchronized with the remote servers that you have specified as {{incode|origin}} or {{incode|upstream}} (see [[#Remote repositories|Remote repositories]]); you have to explicitly push the branches to the remote servers, for which you must have write access. Once you do this, the branches become public, and available for review by other developers.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
For FreeCAD, you should push your local branch to the {{incode|origin}} remote repository, that is, {{URLn|https://github.com/GITHUB_USERNAME/FreeCAD}}. You need to enter your username and password every time you push, unless you have set up [https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage#_credential_caching Credential caching]. Please read [https://help.github.com/articles/pushing-to-a-remote/ Pushing commits to a remote repository] for more information.
</div>

{{Code|lang=text|code=
git push origin myNewBranch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
When you work with a single branch, you may need to interactively rebase, squash, and fix commits many times. In this case, your branch history will not be simple, and you will not be able to push it to the remote repository. You may get a message like the following, saying that it is not possible to do a "fast-forward" push.
</div>

{{Code|lang=text|code=
error: failed to push some refs to 'https://github.com/USER/FreeCAD.git'
hint: Updates were rejected because a pushed branch tip is behind its remote
hint: counterpart. Check out this branch and integrate the remote changes
hint: (e.g. 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
In order to finally push your branch to the remote repository you need to "force push" it. This will completely overwrite your remote branch with the actual branch that you have offline.
</div>

{{Code|lang=text|code=
git push -f origin myNewBranch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The regular developer doesn't have write access to the {{incode|upstream}} repository {{URL|https://github.com/FreeCAD/FreeCAD}}, therefore, you should never push code to this remote server.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Rebasing from upstream ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
While you work on your own branch, the official FreeCAD code keeps "moving forward" with commits from other developers, and thus starts diverging from the code that you have in your personal fork.
</div>

<!--NOT CHANGE THE <pre> </pre> BALISE CAUSE THE SPACE IN MACRO CODE IS NOT RESPECTED-->
<pre>
      .-----A origin/myNewBranch
     / 
-----o-----------Z FreeCAD upstream/main
</pre>

<div lang="en" dir="ltr" class="mw-content-ltr">
Therefore, when you are ready to merge your branch to the main FreeCAD repository, you must "rebase" your own copy of the repository, so that it is as close as possible to the official repository. See [https://git-scm.com/book/en/v2/Git-Branching-Rebasing Git Branching - Rebasing] for more information.
</div>

{{Code|lang=text|code=
git checkout myNewBranch
git pull --rebase upstream main
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
This will download the code from the {{incode|main}} branch of the {{incode|upstream}} repository (the official FreeCAD source), and will merge it with your current branch ({{incode|myNewBranch}}), so that your changes will appear on top of the latest official code. If nobody modified the same files that you did, then the merge will succeed without problems. If some files were changed at the same time by different people, there may be a conflict that needs to be resolved.
</div>

<!--NOT CHANGE THE <pre> </pre> BALISE CAUSE THE SPACE IN MACRO CODE IS NOT RESPECTED-->
<pre>
                  .-----A' origin/myNewBranch
                 /
-----o-----------Z FreeCAD upstream/main
</pre>

<div lang="en" dir="ltr" class="mw-content-ltr">
To summarize, you need to be in the appropriate branch, rebase the upstream code, and then proceed with the push.
</div>

{{Code|lang=text|code=
git checkout myNewBranch
git pull --rebase upstream main
git push origin myNewBranch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The {{incode|pull}} operation is equivalent to a {{incode|fetch}} followed by a {{incode|merge}}. When the {{incode|--rebase}} option is used, instead of doing a simple {{incode|merge}}, it runs the {{incode|rebase}} operation.
</div>

{{Code|lang=text|code=
git pull upstream

git fetch upstream
git merge FETCH_HEAD
}}

{{Code|lang=text|code=
git pull --rebase upstream main

git fetch upstream
git rebase main
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Merging the branch (pull request) ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Once you have committed your changes locally, rebased your branch from the upstream repository, and pushed your branch online, you can initiate a "pull request". A [https://help.github.com/articles/about-pull-requests/ pull request] tells the administrators of the official FreeCAD repository that you want to merge the new code in your branch with the official code.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
To recap, the development process looks like this:
# Fork FreeCAD and get a local copy of that fork.
# Create a branch on your fork and change to that branch.
# Code! Commit and much or as little as you like, writing good commit messages to keep track of what you are doing.
# When you are satisfied with your work, use {{incode|git rebase -i HEAD~n}} (where n is the total number of commits you've made) to collapse your commits into a logical set with good commit messages (each message should begin with the name of the module it affects, e.g. "Sketcher: make straight lines curve a bit").
# Use GitHub to submit your code as a "Pull Request (PR)" as described below.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
As soon as you push the code to your {{incode|origin}} repository {{URLn|https://github.com/GITHUB_USERNAME/FreeCAD}}, GitHub will give you the option of comparing and creating a pull request against the {{incode|upstream}} repository. By pressing {{Button|Compare & pull request}} you will open an interface that will allow you to pick which repository is the "base", target of the merge, and which is the "head", your additional code. A quick check will be done by the system telling you if there are no conflicts with the files that you modified; if you worked on files that nobody has touched, your branch will be able to merge cleanly.
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
GitHub will show you a text editor so you can write a message documenting your changes: this editor will be pre-filled with a welcome message (that you can delete), a checklist (that you should go through), and a reminder to document your change on the wiki when it's accepted. To use the checklist, go through each item in turn and change the {{incode|[ ]}} to {{incode|[X]}} to indicate that you've done that step. GitHub will also display the number of commits in your branch, the number of files that were modified, and a view showing you the differences between the "base" and the "head" so that everybody can immediately see your intended modifications. Double-check these for things like stray blank lines you didn't mean to add, or huge formatting changes that your IDE decided to make behind your back.
</div>

{{Code|lang=text|code=
base repository: FreeCAD/FreeCAD    base: main  <----  head repository: GITHUB_USERNAME/FreeCAD    compare: myNewBranch

Able to merge. These branches can be automatically merged.
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Click {{Button|Create pull request}} to proceed. A message will appear indicating that some checks need to be done on the code. This is a system that compiles FreeCAD automatically and runs the unit tests. If the tests pass, the pull request will have a better chance of being merged into the main code, otherwise a report will be made indicating the errors encountered. See [https://travis-ci.org/FreeCAD/FreeCAD/pull_requests FreeCAD pull requests].
</div>

<!--NOT CHANGE THE <pre> </pre> BALISE CAUSE THE PIPE OR SPACE IN MACRO CODE CUT THE MACRO-->
<pre>
Some checks haven’t completed yet

* continuous-integration/travis-ci/pr Pending — The Travis CI build is in progress  |Required|
</pre>

<div lang="en" dir="ltr" class="mw-content-ltr">
If the tests succeed, you will see a message such as the following
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
All checks have passed
</div>

<!--NOT CHANGE THE <pre> </pre> BALISE CAUSE THE PIPE OR SPACE IN MACRO CODE CUT THE MACRO-->
<pre>
* continuous-integration/travis-ci/pr — The Travis CI build passed  |Required|
</pre>

<div lang="en" dir="ltr" class="mw-content-ltr">
This branch has no conflicts with the base branch
Only those with write access to this repository can merge pull requests.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Now you must wait for the administrators to merge your branch; you will be notified when this happens.
</div>

{{Code|lang=text|code=
Pull request successfully merged and closed

You’re all set — the GITHUB_USERNAME:myNewBranch branch can be safely deleted.
If you wish, you can also delete your fork of FreeCAD/FreeCAD.
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
If you wish, you may delete the branch that was just merged, or even your entire FreeCAD fork, as your own code is already included at the end of the main branch.
</div>

{{Code|lang=text|code=
-----o-----------Z----A' FreeCAD upstream/main
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Emphasis|Note:}} you may continue working ({{incode|git commit -a}}) on the same branch while you wait for merge approval; if you {{incode|git push}} again, a second merge commit will be queued in the same pull request, and another automated test will be done. That is, while your merges aren't yet approved by the administrators, you may keep pushing changes to your {{incode|origin}} repository, and this will queue those commits in the same pull request to the {{incode|upstream}} repository. Using a single pull request to queue many individual commits is often desirable for small changes. For big additions to the source code, you should create another branch, develop your features there, and then submit a separate pull request for this branch.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The pull request interface can be used whenever you want to submit code from your own repositories to another repository in GitHub. You can use it to merge code in the opposite direction as well, from other people's branches to your own, or even between your own branches. In the last case, since you own the branches, the merges can be approved by yourself immediately.
</div>

{{Code|lang=text|code=
base repository: SomeProject/Some_Software  base: main       <----  head repository: GITHUB_USERNAME/Some_Software  compare: add_new_functions
base repository: GITHUB_USERNAME/FreeCAD    base: myNewBranch  <----  head repository: FreeCAD/FreeCAD                compare: main
base repository: GITHUB_USERNAME/FreeCAD    base: myNewBranch  <----  head repository: GITHUB_USERNAME/FreeCAD        compare: fix-many-bugs-branch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Keeping the GitHub repository up to date ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Once you've forked FreeCAD, your personal repository exists independently from the original. When the original repository has new commits, GitHub will inform you that your personal repository is behind in number of commits:
</div>

{{Code|lang=text|code=
This branch is 5 commits behind FreeCAD:main.
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
In similar way, if you created a development branch with new code, GitHub will inform you that this branch is ahead in number of commits; that is, this branch has changes that haven't been merged into the official FreeCAD repository:
</div>

{{Code|lang=text|code=
This branch is 3 commits ahead of FreeCAD:main.
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
While developing, both cases are possible, as your own branch may lack commits made by other developers, but include new commits by you:
</div>

{{Code|lang=text|code=
This branch is 2 commits ahead, 14 commits behind FreeCAD:main. 
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
When developing code it is recommended that you rebase the branch in which you are currently working, as that will put your branch always ahead of the FreeCAD main code.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
As for your original {{incode|main}} branch, it will never be automatically updated by GitHub; this is something that you must do yourself. Switch to the {{incode|main}} branch, then {{incode|pull}} from {{incode|upstream}} (which performs a {{incode|fetch}} and {{incode|merge}}), and then push this updated {{incode|main}} branch to your remote {{incode|origin}} repository.
</div>

{{Code|lang=text|code=
git checkout main
git pull upstream main
git push origin main
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
After this is done, GitHub will let you know that your are synchronized with the {{incode|upstream}} repository.
</div>

{{Code|lang=text|code=
This branch is even with FreeCAD:main. 
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Now that your {{incode|main}} is up to date, you may decide to switch to it, and delete the other branch that you used previously to develop a feature.
</div>

{{Code|lang=text|code=
git checkout main
git branch -d myNewBranch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
To delete the branch in the {{incode|origin}} remote repository, you can use the {{incode|push}} operation. Normally, you push a local branch; this creates a remote branch with the same name as your local branch.
</div>

{{Code|lang=text|code=
git push origin myNewBranch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
However, if you use the notation {{incode|local_name:remote_name}}, the local branch is created in the remote repository under a different name:
</div>

{{Code|lang=text|code=
git push origin myNewBranch:someRemoteBranch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Therefore, you can delete the remote branch by pushing an empty local branch:
</div>

{{Code|lang=text|code=
git push origin :myNewBranch
git push origin :someRemoteBranch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Now that you only have an up-to-date {{incode|main}}, you can create a new branch, and repeat the steps of changing files, committing, pushing, submitting a pull request, merging, and updating.
</div>

{{Code|lang=text|code=
git checkout main
git checkout -b anotherBranch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
If you don't want to delete your already custom branch, you may force updating it to be equal to the updated {{incode|main}}; then you can do whatever you want with it, including adding more commits and pushing it to the remote {{incode|origin}} repository.
</div>

{{Code|lang=text|code=
git checkout myNewBranch
git reset --hard main
git push -f origin myNewBranch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Hard resetting a branch like this is usually not needed. In most cases, you want to follow the sequence of creating a new branch, committing changes, pushing those changes, merging the branch, and then deleting the branch.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Advanced Git operations ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Searching ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Some handy tools to help you find what you're looking for:
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Search filenames ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Use {{incode|git ls-files}} to search the repository for file that contains a certain string in a filename. The example below will return all instances of the files that contain the 'dxf' in their filenames.
</div>

{{Code|lang=text|code=
git ls-files *dxf*
}}
 

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Search for a string ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Use {{incode|git grep}} to search the repository for file that contains a certain string with the files themselves. The example below will return all instances of the files that contain the 'dxf' within each and every file.
</div>

{{Code|lang=text|code=
git grep dxf
}}
 

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Resolving merge conflicts ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Merging branches with {{incode|git merge}}, or rebasing your branch with {{incode|git rebase}}, will occasionally present conflicts, as files may have been modified by another author at the same time. If this happens you should see the changes of both sides, the other author's, and your own, and then make a decision on how to include both sets of changes in the best way possible. This is normally a manual process that cannot be automated; the programmer must understand the code, and decide what code to move, re-write, or drop to solve the conflict.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Once a conflict occurs, a message like this may appear.
</div>

{{Code|lang=text|code=
CONFLICT (content): Merge conflict in src/Mod/source_code.py
error: Failed to merge in the changes.
Patch failed at 1234 Some commit message when editing source_code.py
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
If a specialized diff tool is installed and configured for Git, for example, Gnome's [https://wiki.gnome.org/Apps/Meld Meld], the conflict can be examined and solved by using the {{incode|mergetool}} operation.
</div>

{{Code|lang=text|code=
git mergetool
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The Meld tool normally displays three columns; the two columns on the sides display the two conflicting files, while the column on the middle displays the new code that will be saved and committed finally. Therefore, this central column should be edited in a way that it integrates the code of both side columns. Once the conflict is solved and the new source code (the central column) is saved, the Meld tool can be closed. Then the {{incode|merge}} or {{incode|rebase}} operation can continue.
</div>

{{Code|lang=text|code=
git merge --continue
git rebase --continue
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
For more information on merging and solving conflicts see:
* [https://git-scm.com/docs/git-merge#_how_conflicts_are_presented How merge conflicts are presented] with {{incode|git merge}}.
* [https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging#_basic_merge_conflicts Basic merge conflicts] and [https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging Git Tools - Advanced Merging].
* [https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/ Resolving a merge conflict using the command line].
* [https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_external_merge_tools External merge and diff tools] to use when you encounter a Git conflict.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Inspect changes ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Inspect the history of a single file through various commits with the {{incode|log}} operation:
</div>

{{Code|lang=text|code=
git log --patch path
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Where {{incode|path}} can be any directory or file. Instead of {{incode|--patch}}, also the shorthands {{incode|-p}} or {{incode|-u}} can be used.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Inspect changes between two branches ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Inspect the changes between two branches with the {{incode|log}} and {{incode|diff}} operations with the names of the branches:
</div>

{{Code|lang=text|code=
git log main..myBranch
git diff main..myBranch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The {{incode|log}} operation shows the commits, while {{incode|diff}} shows the actual changes in the files.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Reset files and directories ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
If you accidentally made modifications to a file or directory, you may want to completely revert these changes, to get the previous state of the source code.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
This can be done quickly using the {{incode|checkout}} operation:
</div>

{{Code|lang=text|code=
git checkout path
git checkout .
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
This will restore the {{incode|path}} (a file or a directory) to the state it is at the tip of the branch, discarding changes that haven't been committed. If {{incode|path}} is the single dot {{incode|.}}, it will restore all files in the current directory.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
If you have accidentally added files and directories you can use the {{incode|clean}} operation:
</div>

{{Code|lang=text|code=
git clean -df
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
This will forcefully delete all files and directories ({{incode|-df}}) that are not being tracked by the repository, that is, those that have not been included previously with the {{incode|add}} operation.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
To completely reset the repository, losing all uncommitted modifications, use the {{incode|reset}} operation:
</div>

{{Code|lang=text|code=
git fetch
git reset --hard FETCH_HEAD
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Where {{incode|FETCH_HEAD}} is the the tip of the {{incode|upstream}} repository. Another commit can also be used.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The {{incode|revert}} operation also reverts changes. However, this command does this by adding another commit to the history; in many cases this is not desired.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Pruning old branches ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
If you have committed many branches to the {{incode|upstream}} repository, you may wish to remove these branches from your local system as they have already been merged. The branch in the {{incode|origin}} repository online can be deleted immediately after merging. Then you can remove the local references to that branch, using the {{incode|--prune}} or {{incode|prune}} options to the {{incode|fetch}} and {{incode|remote}} operations.
</div>

{{Code|lang=text|code=
git fetch --prune origin
git remote prune origin
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Finally you can delete the branches locally
</div>

{{Code|lang=text|code=
git branch -D myBranch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
It is also a good practice to do garbage collection after a while, by using the {{incode|gc}} operation. This will cleanup unnecessary files, and compress local file revisions, in order to optimize local disk usage of the repository.
</div>

{{Code|lang=text|code=
git gc
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Working with patches ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Although Git allows you to merge different branches of code with {{incode|git merge}} (in your computer) or a pull request (remote repository), there are times when it may be desirable to create a traditional "patch", which can be sent as an attachment through email. The following workflow explains how to do this.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Creating patches ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* You should be developing your new code in a secondary branch of your repository, and not in the main branch. So the first step is to make sure you are in the correct branch.
</div>

{{Code|lang=text|code=
git branch -v
git checkout myBranch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
* Now use {{incode|git format-patch}} against the main branch, and use the {{incode|--stdout}} option to redirect the result to standard output; then redirect the standard output to a file, which for convenience is created above the source code directory.
</div>

{{Code|lang=text|code=
git format-patch main --stdout > ../myCode.patch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
* Another method is
</div>

{{Code|lang=text|code=
git format-patch HEAD^
git format-patch HEAD~1
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The number of circumflex carets {{incode|^}} or the number {{incode|1}} indicate the number of commits that should be considered, that is, {{incode|^^^}} or {{incode|~3}} will create three patches for three commits.
</div>

{{Code|lang=text|code=
git format-patch HEAD^
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
This will create a patch or series of patches with the following naming convention
</div>

{{Code|lang=text|code=
XXXX-commit-message.patch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
where {{incode|XXXX}} is a number from {{incode|0000}} to {{incode|9999}}, and the commit message forms the majority of the file name, for example,
</div>

{{Code|lang=text|code=
0001-fix-ViewProjMatrix-getProjectionMatrix.patch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Applying patches ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Git can merge patches or diffs. To know more about this process read [https://www.drupal.org/node/1399218 Applying patches with Git].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
If you already have the patch file in your system, just apply it.
</div>

{{Code|lang=text|code=
git apply myCode.patch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
You can use {{incode|curl}} to download a patch from a website, and then apply it through {{incode|git}}.
</div>

{{Code|lang=text|code=
curl -O https://some.website.org/code/myCode.patch
git apply myCode.patch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Add {{incode|.diff}} or {{incode|.patch}} at the end of the URL of a GitHub commit, pull request, or compare view so that the website shows you the plain text view of that page.
* Regular commit page: {{URL|https://github.com/FreeCAD/FreeCAD/commit/c476589652a0f67b544735740e20ff702e8d0621}}
* Diff page: {{URL|https://github.com/FreeCAD/FreeCAD/commit/c476589652a0f67b544735740e20ff702e8d0621.diff}}
* Patch page: {{URL|https://github.com/FreeCAD/FreeCAD/commit/c476589652a0f67b544735740e20ff702e8d0621.patch}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
You can point {{incode|curl}} to a particular commit patch in the repository, and pipe it directly to {{incode|git}} to apply the patch.
</div>

<pre>
curl https://github.com/FreeCAD/FreeCAD/commit/c476589652a0f67b544735740e20ff702e8d0621.patch | git apply -
</pre>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Reversing a patch ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
When you apply a patch you modify some files. However, these modifications aren't permanent until you commit the changes. Therefore, if you want to revert a patch use the following instructions.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
This will revert the changes applied, if you still have access to the original patch file.
</div>

{{Code|lang=text|code=
git apply -R myCode.patch
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Alternatively, this will remove non-committed changes to the branch.
</div>

{{Code|lang=text|code=
git checkout -f
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Stashing git commits ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Say that you're working on a branch and you find yourself making some modifications to the source that are out of the scope of your current branch; in other words, those changes would be better in another branch instead of the current one. The {{incode|git stash}} command can be used to temporarily store those uncommitted local changes.
</div>

{{Code|lang=text|code=
git stash
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
If in the future you want to use those commits, you can "pop" the commits out of the stash, and into your working branch.
</div>

{{Code|lang=text|code=
git stash pop
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Or if you decide that you don't like those saved commits anymore, you may drop the commits from the stash entirely.
</div>

{{Code|lang=text|code=
git stash drop
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
You can list multiple stash commits with
</div>

{{Code|lang=text|code=
git stash list
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
To learn more, read [https://medium.freecodecamp.org/useful-tricks-you-might-not-know-about-git-stash-e8a9490f0a1a Useful tricks you might not know about Git stash].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Check out GitHub requests locally ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
[https://gist.github.com/piscisaureus/3342247 Checkout GitHub pull requests locally]
</div>


<div lang="en" dir="ltr" class="mw-content-ltr">
=== Blame feature ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The Blame feature on GitHub is useful to find which commit introduced or last modified each line of code. To enable it, switch from the Code to the Blame tab when viewing a file or select a specific line (click on its number), press the {{Button|...}} button and choose ''View git blame''. More information about the Blame feature can be found in [https://forum.freecad.org/viewtopic.php?f=23&t=55943&p=481483#p481287 this forum thread]. The associated git command is documented [https://git-scm.com/docs/git-blame here].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Bisect ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{incode|git bisect}} is a method to find the specific commit that introduced a bug.
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
You need to find 2 commits: 
* A good commit (for example {{incode|abcd}}) before the system broke.
* A bad commit (for example {{incode|efgh}}) after the system broke.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Then enter this from the terminal:
</div>

{{Code|lang=text|code=
git bisect start
git bisect good abcd
git bisect bad efgh
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Result: {{incode|git}} will check out the mid point between the two commits.
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
The next step is to build and test the code. If the system works, continue the process by typing:
</div>

{{Code|lang=text|code=
git bisect good
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Repeat the previous step of building the code and testing it.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
If the system is broken, type:
</div>

{{Code|lang=text|code=
git bisect bad
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Repeat the previous steps applying {{incode|good}} or {{incode|bad}} depending on the outcome of your tests.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Eventually, {{incode|git}} will tell you that {{incode|wxyz}} is the first bad commit.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Finally, to exit the bisect process, type:
</div>

{{Code|lang=text|code=
git bisect reset
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Note: {{incode|git bisect}} takes a long time if good and bad are far apart.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== FreeCAD revision number ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In contrast to subversion, which uses a consecutive number for its revisions, Git produces [https://en.wikipedia.org/wiki/SHA-1 SHA-1 hash values] with every commit. A hash value is a long alphanumeric string that looks like this
</div>

{{Code|lang=text|code=
9b3ffef570596e184006287434fba54a4b03ccc3
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Latest revision number ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
To find the latest revision number of a particular branch use the {{incode|rev-list}} operation with the {{incode|--count}} option. Give the name of the branch, remote repository, tag, or a special pointer like {{incode|HEAD}}, to indicate the last commit in that particular object.
</div>

{{Code|lang=text|code=
git rev-list --count main
git rev-list --count HEAD
git rev-list --count origin
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Or browse [https://github.com/FreeCAD/FreeCAD the repository on GitHub], and read the amount of commits reported in the particular branch.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Revision number of a specific commit hash ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Since the hash is an alphanumeric string it is not very useful to decide if a certain commit is older or newer than another hash. To find the revision number of a particular hash, again use the {{incode|rev-list}} operation; the input can be the full hash, or a partial hash that is unique, usually the first 7 digits are enough.
</div>

{{Code|lang=text|code=
git rev-list --count ab1520b872821414c6ce4a15fb85d471ac2a2b03
git rev-list --count 9948ee4
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Revision hash of a specific commit number ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
If we have the commit number, say, 15000, and we want to find the corresponding hash, we need to calculate the number of commits since this point until the last commit ({{incode|HEAD}}). First, get the latest commit number.
</div>

{{Code|lang=text|code=
git rev-list --count HEAD
17465
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Then subtract the commit that we want.
</div>

{{Code|lang=text|code=
17465 - 15000 = 2465
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Then use the {{incode|log}} operation to show all commits and hashes. The {{incode|--skip}} option jumps the difference in commits that we calculated so that we go directly to the hash that we are looking for.
</div>

{{Code|lang=text|code=
git log --skip=2465
commit 44c2f19e380e76b567d114a6360519d66f7a9e24
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Since the log may show you two close commits, confirm it's the right commit number. If it's off by one, just pick the next commit in the sequence (before or after) and check again.
</div>

{{Code|lang=text|code=
git rev-list --count 44c2f19e38
15000
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
* [https://forum.freecad.org/viewtopic.php?f=10&t=26673 Show the commits] immediately before a particular commit in GitHub: in the address bar of the browser, change the word {{incode|commit}} to {{incode|commits}} to show a list.
* [https://forum.freecad.org/viewtopic.php?t=5308 Finding the revision number of the commit]
* [https://forum.freecad.org/viewtopic.php?f=18&t=12883&p=103207#p103203 Finding the revision number of the commit]
* [https://forum.freecad.org/viewtopic.php?f=10&t=31118 Finding the corresponding hash value to a particular commit number]
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Revision number in FreeCAD's interface ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The version number that appears with the [[Std_About|Std About]] tool is defined in {{incode|src/Build/Version.h}}, which is created at compile time when the {{incode|cmake}} tool is run. Read [https://forum.freecad.org/viewtopic.php?f=4&t=3025 Extract version number from git source] for more information.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Adding other repositories (remotes) ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Several collaborators of the FreeCAD project have their own Git repositories where they build up their work or where they experiment new ideas before they are ready to be included in the official source code. You may want to get their sources in order to test their code yourself when they make a pull request.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Use the {{incode|git remote}} command to add these other repositories so that you can {{incode|fetch}} and {{incode|pull}} their code.
</div>

{{Code|lang=text|code=
git checkout main
git remote add OTHER_USER OTHER_URL
git fetch OTHER_USER
git checkout -b OTHER_BRANCH OTHER_USER/OTHER_BRANCH
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
For example, lets add Bernd's remote repository:
</div>

{{Code|lang=text|code=
git remote add bernd http://github.com/berndhahnebach/FreeCAD_bhb
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The {{incode|git fetch}} command downloads the references from that remote repository.
</div>

{{Code|lang=text|code=
git fetch bernd
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
List all branches in your own repository, and those from your added remotes. Bernd's branches will display as {{incode|remotes/bernd/<branchname>}}.
</div>

{{Code|lang=text|code=
git branch -a
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Now, lets view a summarized list of the last 10 commits of bernd's {{incode|femdev}} branch.
</div>

{{Code|lang=text|code=
git log -10 --oneline remotes/bernd/femdev
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Now we can checkout the desired branch to inspect.
</div>

{{Code|lang=text|code=
git checkout remotes/bernd/femdev
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Then we can create a local branch that is based on the remote branch. This local branch we can modify, and add our own code to it.
</div>

{{Code|lang=text|code=
git checkout -b local_branch_name /remotes/bernd/femdev
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
You may wish to {{incode|git rebase}} the newly obtained branch onto the {{incode|upstream/main}} branch to make sure it is using the latest code. If there are conflicts, they will have to be solved at this point.
</div>

{{Code|lang=text|code=
git pull --rebase upstream main
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The new branch is ready to be modified and compiled as described in [[Compiling|Compiling]].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Head to the development section of the [https://forum.freecad.org/viewforum.php?f=6 FreeCAD forum] to discuss more about development.
</div>

<span id="Further_reading"></span>
== Otras lecturas ==

<div class="mw-translate-fuzzy">
* [http://spheredev.org/wiki/Git_for_the_lazy Git para los perezosos]
* [http://progit.org/book/ Git pro libro on-line]
</div>

[[Category:Developer Documentation{{#translation:}}]]
{{clear}}