<languages/>

{{Docnav/de
|[[Arch_Schedule/de|Ablaufplan]]
|[[BIM_TogglePanels/de|AnzeigenUmschalten]]
|[[BIM_Workbench/de|BIM]]
|IconL=Arch_Schedule.svg
|IconR=BIM_TogglePanels.svg
|IconC=Workbench_BIM.svg
}}

{{GuiCommand/de
|Name=BIM Preflight
|Name/de=BIM Vorabkontrolle
|MenuLocation=Manage → Vorabkontrollen...
|Workbenches=[[BIM_Workbench/de|BIM]]
}}

<span id="Description"></span>
==Beschreibung==

Mit dem Werkzeug '''BIM Vorkontrolle''' können verschiedene Tests am Modell durchgeführt werden, um dessen Kompatibilität mit IFC-Standards und bewährte Verfahren zu überprüfen, um mögliche Probleme zu erkennen, die möglicherweise behoben werden sollten.

[[Image:BIM preflight screenshot.png|600px]]

As FreeCAD is a very loose and free-style modelling platform, the requirements are very low. You can basically model and organize your BIM model the way you like, using all the tools that FreeCAD offers, both from the BIM workbench and other workbenches. The IFC format, however, has some strict requirements, and other BIM applications that can read IFC files often bring additional limitations as they more than often have difficulties with certain entities or the way certain objects are modeled.

The results of most of the tests provided by this tool are optional, which means you can choose to export your model even if they fail. You are the one to assess if you need the test to pass or not. We tried our best to give sound information to help you decide.

<span id="Usage"></span>
==Anwendung==

* Have a model opened in FreeCAD, with at least some objects
* You can select objects before launching the tests, in which case you have the option to perform the test only on the selected objects
* Press the '''Test All''' button to perform all the tests, or only buttons corresponding to individual tests.
* When the tests have finished, pressing a '''Failed''' button will give you additional information to help you decide if this is relevant to you or not.

<span id="Builtin_tests"></span>
==Integrierte Tests==

* '''Alle Tests ausführen''': Führt alle Tests nacheinander durch

<span id="FreeCAD_setup_tests"></span>
===FreeCAD-Einrichtungstests===

* '''IFC4-Unterstützung''': Prüft, ob das IFC-Import-/Exportsystem von FreeCAD ordnungsgemäß funktioniert und ob das IFC4-Format verfügbar ist (wofür eine aktuelle Version von [[Arch IFC/de|IfcOpenShell]] notwendig ist und in den Einstellungen aktiviert ist.

<span id="Project_organization_tests"></span>
===Projektorganisationstests===

* '''Project hierarchy''': The IFC format requires at least one [[Arch Building|building]] and it is also a common practice to have one [[Arch Site|site]] and at least one [[Arch BuildingPart|level (storey)]]. This test checks if these are present in the model
* '''Buildings''': Checks that all buildings found in the model are part of a [[Arch Site|site]]
* '''Levels''': Checks that all [[Arch BuildingPart|levels]] (building storeys) found in the model are prt of a building
* '''Objects structure''': Checks that all objects found in the model are part of a level

<span id="Objects_&amp;_property_tests"></span>
===Objekt- und Eigenschaften-Tests===

* '''Undefined objects''': Checks if there are objects in the model that are not BIM objects, and will therefore be exported without full BIM properties
* '''Solids''': Checks that all objects in the model have valid solid geometry
* '''Explicit quantities''': Checks that all objects with length, width or height properties are [[BIM IfcQuantities|marked for explicit export]] of these quantities
* '''Common Properties sets''': Checks that all BIM objects of common types (wall, door, etc...) have the corresponding "common" properry set applied (Pset_WallCommon, Pset_DoorCommon, etc)
* '''Property sets integrity''': Checks that all common Psets (Pset_WallCommon, Pset_DoorCommon, etc) found in the model include all and only the properties defined by the IFC standards
* '''Materials''': Checks that all BIM objects have a material
* '''Standards''': Checks that all BIM objects have a [[BIM Classification|standard code]]

<span id="Compatibility_tests"></span>
===Kompatibilitäts-Tests===

* '''Extrusions''': Checks that all BIM objects are linear extrusions
* '''Standard cases''': Checks that all [[Arch Wall|walls]] and [[Arch Structure|structural elements]] are standard cases, as defined by the IFC schema
* '''Tiny lines''': Checks that no line segment in the model is smaller than 1/32", the minimum length that Revit is able to manage...
* '''IfcRectangleProfileDef''': Checks that the option to export rectangular profiles as IfcRectangleProfileDef is disabled, because Revit (yes, them again) is unable to import that entity.

<span id="Custom_tests"></span>
==Benutzerdefinierte Tests==

Mit dem Werkzeug Vorabkontrolle können auch benutzerdefinierte Tests geschrieben werden, die nach den integrierten Werkzeugen im Vorabkontrolle-Dialog angehängt und mit der Schaltfläche '''Alle Tests ausführen''' ausgeführt werden. Diese Tests sind in Python geschrieben. Sie bestehen aus einfachen Funktionen in einer oder mehreren Python-Dateien. Sie können innerhalb dieser Funktionen beliebige Operationen ausführen, sie müssen lediglich erfolgreich sein oder fehlschlagen. Im Falle eines Fehlschlags wird eine Meldung angezeigt, die den Benutzer über den Fehler informiert.

You can write several tests in one single Python file, or divide in several files, as you prefer. These files must be placed in $USERAPPDATA/BIM/Preflight and can be given any name (Be sure to use very unique names as to not conflict with any built-in Python module. The $USERAPPDATA folder depends on your platform/operating system (usually $HOME/.FreeCAD on linux/mac, /users/YOUR USER/Application Data/roaming/FreeCAD on windows), and can also be found by entering this in the FreeCAD Python console:

 FreeCAD.getUserAppDataDir()

In jeder Python-Datei sind Tests einfache Funktionen, die keine Argumente benötigen und entweder „True“ zurückgeben, wenn der Test bestanden wurde, oder eine Textzeichenfolge, die dem Benutzer angezeigt wird, wenn der Test fehlgeschlagen ist.

Eine typische Testdatei würde wie folgt aussehen, sollte einen Namen wie "myCustomTest.py" tragen und im Verzeichnis $USERAPPDATA/BIM/Preflight abgelegt werden:

 import FreeCAD
 
 # The name of your test. You can give the functions any name
 # you want, the important is the description text below
 
 def myCustomTest():
 
    # This describes what your test does. For example,
    # here, it checks that there is at least one object in the document.
    # This text will appear next to the button in the Preflight tool
 
    """Checks that the document contains at least one object"""
 
    doc = FreeCAD.ActiveDocument
    objects = doc.Objects
    if len(objects) >= 1:
        result = True
    else:
        result = "This document contains no object"
 
    # The function must return either True or a string of
    # text if the test failed. The string or text will be displayed
    # to the user when they press the "Failed" button.
 
    return result


{{Docnav/de
|[[Arch_Schedule/de|Ablaufplan]]
|[[BIM_TogglePanels/de|AnzeigenUmschalten]]
|[[BIM_Workbench/de|BIM]]
|IconL=Arch_Schedule.svg
|IconR=BIM_TogglePanels.svg
|IconC=Workbench_BIM.svg
}}

{{BIM_Tools_navi{{#translation:}}}}
{{Userdocnavi{{#translation:}}}}