<languages/>

<span id="Introduction"></span>
==Einführung==

Der Zweck dieser Seite ist es, Beispiele auf Anfängerniveau für die [[PySide/de|PySide]] GUI Verwalter (es gibt begleitende Seiten [[PySide_Intermediate_Examples/de|Zwischen PySide Beispiele]] und [[PySide_Advanced_Examples/de|Fortgeschrittene PySide Beispiele]]).

Neulinge in der GUI-Programmierung könnten über das Wort "Widget" stolpern. Seine Bedeutung außerhalb der Computerwelt wird gewöhnlich wie folgt angegeben:

<blockquote>"eine kleine Spielerei oder mechanisches Gerät, insbesondere eines, dessen Name unbekannt oder unspezifiziert ist"</blockquote>

Für GUI-Arbeiten wie PySide wird der Begriff "Widget" meistens verwendet, um die sichtbaren Elemente der GUI zu bezeichnen - Fenster, Dialoge und Ein-/Ausgabeelemente. Alle sichtbaren Elemente von PySide werden Widgets genannt, und für diejenigen, die es interessiert, sie stammen alle von einer gemeinsamen Elternklasse ab, dem QWidget. Zusätzlich zu den sichtbaren Elementen bietet PySide auch Widgets für Netzwerk-, XML-, Multimedia- und Datenbankintegration.

Ein Widget, das nicht in ein übergeordnetes Widget eingebettet ist, wird als Fenster bezeichnet, und normalerweise haben Fenster einen Rahmen und eine Titelleiste. Die gebräuchlichsten Fenstertypen sind das "Hauptfenster" (aus der Klasse QMainWindow) und die verschiedenen Unterklassen des Dialogs (aus der Klasse QDialog). Ein großer Unterschied besteht darin, dass QDialog modal ist (d.h. der Benutzer kann nichts außerhalb des Dialogfensters tun, während es geöffnet ist) und das QMainWindow nicht-modal ist, was es dem Benutzer erlaubt, parallel mit anderen Fenstern zu interagieren.

Diese Einführung ist eine Abkürzungsliste, um ein PySide-Programm schnell unter FreeCAD zum Laufen zu bringen. Sie ist nicht dazu gedacht, Python oder PySide zu lehren. Einige Websites, die dies tun, sind:
* [https://zetcode.com/gui/pysidetutorial/ PySide-Anleitung] auf zetcode.com
* [https://www.pythoncentral.io/series/python-pyside-pyqt-tutorial/ PySide/PyQt-Anleitung] auf PythonCentral.io
* [https://srinikom.github.io/pyside-docs/ PySide 1.0.7 Referenz] auf Srinikom.github.io (man beachte, dass dies eine Referenz und keine Anleitung ist)

<span id="Import_statement"></span>
==Import Anweisung==

PySide wird standardmäßig nicht mit Python geladen, es muss vor der Verwendung angefordert werden. Die folgenden Befehle

{{Code|code=
from PySide import QtCore
from PySide import QtGui
}}

bewirken, dass die 2 Bestandteile von PySide geladen werden:
* QtGui enthält Klassen zur Verwaltung der grafischen Benutzeroberfläche (GUI)
* während QtCore Klassen enthält, die sich nicht im direkten Zusammenhang mit der Verwaltung der GUI stehen (z.B. Timer und Geometrie). 
Obwohl es möglich ist, nur das zu importieren, was benötigt wird, werden im Allgemeinen beide benötigt und beide importiert.

Die Importangaben werden in den folgenden Schnipseln nicht wiederholt; es wird davon ausgegangen, dass dies jeweils am Anfang geschieht.

<span id="Simplest_Example"></span>
==Einfachstes Beispiel==

Die einfachste Interaktion mit PySide besteht darin, dem Benutzer eine Nachricht zu präsentieren, die er nur akzeptieren kann:

{{Code|code=
reply = QtGui.QMessageBox.information(None,"","Houston, we have a problem")
}}

[[File:PySideScreenSnapshot5.jpg]]

<span id="Yes_or_No_Query"></span>
==Ja oder Nein Abfrage==

Die nächst einfachste Interaktion ist die Frage nach einer Ja oder Nein Antwort:

{{Code|code=
reply = QtGui.QMessageBox.question(None, "", "This is your chance to answer, what do you think?",
         QtGui.QMessageBox.Yes {{!}} QtGui.QMessageBox.No, QtGui.QMessageBox.No)
if reply == QtGui.QMessageBox.Yes:
         # this is where the code relevant to a 'Yes' answer goes
         pass
if reply == QtGui.QMessageBox.No:
         # this is where the code relevant to a 'No' answer goes
         pass
}}

[[File:PySideScreenSnapshot6.jpg]]

<span id="Enter_Text_Query"></span>
==Textabfrage eingeben==

Der nächste Codeschnipsel fragt den Benutzer nach einem Stück Text - beachte, dass dies wirklich jede Taste auf der Tastatur sein kann:

{{Code|code=
reply = QtGui.QInputDialog.getText(None, "Ouija Central","Enter your thoughts for the day:")
if reply[1]:
	# user clicked OK
	replyText = reply[0]
else:
	# user clicked Cancel
	replyText = reply[0] # which will be "" if they clicked Cancel
}}

[[File:PySideScreenSnapshot7.jpg]]

Denke daran, dass selbst wenn der Benutzer nur Ziffern eingibt, z.B. "1234", es sich um Zeichenketten handelt, die mit einem der folgenden Verfahren in eine Zahlendarstellung umgewandelt werden müssen:

{{Code|code=
anInteger = int(userInput) # to convert to an integer from a string representation

aFloat = float(userInput) # to convert to a float from a string representation
}}

<span id="More_Than_2_Buttons"></span>
==Mehr als 2 Schaltflächen==

Das letzte Beispiel für das Anfängerniveau zeigt, wie man einen Dialog mit einer beliebigen Anzahl von Schaltflächen aufbaut. Dieses Beispiel ist programmtechnisch zu komplex, um von einer einzigen Python-Anweisung aus aufgerufen zu werden, daher sollte es in gewisser Weise auf der nächsten Seite, die [[PySide_Intermediate_Examples/de|PySide weiterführende Beispiele]] enthält, aufgeführt werden. Andererseits ist dies oft alles, was benötigt wird, ohne sich in komplexe GUI-Definitionen zu vertiefen, so dass der Code am Ende der Seite und nicht am Anfang der folgenden weiterführenden PySide-Seite platziert wird.

{{Code|code=
from PySide import QtGui, QtCore

class MyButtons(QtGui.QDialog):
	""""""
	def __init__(self):
		super(MyButtons, self).__init__()
		self.initUI()
	def initUI(self):      
		option1Button = QtGui.QPushButton("Option 1")
		option1Button.clicked.connect(self.onOption1)
		option2Button = QtGui.QPushButton("Option 2")
		option2Button.clicked.connect(self.onOption2)
		option3Button = QtGui.QPushButton("Option 3")
		option3Button.clicked.connect(self.onOption3)
		option4Button = QtGui.QPushButton("Option 4")
		option4Button.clicked.connect(self.onOption4)
		option5Button = QtGui.QPushButton("Option 5")
		option5Button.clicked.connect(self.onOption5)
		#
		buttonBox = QtGui.QDialogButtonBox()
		buttonBox = QtGui.QDialogButtonBox(QtCore.Qt.Horizontal)
		buttonBox.addButton(option1Button, QtGui.QDialogButtonBox.ActionRole)
		buttonBox.addButton(option2Button, QtGui.QDialogButtonBox.ActionRole)
		buttonBox.addButton(option3Button, QtGui.QDialogButtonBox.ActionRole)
		buttonBox.addButton(option4Button, QtGui.QDialogButtonBox.ActionRole)
		buttonBox.addButton(option5Button, QtGui.QDialogButtonBox.ActionRole)
		#
		mainLayout = QtGui.QVBoxLayout()
		mainLayout.addWidget(buttonBox)
		self.setLayout(mainLayout)
		# define window		xLoc,yLoc,xDim,yDim
		self.setGeometry(	250, 250, 0, 50)
		self.setWindowTitle("Pick a Button")
		self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)
	def onOption1(self):
		self.retStatus = 1
		self.close()
	def onOption2(self):
		self.retStatus = 2
		self.close()
	def onOption3(self):
		self.retStatus = 3
		self.close()
	def onOption4(self):
		self.retStatus = 4
		self.close()
	def onOption5(self):
		self.retStatus = 5
		self.close()

def routine1():
	print ('routine 1')

form = MyButtons()
form.exec_()
if form.retStatus==1:
	routine1()
elif form.retStatus==2:
	routine2()
elif form.retStatus==3:
	routine3()
elif form.retStatus==4:
	routine4()
elif form.retStatus==5:
	routine5()
}}

Jedes zu testende Codestück würde sich in einer Funktion mit dem Namen 'routine1()', 'routine2()' usw. befinden. Es können so viele Schaltflächen verwendet werden, wie auf den Bildschirm passen. Folge den Mustern im Codebeispiel und füge bei Bedarf zusätzliche Knöpfe hinzu - das Dialogfeld wird seine Breite entsprechend der Bildschirmbreite einstellen.

[[File:PySideScreenSnapshot8.jpg]]

Es gibt eine Codezeile:

{{Code|code=
buttonBox = QtGui.QDialogButtonBox(QtCore.Qt.Horizontal)
}}

was dazu führt, dass die Schaltflächen in einer horizontalen Linie liegen. Um sie in eine vertikale Linie zu setzen, ändere die zu lesende Zeile des Codes:

{{Code|code=
buttonBox = QtGui.QDialogButtonBox(QtCore.Qt.Vertical)
}}


{{Powerdocnavi{{#translation:}}}}
[[Category:Developer Documentation{{#translation:}}]]
[[Category:Python Code{{#translation:}}]]