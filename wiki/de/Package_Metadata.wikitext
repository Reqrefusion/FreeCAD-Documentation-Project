<languages/>
{{TOCright}}

<span id="Introduction"></span>
==Einleitung==

Beginnend mit FreeCAD Version 0.20 können externe Addons (Arbeitsbereiche, Makros, Preference-Packs, Bundles{{VersionNote/de|1.1}} und "Other", allgemeine Werkzeugsammlungen{{VersionNote/de|1.1}}) mit einer Metadaten-Datei vertrieben werden, die den Inhalt des Pakets beschreibt. Ist die Datei "package.xml" vorhanden, wird sie von FreeCAD ausgelesen und ihre Inhalte in verschiedenen Bereichen der Benutzerschnittstelle verwendet. Derzeit ist es für Arbeitsbereiche und Makros optional und für Preference-Packs erforderlich. Diese Seite dokumentiert das Format dieser Metadaten-Datei. Das Format (und der Inhalt dieser Wikiseite) basiert auf [https://ros.org/reps/rep-0149.html REP 149].

== Overall file format ==

Dieses Dokument beschreibt derzeit das Datenformat in Version 1. 

Die Metadaten-Datei muss ein gültiges, wohlgeformtes XML 1.0-Dokument sein. Sie muss "package.xml" genannt werden und sie muss im Basisverzeichnis jedes angezeigten Zweiges des Software-Pakets in ihrem git-Speicher vorhanden sein (wie in der [https://github.com/FreeCAD/FreeCAD-addons/blob/master/AddonCatalog.json Datei AddonCatalog.json des FreeCAD-Addons] angegeben). Es wird von jedem Zweig erwartet, eine unabhängige Datei package.xml zu enthalten, die eigens zu dem Zweig gehört. (z.B. sollte ein Entwicklungszweig eine Versionsnummer angeben, die verdeutlicht, dass es sich um einen Entwicklungszweig handelt usw.). Alle bekannten XML-Tags werden kleingeschrieben, aber unbekannte Tags sind "keine" Fehler. Die meisten Tags sind optional und einige betreffen nur bestimmte Arten von Paketinhalten (z.B. stellen nur Aufgabenbereiche ein "classname"-Element zur Verfügung). Nicht benötigte und unbekannte Elemente werden ignoriert.

Jeder in package.xml angegebener Pfadname muss den Schrägstrich ("/") als Verzeichnistrenner verwenden; auf Systemen, die während der Ausführung ein anderes Trennzeichen erwarten (z.B. Windows), wandelt FreeCAD diese automatisch in das korrekte Trennzeichen um.

== Content elements ==

=== <package> ===

The only top-level element allowed is <package>, and the file may only contain one <package> element. Immediately subordinate to that are several required or optional elements, defined here. No other tags are permitted directly under the <package> element.

<pre>
<package format="1" xmlns="https://wiki.freecad.org/Package_Metadata">
</pre>

The <package> tag is the unique top-level tag in a package.xml file. All other tags are nested under it.

==== Attributes ====

* format="NUMBER": Specifying the package.xml format being used. For this interface, you must specify format="1".
* xmlns="NAMESPACE": Specifies the XML namespace for this package, and must be included exactly as shown above, as a link to https://wiki.freecad.org/Package_Metadata.

==== Required child tags ====

The top-level <package> element must contain at least the following tags:

* [[#.3Cname.3E|<name>]]
* [[#.3Cversion.3E|<version>]]
* [[#.3Cdate.3E|<date>]]
* [[#.3Cdescription.3E|<description>]]
* [[#.3Cmaintainer.3E|<maintainer>]] (multiple, but at least one)
* [[#.3Clicense.3E|<license>]] (multiple, but at least one)
* [[#.3Cicon.3E|<icon>]]
* [[#.3Ccontent.3E|<content>]] (container element for package content items)

==== Optional child tags ====

* [[#.3Curl.3E|<url>]] (multiple)
* [[#.3Cauthor.3E|<author>]] (multiple)
* [[#.3Cdepend.3E|<depend>]] (multiple)
* [[#.3Cconflict.3E|<conflict>]] (multiple)
* [[#.3Creplace.3E|<replace>]] (multiple)
* [[#.3Ctag.3E|<tag>]] (multiple)
* [[#.3Cfreecadmin.3E|<freecadmin>]]
* [[#.3Cfreecadmax.3E|<freecadmax>]]
* [[#.3Cpythonmin.3E|<pythonmin>]]

=== <name> ===

REQUIRED

The name of this package. Must only contain characters that are valid for filenames (disallowed characters are /\?%*:|"<> ).

=== <version> ===

REQUIRED

A version number that follows either the [https://semver.org semantic versioning 2.0 standard] (e.g. 1.0.2-beta) or the [https://calver.org/ CalVer style] (e.g. 2021.12.08). Note that you cannot include both types, and switching between types is not supported. Internally the code has no concept of which type is chosen, when comparing versions it performs a simple numerical comparison between each successive numeric component regardless of type. Note that this cannot be left blank, some kind of version number must be assigned. When the Addon Manager detects an increase in version number it will display the "update available" information to users.

=== <date> ===

REQUIRED

The date of the current version, in the format YYYY-MM-DD or YYYY.MM.DD.

=== <description> ===

REQUIRED

A concise (up to several sentences) text-only description of this package. No markup is supported.

=== <maintainer> ===

AT LEAST ONE REQUIRED (multiple allowed)

The name of the person maintaining the package. All packages require a maintainer. For orphaned packages see below.

====Attributes====

* email="name@domain.tld" (required): Email address of the maintainer.

An orphaned package is one with no current maintainer. Orphaned packages should use the following maintainer information:

<pre>
<maintainer email="no-one@freecad.org">No current maintainer</maintainer>
</pre>

=== <license> ===

AT LEAST ONE REQUIRED (multiple allowed)

SPDX short identifier of the license(s) for this package, e.g. BSD-2-Clause, GPL-3.0-or-later, LGPL-2.1-or-later. In order to assist machine readability, only include the license's SPDX short identifier (see [https://spdx.org/licenses/ the SPDX site]). For multiple licenses multiple separate tags must be used. A package will have multiple licenses if different source files have different licenses. Every license occurring in the source files should have a corresponding <license> tag. For any explanatory text about licensing caveats, please use the <description> tag. To specify that no license applies (e.g. "All rights reserved.") set this value to "UNLICENSED". To specify a custom license without an SPDX identifier set this value to "SEE LICENSE IN <filename>".

Commonly-used license strings:
* {{incode|"Apache-2.0"}}
* {{incode|"BSD-2-Clause"}}
* {{incode|"BSD-3-Clause"}}
* {{incode|"BSL-1.0"}}
* {{incode|"GPL-2.0-or-later"}}
* {{incode|"GPL-3.0-or-later"}}
* {{incode|"LGPL-2.1-or-later"}}
* {{incode|"LGPL-3.0-or-later"}}
* {{incode|"MIT"}}
* {{incode|"MPL-1.1"}}
* {{incode|"CC0-1.0"}} (Public Domain dedication)

'''Backwards-compatibility note''': The Addon Manager will attempt to normalize license identifiers that do not exactly match an SPDX license string. This will sometimes result in a license ID that yields a non-FSF-Libre or non-OSI-approved license: for example "LGPL2" will be normalized to "LGPL-2.0", which is a non-FSF-Libre license: what was probably intended was "LGPL-2.1-or-later".

==== Attributes ====

* {{incode|file<nowiki>=</nowiki>"FILE"}} (optional): A path relative to the {{incode|package.xml}} file containing the full license text. Many licenses require including the license text when redistributing the software. E.g. the Apache License, Version 2.0 states in paragraph 4.1: "You must give any other recipients of the Work or Derivative Works a copy of this License"

=== <content> ===

REQUIRED

The <content> tag describes the actual contents of the package. It has no attributes, and contains any number of children. Those children can have arbitrary tag names, only some of which may be recognized by FreeCAD. FreeCAD currently supports "workbench", "macro", "preferencepack", "bundle" ({{Version|1.1}}), and "other" ({{Version|1.1}}) elements. Each child is then defined recursively by this standard, containing any or all of the elements allowed for the root <package> node. For example:

<pre>
<content>
  <preferencepack>
    <name>Unicorn Sparkles Theme</name>
    <version>1.0.0</version>
    <url type="readme">https://github.com/chennes/FreeCAD-themes/blob/main/Unicorn%20Sparkles%20Theme/Readme.md</url>
    <icon>sparkles.svg</icon>
  </preferencepack>
</content>
</pre>

The existence of most <content> items implies a set of subfolders, one for each content item, named exactly as the given name of the item. So for the example above, the package's folder structure is:

<pre>
Package Directory/
  package.xml
  Unicorn Sparkles Theme/
    Unicorn Sparkles Theme.cfg
    sparkles.svg
    (the theme's other files)
</pre>

In addition to the other elements of <package>, content items can optionally provide information in <icon>, <classname>, and <file> tags (technically these can be provided to the root <package> tag as well, but they are generally unused there).

'''Backwards-compatibility note''': to avoid having to restructure packages that pre-date this metadata standard, the optional [[#.3Csubdirectory.3E|<subdirectory>]] tag is allowed to specify "./" as the subdirectory for a content item, in which case no subdirectory is required. This matches the pre-standard system where a single workbench was located at the top of the directory structure.

==== <icon> ====

REQUIRED for Workbenches

The path to an icon file. If it is an icon for the top-level package this path is relative to the package.xml file itself. If the icon is an element of a <content> item, then the path is relative to the content's folder. The Addon Manager will display the top-level icon as the icon for the overall package. If no top-level icon is present, the first specified workbench icon will be used as the package icon.

==== <subdirectory> ====

Optional.

Normally a content item is assumed to be located in a subdirectory with the same name as the item. In some cases, however, it is useful to explicitly specify the subdirectory. For example, many macros may be located within a single subdirectory, but each have their own entry in the package.xml file. It also provides backwards-compatibility support for packages that predate the package.xml file format specification, and do not follow the expected subdirectory structure. Often in these cases, a "<subdirectory>./</subdirectory>" is used to indicate that the item is not located in a subdirectory at all.

==== <classname> ====

REQUIRED for Workbenches

For workbenches, the name of the Python main entry class. This is the class that FreeCAD will try to load on startup to locate the workbench's icon, which should be set as a member variable of the class. For example, if your workbench defines the following class (usually in InitGui.py):

{{Code|code=
class MyNewWB:
    Icon = "resources/icon.svg"
}}

then the package.xml file expects:

<pre>
<classname>MyNewWB</classname>
</pre>

==== <file> ====

Optional

Provided for convenience to other tools, any number of other files may be listed here. Their use depends on the type of content. In a macro content item, each file entry is a single macro, and will be linked into the user's Macros installation directory by the [[Std_AddonMgr|Addon Manager]].

=== <url> ===

Multiple allowed: "repository" is required, and "readme"-type is highly recommended.

A Uniform Resource Locator for the package's website, bug tracker, source repository, zip download link, readme file, or documentation (as specified by the "type" attribute, see below). 

When specifying the "readme" type, a direct link to a rendered version of the README should be provided. For example, on GitHub, this is a "blob"-type link such as "https://github.com/FreeCAD/FreeCAD-addons/blob/master/README.md", or on a GitLab instance, "https://gitlab.com/opensimproject/cfdof/-/blob/master/README.md" (note the slightly different URL format between the two).

It is a good idea to include <url> tags pointing users to your package's online resources. The website is commonly a wiki page on wiki.freecad.org where users can find and update information about the package, for example. The Addon Manager lists these URLs and provides clickable links to them in the package description.

==== Attributes ====

* type="TYPE" (required): The type should be one of the following identifiers: "website", "bugtracker", "repository", "readme", "documentation", or "discussion".
* branch="BRANCH" (required for type="repository"): The name of the branch to check out to obtain this package. Typically the name of your main development branch. May also specify any other type of git reference, e.g. a tag or specific commit.

=== <author> ===

Multiple allowed

The name of a person who is an author of the package, as acknowledgement of their work and for questions.

==== Attributes ====

* email="name@domain.tld" (optional): Email address of author.

=== <depend> ===

Multiple allowed, at least one required for bundles.

Declares a dependency on another FreeCAD Addon or internal workbench, or Python package. The named dependency is first checked against the list of known Addons (e.g. those available either from the official FreeCAD Addons git repository, or those in a custom user-specified repository). The check is against the canonical name of the Addon. If a package.xml file is present for that Addon, the name is that package's <name> element. An exact match is required. If no match is found it is checked against the list of known internal workbenches (both installed and uninstalled). Finally, if the named dependency has not been located in the previous two steps it is assumed to be a Python package dependency. Note that not all dependency-related features are fully implemented yet.

A "bundle" content item ({{Version|1.1}}) is expected to contain multiple "depends" lines, one for each external addon being "bundled". Note that the bundling is not literal, in the sense that the bundle is not expected to actually contain the source code of the dependency, but only to declare that it must be installed by the Addon Manager as part of installing the bundle.

==== Attributes ====

All dependencies and relationships may restrict their applicability to particular versions. For each comparison operator an attribute can be used. Two of these attributes can be used together to describe a version range.

* version_lt="VERSION" (optional): The dependency to the package is restricted to versions less than the stated version number.
* version_lte="VERSION" (optional): The dependency to the package is restricted to versions less or equal than the stated version number.
* version_eq="VERSION" (optional): The dependency to the package is restricted to a version equal than the stated version number.
* version_gte="VERSION" (optional): The dependency to the package is restricted to versions greater or equal than the stated version number.
* version_gt="VERSION" (optional): The dependency to the package is restricted to versions greater than the stated version number.
* optional="true|false": If "optional" is "true", then the dependency is treated as optional when the Addon is installed using the Addon Manager. In general this means that a failure to install the dependency does not prevent the Addon from installing, and the user may be prompted about whether they want to install it. Versions of FreeCAD prior to 0.21 do not recognize this attribute and will ignore it.
* type="automatic|addon|internal|python": Optional, defaults to "automatic". Indicates what this dependency statement refers to. "addon" is for external addons, "internal" is for internal workbenches (e.g. "arch", "sketcher", etc.), and "python" indicates a Python package dependency. Versions of FreeCAD prior to 0.21 do not use this attribute, and "automatic" is always assumed.

=== <conflict> ===

Multiple allowed

Declares a package name with which this package conflicts. This package and the conflicting package should not be installed at the same time.

==== Attributes ====

See <depend>.

=== <replace> ===

Multiple allowed

Declares a package name that this package is intended to replace.

==== Attributes ====

See <depend>.

=== <tag> ===

A simple text tag used for categorization when using a package manager. Multiple <tag> elements may be specified.

=== <freecadmin> ===

The minimum version of FreeCAD required to use this package/element, as a semantic version 2.0 string in the format MAJOR.MINOR.BUILD. This tag may be used to specify that a particular branch of this addon should only be shown to users of a specific FreeCAD version (or later). It may be combined with {{incode|<freecadmax>}} to set a specific valid range.

=== <freecadmax> ===

The maximum version of FreeCAD required to use package/element, as a semantic version 2.0 string in the format MAJOR.MINOR.BUILD. This tag may be used to specify that a particular branch of this addon should only be shown to users of a specific FreeCAD version (or earlier). It may be combined with {{incode|<freecadmin>}} to set a specific valid range. Note that it is an exact version string, so to indicate that the addon supports an entire minor release, the "patch" component should be chosen to be a suitably large number (e.g. "1.0.99" to support the entire 1.0.x release series).

=== <pythonmin> ===

(New in FreeCAD 0.21, ignored by previous versions.) The minimum version of Python required to use package/element, as a semantic version 2.0 string in the format MAJOR.MINOR. The Addon Manager will not permit an Addon to be installed on a system running a version of Python before this one. Only Python 3.x versions are supported. Although you may specify a three-component version, only the minor number is considered during the compatibility check.

== Validation ==

To validate your package.xml file you can enable "developer mode" in the Addon Manager: create a boolean variable called "developerMode" in the "Addons" parameter group and set it to True: {{MenuCommand|Tools → Edit parameters... → BaseApp → Preferences → Addons → developerMode}}. When the Addon Manager has finished reading the Addons database it will examine all available package.xml files for errors.

== Quick guide ==

For a quick guide on how to create a basic package.xml file and add a workbench to the [[Std_AddonMgr|Addon Manager]] see: [[Add_Workbench_to_Addon_Manager|Add Workbench to Addon Manager]].

== Examples ==

Note that comments (the text between {{incode|&lt;&#33;--}} and {{incode|--&gt;}}) are ignored by the XML parser, and are not a required part of the file format. They are provided here for information purposes and may be omitted from the final package.xml if desired.

A simple workbench-only package (for example, to add a metadata file to a package that predates this metadata format):

<pre>
<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<package format="1" xmlns="https://wiki.freecad.org/Package_Metadata">
  <name>Legacy Workbench</name> <!-- What the Addon Manager displays to users -->
  <description>Text that the Addon Manager shows for the Addon. Any length, but remember that Addon Manager's compact view only shows the first sentence or so.</description>
  <version>1.0.1</version> <!-- Semantic versioning (1.2.3-beta) or CalVer-based, (2022.01.07), don't omit or non-git installations won't see your updates -->
  <date>2022-01-07</date> <!-- Date of the last update to the version number -->
  <maintainer email="your_address@null.com">Your Name</maintainer>
  <license file="LICENSE">LGPL-2.1-or-later</license> <!-- Make sure you actually have this file in your Addon repo if the license requires it -->
  <url type="repository" branch="main">https://github.com/chennes/FreeCAD-Package</url> <!-- Don't forget to update the branch name here -->
  <url type="readme">https://github.com/chennes/FreeCAD-Package/blob/main/README.md</url> <!-- Link to the HTML-rendered README page -->
  <icon>Resources/icons/PackageIcon.svg</icon> <!-- If you include your icon here, you don't have to submit it to the main FreeCAD repo -->

  <content>
    <workbench>
      <classname>MyLegacyWorkbench</classname> <!-- Must match class name in InitGui.py -->
      <subdirectory>./</subdirectory>
    </workbench>
  </content>

</package>
</pre>

A complex, multi-component package:

<pre>
<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<package format="1" xmlns="https://wiki.freecad.org/Package_Metadata">
  <name>Example Package Format</name>
  <description>An example of the package.xml file format</description>
  <version>2022.01</version>
  <date>2022-01-07</date>
  <maintainer email="no-one@freecad.org">No Maintainer</maintainer>
  <license file="LICENSE">GPL-3.0-or-later</license>
  <url type="repository" branch="main">https://github.com/chennes/FreeCAD-Package</url>
  <icon>PackageIcon.svg</icon>

  <content>
    <preferencepack>
      <name>FreeCAD Classic Colors</name>
      <description>FreeCAD default colors for core app and included Mods.</description>
      <version>1.0.0</version>
      <tag>color</tag>
      <tag>stylesheet</tag>
    </preferencepack>
    <workbench>
      <name>Metadata Creation Workbench</name>
      <description>A set of tools to assist in creation of package.xml metadata files</description>
      <classname>MetadataCreationWorkbench</classname>
      <subdirectory>MCW</subdirectory>
      <icon>Resources/mcw.svg</icon>
      <tag>developers</tag>
      <version>0.9.0-alpha</version>
    </workbench>
    <macro>
      <name>Problem Solver 9000</name>
      <description>Deletes all emails in your inbox</description>
      <subdirectory>./</subdirectory>
      <file>PS9000.FCMacro</file>
    </macro>
  </content>

</package>

</pre>

A package with dependencies:

<pre>
<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<package format="1" xmlns="https://wiki.freecad.org/Package_Metadata">
  <name>Example with Dependencies</name>
  <description>An example of the package.xml file format</description>
  <version>1.0.1-beta3</version>
  <date>2022-01-07</date>
  <maintainer email="no-one@freecad.org">No Maintainer</maintainer>
  <license file="LICENSE">GPL-3.0-or-later</license>
  <url type="repository" branch="main">https://github.com/chennes/FreeCAD-Package</url>
  <icon>PackageIcon.svg</icon>

  <content>
    <workbench>
      <name>Metadata Creation Workbench</name>
      <description>A set of tools to assist in creation of package.xml metadata files</description>
      <classname>MetadataCreationWorkbench</classname>
      <subdirectory>MCW</subdirectory>
      <icon>Resources/mcw.svg</icon>
      <tag>developers</tag>

      <depend>FEM</depend>
      <depend version_gte="0.3.0">Curves workbench</depend>
      <depend version_gte="3.3" version_lt="4">Steel column</depend>

      <!-- As of FreeCAD 0.21, additional information may be provided about dependencies -->
      <depend optional="true" type="python">markdown</depend>
      <depend type="addon">TabBar</depend>

      <!-- If this package is installed, the Addon Manager may warn the user to remove it -->
      <replace>Metadata Creation Workbench Beta</replace>

      <!-- An unresolvable conflict to prevent installation on, e.g. a specific build -->
      <conflict condition="$BuildRevision==24267">Do not use with build 24267</conflict> 

      <!-- Python package dependencies (no support for version information) -->
      <depend>matplotlib</depend>
      <depend>some_other_package</depend> <!-- Assumed to be a Python dependency because it's unrecognized -->
    </workbench>
  </content>

</package>

</pre>


{{Powerdocnavi{{#translation:}}}}
[[Category:Developer Documentation{{#translation:}}]]