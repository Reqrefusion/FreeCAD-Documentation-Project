<languages/>

{{Docnav/de
|[[License/de|Lizenz]]
|[[Compile_on_Linux/de|Kompilieren unter Linux]]
}}

{{TOCright}}

Diese Seite erklärt Schritt für Schritt, '''wie man FreeCAD 0.19 oder neuer unter Windows kompiliert''' unter Verwendung von Microsofts MSVC-Kompiler. Für Informationen über die Verwendung von MSYS2/MinGW, siehe [[Compile_on_MinGW/de|Auf MinGW kompilieren]]. Für andere Plattformen siehe [[Compiling/de|Kompilieren]].

<span id="Prerequisites"></span>
== Voraussetzungen ==

Kompilieren von FreeCAD unter Windows erfordert einige Werkzeuge und Bibliotheken.

<span id="Required"></span>
===Erforderlich===

* Ein Compiler. FreeCAD wurde mit Visual Studio (MSVC) getestet - andere Compiler können funktionieren, aber eine Anleitung zur Verwendung ist hier nicht enthalten. Für weitere Details siehe Abschnitt [[#Compiler|Compiler]], unten.

* [http://git-scm.com/ Git] (Es gibt auch für Git verfügbare GUI Frontends, siehe den nächsten Abschnitt.)

* [https://cmake.org/download/ CMake] Version 3.11.x oder neuer.</br> ''Tipp:'' Wenn du bei der Installation von CMake die Option ''CMake zum System PFAD für alle Benutzer hinzufügen'' wählst, ist CMake von der Windows Eingabeaufforderung aus zugänglich, was nützlich sein kann.

*  Das [https://github.com/FreeCAD/FreeCAD-LibPack LibPack]. Dies ist ein einzelnes Paket, das alle Bibliotheken enthält, die notwendig sind, um FreeCAD unter Windows zu kompilieren.
Lade die Version von LibPack herunter, die zur FreeCAD-Version passt, die du kompilieren möchtest. Um FreeCAD 0.20 zu kompilieren, lade [https://github.com/FreeCAD/FreeCAD-LibPack/releases/tag/2.6 LibPack version 2.6] herunter, für FreeCAD 0.19 lade [https://github.com/FreeCAD/FreeCAD-LibPack/releases/tag/1.0 LibPack version 1.0]. Entpacke LibPack an einem geeigneten Ort. (Wenn dein Computer die Erweiterung .7z nicht erkennt, musst du das Programm [https://www.7-zip.org 7-zip] installieren.) </br> '''Hinweis''': Es wird dringend empfohlen, FreeCAD mit der Compiler-Version zu kompilieren, für die das LibPack vorgesehen ist. Du könntest bspw. Probleme bekommen, FreeCAD 0.20 mit MSVC&nbsp;2017 zu kompilieren, weil das LibPack für den Aufbau mit MSVC&nbsp;2019 oder neuer vorgesehen ist.</br>Um das LibPack später zu aktualisieren, siehe den Abschnitt [[#Updating_the_LibPack|Updating the LibPack]].

<span id="Optional_programs"></span>
===Optionale Programme===

* Ein GUI-Frontend für Git. Es stehen mehrere Frontends zur Verfügung, siehe [https://git-scm.com/downloads/guis diese Liste]. Der Hauptvorteil eines Frontends besteht darin, dass die Git-Befehle nicht erlernt werden müssen, um den Quellcode von FreeCAD zu erhalten oder Patches an das GitHub-Repository von FreeCAD zu senden.

Im Folgenden beschreiben wir die Handhabung des Quellcodes über das [https://tortoisegit.org/ TortoiseGit] Frontend. Dieses Frontend integriert sich direkt in den Windows Dateiexplorer und verfügt über eine große Benutzer Gemeinschaft, um  Hilfe bei Problemen zu erhalten.

* [http://sourceforge.net/projects/nsis/ NSIS] wird verwendet, um das FreeCAD Windows Installationsprogramm zu generieren.

<span id="Source_code"></span>
=== Quellcode ===

Jetzt kannst Du den Quellcode von FreeCAD bekommen:

<span id="Using_a_frontend"></span>
====Verwendung eines Frontend====

Bei Verwendung des [https://git-scm.com/downloads/guis Git-Frontends]

TortoiseGit:
# Einen neuen Ordner erstellen, in den der Quellcode heruntergeladen werden soll.
# Diesen Ordner mit der rechten Maustaste im Windows-Datei-Browser anklicken und '''Git Clone''' im Kontextmenü auswählen.
# Ein Dialogfenster wird geöffnet.
# Darin die Internetadresse für das FreeCAD-Git-Repository eingeben:<br>''https://github.com/FreeCAD/FreeCAD.git''
# '''OK''' anklicken.

Der neueste Quellcode wird aus dem FreeCAD Git Repositorium heruntergeladen und der Ordner wird von Git verfolgt.

<span id="Using_the_command_line"></span>
====Verwendung der Kommandozeile====

Um einen lokalen Trackingzweig zu erstellen und den Quellcode herunterzuladen, öffne ein Terminal (Eingabeaufforderung) und wechsle dort in das Verzeichnis, in dem die Quelle gespeichert werden soll, und gib dann ein:

{{Code|code=
git clone --recurse-submodules https://github.com/FreeCAD/FreeCAD.git
}}

<span id="Compiler"></span>
===Kompilierer===

Der Standard Compiler (empfohlen) ist MS Visual Studio (MSVC). Die Verwendung anderer Compiler, z. B. gcc über Cygwin oder MinGW, ist zwar möglich, wird hier aber nicht getestet oder behandelt.

Du kannst eine kostenlose Version von MSVC (für den persönlichen Gebrauch) erhalten, indem Du die [https://visualstudio.microsoft.com/vs/community/ ''Gemeinschafts'' Edition von MS Visual Studio] herunterlädst.

Für diejenigen, die die Installation des riesigen MSVC für den reinen Zweck, einen Compiler zu haben, vermeiden wollen, siehe [[CompileOnWindows - Reducing Disk Footprint]].

'''Hinweis:''' Obwohl die ''Gemeinschafts''ausgabe von MSVC kostenlos ist, musst du ein Microsoft Konto erstellen, um die IDE länger als eine 30-tägige Testphase zu verwenden. Wenn du nur über die Kommandozeile kompilieren willst, brauchst du die IDE nicht und somit auch kein Microsoft Konto.

Als freie und OpenSource alternative IDE kannst du [https://www.kdevelop.org/download KDevelop] verwenden. Du kannst KDevelop zum Ändern und Schreiben von C++ Code verwenden, musst aber die Kommandozeile zum Kompilieren verwenden.

<span id="Optional_system_path_configuration"></span>
===Optionale Systempfad Konfiguration===

Optional können die Pfade zu einigen Ordnern in die Systemvariable PATH aufgenommen werden. Dies ist hilfreich, wenn du über die Befehlszeile/Powershell auf Programme in diesen Ordnern zugreifen möchtest oder wenn du möchtest, dass spezielle Programme vom Compiler oder CMake gefunden werden. Außerdem kann es notwendig sein, Ordner zum PATH hinzuzufügen, wenn du bei der Installation des Programms nicht die entsprechenden Optionen verwendet hast.

* Du kannst den Ordner deines LibPacks in die PATH-Variable deines Systems  aufnehmen. Dies ist nützlich, wenn du vorhast, mehrere Konfigurationen/Versionen von FreeCAD zu erstellen.
* Wenn du die Option zum Hinzufügen von CMake zur PATH-Variable während der Installation nicht verwendet hast, füge seinen Installationsordner zur PATH-Variable hinzu:<br>''C:\Program Files\CMake\bin''
* Wenn du die Option zum Hinzufügen von TortoiseGit zur PATH-Variable während der Installation nicht verwendet hast, füge seinen Installationsordner zur PATH-Variable hinzu:<br>''C:\Program Files\TortoiseGit\bin''

Um der PATH Variablen Ordnerpfade hinzuzufügen:
# Klicke im Windows-Startmenü mit der rechten Maustaste auf ''Computer'' und wähle ''Eigenschaften''.
# Klicke im erscheinenden Dialog auf ''Erweiterte Systemeinstellungen''.
# Es öffnet sich ein weiterer Dialog. Klicke dort in der Registerkarte ''Erweitert'' auf '''Umgebungsvariablen'''.
# Wieder öffnet sich ein weiterer Dialog. Wähle dann die Variable ''Pfad'' und klicke auf '''Bearbeiten'''.
# Und wieder öffnet sich ein weiterer Dialog. Klicke dort auf '''New'''' und füge zum PATH zum Ordner von Git oder dem LibPack hinzu.
# Abschließend drücke '''OK''' und schließe alle Dialoge, indem Du ebenfalls '''OK'''' drückst.

<span id="Configuration"></span>
== Konfiguration ==

Sobald du alle notwendigen Werkzeuge, Bibliotheken und den FreeCAD-Quellcode hast, bist du bereit für die Konfiguration und den Kompilierungsprozess. Dieser Prozess durchläuft fünf Schritte:
# Führe CMake einmal aus, um dein System zu untersuchen und den Konfigurationsprozess zu beginnen (dieser wird melden, dass er fehlgeschlagen ist).
# Passe die notwendigen CMake-Einstellungen an, um die Position des LibPack zu setzen und Qt5 zu aktivieren.
# Starte CMake erneut, um die Konfiguration zu finalisieren (dieses Mal sollte es ohne Fehler durchlaufen).
# Benutze CMake, um das Visual Studio Build System zu generieren.
# Benutze Visual Studio, um FreeCAD zu kompilieren.

===CMake===

Konfiguriere zunächst die Bauumgebung mit CMake:
# Öffne das CMake GUI.
# Gib den Quellordner von FreeCAD an.
# Gib einen Bauordner an. Dies kann '''build''' in dem Verzeichnis sein, der aus dem das repo geklont wurde, da dieser Pfad von git ignoriert wird. Verwende nicht den Quellordner. CMake erstellt diesen Ordner, wenn er nicht existiert.
# Klicke auf '''Konfigurieren'''.
# In dem erscheinenden Dialog gib den gewünschten Generator an: In den meisten Fällen wirst du die Voreinstellungen in diesem Dialogfeld verwenden. Für das standardmäßige MS Visual Studio verwende ''Visual Studio xx 2yyy'', wobei xx die Compiler Version und 2yyy das Jahr der Veröffentlichung ist. Es wird empfohlen, die Standardoption ''Use default native compilers'' zu verwenden.

'''Hinweis:''' Es ist wichtig, die richtige Bitvariante anzugeben. Wenn du die 64-bit Variante von LibPack hast, musst du auch den x64 Compiler verwenden.

Dies wird die Konfiguration beginnen und ''wird fehlschlagen'' wegen fehlender Einstellungen. Dies ist normal, du hast den Speicherort des LibPack noch nicht angegeben. Es können jedoch auch andere Fehler auftreten, die weitere Maßnahmen deinerseits erfordern.

Wenn es mit der Meldung fehlschlägt, dass Visual Studio nicht gefunden werden konnte, ist die CMake Unterstützung in MSVC noch nicht installiert. Um das zu tun:
# Öffne die MSVC IDE.
# Verwende das Menü Werkzeuge → Werkzeuge und Funktionen erhalten
# Aktiviere im Reiter ''Arbeitsauslastungen'' die ''Desktop Entwicklung mit C++''.
# Auf der rechten Seite solltest Du nun sehen, dass die Komponente ''Visual C++ Werkzeuge für CMake'' installiert wird.
# Installiere es.

Wenn es keinen Fehler zu Visual Studio oder Python gibt, ist alles in Ordnung, aber CMake kennt noch nicht alle notwendigen Einstellungen. Deshalb jetzt:
# In CMake nach der Variable '''FREECAD_LIBPACK_DIR''' suchen und den Ort des LibPack Ordners angeben, der zuvor heruntergeladen wurde. Dafür Forward-Slashes "/" verwenden. Backslashes "\" führen dazu, dass CMake fehlschlägt.
#  (''Nur beim Kompilieren von FreeCAD 0.19'') Suche nach der Variable '''BUILD_QT5''' und aktiviere diese Option.
# Erneut '''Konfigurieren''' anklicken.
# (''Soll direkt aus dem Build-Verzeichnis heraus ausgeführt werden wie beir Fehlersuche'') Suche nach den folgenden Optionen und aktiviere sie:
#* '''FREECAD_COPY_DEPEND_DIRS_TO_BUILD'''
#* '''FREECAD_COPY_LIBPACK_BIN_TO_BUILD'''
#* '''FREECAD_COPY_PLUGINS_BIN_TO_BUILD'''
# Klicke erneut auf '''Configure'''.

Es sollten nun keine Fehler mehr auftreten. Wenn du weiterhin auf Fehler stößt, die du nicht diagnostizieren kannst, besuche das [https://forum.freecad.org/viewforum.php?f=4 Install/Compile forum] auf der FreeCAD Forum Webseite. Wenn CMake korrekt vorgegangen ist, klicke auf '''Generieren'''.  Nachdem dies geschehen ist, kannst du CMake schließen und die Kompilierung von FreeCAD mit Visual Studio starten. Lasse es jedoch für die erste Kompilierung geöffnet, falls du einige Optionen für den Bauprozess ändern willst oder musst.

<span id="Options_for_the_build_process"></span>
=== Optionen für den Bauprozess ===

Das CMake Bau System gibt dir die Kontrolle über einige Aspekte des Bauprozesses. Insbesondere kannst du einige Funktionen oder Module mit CMake Variablen ein- und ausschalten.

Hier ist eine Beschreibung einiger dieser Variablen:

{| class="wikitable" style="text-align:left"
|-
! Variablenname       !! Beschreibung  !! Vorgabewert
|-
| BUILD_XXX
|| FreeCAD mit der Komponente XXX erstellt. Falls z.B. der Arbeitsbereich ''OpenSCAD'' nicht gebraucht wird, kann man die Variable ''BUILD_OPENSCAD'' deaktivieren. FreeCAD wird diesen Arbeitsbereich dann nicht enthalten.
'''Hinweis:''' Einige Komponenten werden für andere Komponenten benötigt. Ist z.B. ''BUILD_ROBOT'' deaktiviert, wird CMake darüber informieren, dass die Komponente ''Path'' nicht korrekt kompiliert werden kann. Daher sollte die Ausgabe von CMake nach dem Ändern einer BUILD_XXX-Option geprüft werden!
|| Auswahlabhängig
|-               
| BUILD_ENABLE_CXX_STD
|| Die Version des C++-Sprachstandards. '''C++14''' ist der höchstmögliche für FreeCAD 0.19, während wenigstens '''C++17''' für FreeCAD 0.20 erforderlich ist. Siehe auch den Hinweis im Abschnitt [[#Bau mit Visual Studio 15 (2017) oder neuer]]
|| Auswahlabhängig
|-
| BUILD_DESIGNER_PLUGIN
|| Zum Bau des Qt Designer-Plugins, siehe [[#Qt_Designer_Zusatzprogramm|diesen folgenden Abschnitt]]
|| OFF
|-
| BUILD_FLAT_MESH
|| Wird benötigt für einen Bau, der die Funktion [[MeshPart_CreateFlatMesh/de|EbenesNetzErstellen]] enthält
|| OFF
|-             
| CMAKE_INSTALL_PREFIX
|| Das Ausgabeverzeichnis bei der Erstellung des Ziels ''INSTALL'', siehe auch den Abschnitt [[#Ausführen_und_Installieren_von_FreeCAD]]
|| Windows Standard-Programminstallationsverzeichnis
|-               
| FREECAD_COPY_DEPEND_DIRS_TO_BUILD
|| Kopiert abhängige Bibliotheken in den Build-Ordner, die zur Ausführung von FreeCAD.exe benötigt werden. Siehe auch den Abschnitt [[#Ausführen_und_Installieren_von_FreeCAD]].</br> '''Hinweis:''' Die Optionen FREECAD_COPY_XXX erscheinen nur, falls die Bibliotheken nicht bereits kopiert wurden. Wird nur ein Upgrade bzw. Wechsel auf eine andere LibPack-Version benötigt,  siehe den Abschnitt[[#LibPack aktualisieren|LibPack aktualisieren]]. Soll zu den Optionen zurückgekehrt werden, müssen alle Verzeichnisse im Build-Ordner gelöscht werden, außer dem LibPack-Verzeichnis. In CMake den Cache löschen und so starten, als würde man zum ersten Mal kompilieren.
|| OFF
|-               
| FREECAD_COPY_LIBPACK_BIN_TO_BUILD
|| Kopiert LibPack-Binaries in den Build-Ordner, die zur Ausführung von FreeCAD.exe benötigt werden. Siehe auch Abschnitt [[#Ausführen_und_Installieren_von_FreeCAD]]
|| OFF
|-               
| FREECAD_COPY_PLUGINS_BIN_TO_BUILD
|| Kopiert Qt-Plugin-Dateien in den Build-Ordner, die zur Ausführung von FreeCAD.exe benötigt werden. Siehe auch Abschnitt [[#Ausführen_und_Installieren_von_FreeCAD]]
|| OFF
|-               
| FREECAD_LIBPACK_USE
|| Schaltet die Verwendung von FreeCAD LibPack ein bzw. aus (ON/OFF)
|| ON
|-               
| FREECAD_LIBPACK_DIR
|| Verzeichnis, in dem sich LibPack befindet
|| FreeCADs Quellcodeverzeichnis
|-               
| FREECAD_RELEASE_PDB 
|| Debug-Bibliotheken auch für Freigabe-Versionen erstellen. Dies hat keinen Einfluss auf die Geschwindigkeit (wie es ein echter Debug-Build hätte) und kann sehr nützlich sein, bei der Ermittlung von Absturzstellen im FreeCAD-Code. Sollte FreeCAD abstürzen, wird eine Datei ''crash.dmp'' erstellt, die mit MSVC geladen werden kann und wenn die zugehörigen PDB-Dateien vorhanden sind sowie der Quellcode jener Version, kann man mit diesem Code debuggen. Ohne diese PDB-Dateien ist es nicht möglich den Code zu debuggen und alles was der Debugger anzeigt, ist der Name der DLL in der der Absturz auftrat.
|| ON
|-
| FREECAD_USE_MP_COMPILE_FLAG
|| Fügt die /MP-Opzion (Multiprocessor-Option) zu Visual Studio-Projekten hinzu, und ermöglicht so eine Beschleunigung auf Mehr-Kern-CPUs. Dies kann den Bau auf modernen Prozessoren wesentlich beschleunigen.</br>'''Hinweis:''' Wird '''FREECAD_USE_PCH''' ausgeschaltet, kann das Kompilieren schnell den Zusatzdatenspeicher überladen, auch wenn 16 GB RAM vorhanden sind.
|| ON
|-
| FREECAD_USE_PCH
|| Header vorkompilieren (siehe [https://en.wikipedia.org/wiki/Precompiled_header Precompiles the headers] (engl.)), um Kompilierungszeit zu sparen.
|| ON
|-
| FREECAD_USE_PYBIND11
|| Schließt die Bibliothek [https://github.com/pybind/pybind11 PyBind11] ein. Wird benötigt für einen Build, der die Funktion [[MeshPart_CreateFlatMesh/de|CreateFlatMesh feature]] enthält zu erhalten.</br>'''Hinweis:''' Nach dem Aktivieren kann man eine Konfigurationsfehlermeldung erhalten. Eifach erneut konfigurieren, und das Problem sollte gelöst sein.
|| OFF
|}

<span id="Building_FreeCAD"></span>
== FreeCAD bauen ==

Abhängig vom Compiler wird der Prozess zur Erstellung von FreeCAD etwas anders ablaufen. In den folgenden Abschnitten werden die bekannten Arbeitsabläufe beschrieben.
Wird mit Qt Creator gebaut, geht es mit [[#Bau mit Qt Creator (veraltet)|Bau mit Qt Creator (veraltet)]] weiter, ansonsten direkt hier:

<span id="Building_from_cmd.exe_command_line"></span>
=== Bauen in der cmd.exe Kommandozeile ===

CMake gibt am Ende des Konfigurationsdurchlaufs das Kommando an, mit welchem über die Kommandozeile gebaut werden kann (Abhängig vom eingestellten Releaseverzeichnis). Dieses Kommando erstellt allerdings eine ''Debug'' Version, welche unter Windows nicht gebaut werden kann, da ein Numpy import Fehler passiert (bekannter Fehler, schwer zu beheben). Um dies zu umgehen an dieser Stelle die Option ''--config Release'' angeben, damit eine ''Release'' Version erzeugt wird:

{{Code|code=
cmake --build . --config Release
}}

Hinweis: ''CMAKE_BUILD_TYPE'' zui ändern hat hier keinen Effekt, nur die Option ist wirksam.

<div class="mw-collapsible mw-collapsed toccolours">

<span id="Building_with_Visual_Studio_15_(2017)_or_newer"></span>
===Bau mit Visual Studio 15 (2017) oder neuer===

<div class="mw-collapsible-content">

<span id="Release_Build"></span>
==== Bau freigeben ====

# Starte das Visual Studio IDE. Dies kann entweder durch Drücken der Schaltfläche ''Projekt öffnen'' in der CMake GUI oder durch Doppelklicken auf die Datei ''FreeCAD.sln'', die Du in Deinem Bauordner findest, geschehen.
# In der Werkzeugleiste der MSVC IDE versichere dich, dass du für die erste Kompilierung ''Release'' verwendest.
# Es gibt ein Fenster namens ''Solution Explorer''. Es listet alle möglichen Kompilierungsziele auf. 
Um eine vollständige Kompilierung zu starten, klicke mit der rechten Maustaste auf das Ziel '''ALL_BUILD''' und wählen dann '''Build'''.
Dies wird nun recht lange dauern.

Um ein einsatzbereites FreeCAD zu kompilieren, kompiliere das Ziel ''INSTALL'', siehe Abschnitt [[#Ausführen und Installieren von FreeCAD|Ausführen und Installieren von FreeCAD]].

Wenn Du keine Fehler bekommst, ist das erledigt. '''Herzlichen Glückwunsch!''' Du kannst MSVC beenden oder offen lassen.

'''Wichtig:''' Seit Visual Studio 17.4 kann die Code-Optimierung, die standardmäßig für das Ziel '''SketcherGui''' aktiviert ist, nicht verwendet werden. Wird sie dennoch eingesetzt, werden Randbedingungen für Winkel in Skizzen nicht richtig platziert. Um dies zu beheben: Ein Rechtsklick auf das Ziel im MSVC solution explorer und der letzte Eintrag '''Properties''' im Kontextmenü auswählen. Im Dialogfenster, das geöffnet wird, wechselt man zu C/C++ → Optimization und deaktiviert dort die Einstellung '''Optimization'''. Abschließend das Ziel '''ALL_BUILD''' erneut erstellen.

<span id="Debug_Build"></span>
==== Fehlersuch Bau ====

Zur Vorbereitung für einen Debug Build folgende Schritte durchführen:
# Den LibPack ''bind'' Ordner in den ''bin'' Ordner des FreeCAD Buildordner kopieren (vorhandene Dateien überschreiben).
# Den LibPack ''libd'' Ordner in den ''lib'' Ordner des FreeCAD Buildordner kopieren.

Jetzt kann kompiliert werden:
# Starte  die Visual Studio IDE. Dies kann entweder durch Drücken der Schaltfläche ''Öffne  Projekt'' in der CMake GUI geschehen oder durch Doppelklick auf die Datei ''FreeCAD.sln'', die du in deinem Bau Ordner findest.
# In der Werkzeugleiste der MSVC IDE versichere dich, dass du für die erste Kompilierung ''Debug'' verwendest.
# Es gibt ein Fenster namens ''Solution Explorer''. Es listet alle möglichen Kompilierziele auf. Um eine vollständige Kompilierung zu starten, klicke mit der rechten Maustaste auf das Ziel '''ALL_BUILD''' und wähle dann '''Build''' im Kontextmenü.
Dies wird nun recht lange dauern.

<div lang="en" dir="ltr" class="mw-content-ltr">
If there were no compilation errors, and if the '''FREECAD_COPY_*''' options mentioned in the [[#CMake|CMake Configuration step]] above were enabled, you can start the debug build:
# Right-click on the target '''FreeCADMain''' and then choose '''Set as Startup Project''' in the context menu.
# Finally click in the toolbar on the button with the green triangle named '''Local Windows Debugger'''.
</div>

Dies startet die Erstellung der Debug-Version von FreeCAD und du kannst die MSVC-IDE verwenden, um eine Fehlersuche durchzuführen.

==== Video Ressource ====
Ein englischsprachiges Tutorium das mit der Konfiguration in CMake Gui beginnt und mit dem `Build` Befehl in Visual Studio 16 2019 fortgesetzt wird, ist ungelistet auf YouTube unter [https://youtu.be/s4pHvlDOSZQ Tutorium: FreeCAD aus dem Quellcode unter Windows 10 bauen].
</div>
</div>
<div class="mw-collapsible mw-collapsed toccolours">

<span id="Building_with_Qt_Creator_(outdated)"></span>
=== Bau mit Qt Creator (veraltet) ===

<div class="mw-collapsible-content">

<span id="Installation_and_configuration_of_Qt_Creator"></span>
====Installation und Konfiguration des Qt Creators====

* Herunterladen und installieren [https://www.qt.io/offline-installers Qt Creator]
* Werkzeuge → Optionen → Texteditor → Registerkarte Verhalten:
** Dateikodierungen → Standard-Kodierungen:
** Gesetzt auf: '''ISO-8859-1 /...csISOLatin1'''' (Bestimmte Zeichen erzeugen Fehler/Warnungen mit Qt Creator, wenn sie auf UTF-8 gesetzt sind.  Das scheint es zu beheben.)
* Werkzeuge → Optionen → Bau & Lauf:
** CMake Registerkarte
*** Fülle das Feld Ausführung mit dem Pfad zu cmake.exe aus.
** Registerkarte Kits
*** Name: MSVC 2008
*** Compiler: Microsoft Visual C++ Compiler 9.0 (x86)
*** Debugger: Automatische Erkennung.....
*** Qt-Version: Keine
** Registerkarte Allgemein
*** Deaktiviere das Kontrollkästchen: Erstelle immer ein Projekt, bevor Du es einsetzt.
*** Deaktiviere das Kontrollkästchen: Stelle das Projekt immer vor der Ausführung bereit.

<span id="Import_project_and_building"></span>
====Projektimport und Bau====

* Datei → Datei oder Projekt öffnen
* Öffne '''CMakeLists.txt'''', das sich in der obersten Ebene der Quelle befindet.
* Dadurch wird CMake gestartet.
* Wähle das Build Verzeichnis und klicke auf Weiter.
* Setze den Generator auf '''NMake Generator (MSVC 2008)''''.
* Klicke auf CMake ausführen. Folge den oben dargestellten Anweisungen, um CMake nach Deinen Wünschen zu konfigurieren.

Jetzt kann FreeCAD erstellt werden.
* Bau → Baue alle
* Das wird lange dauern.....

Nach Fertigstellung kann es ausgeführt werden:
Unten links befinden sich 2 grüne Dreiecke.  Eine davon ist Fehlersuche.
Der andere wird ausgeführt.  Wähle, was immer du willst.
</div>
</div>
<div class="mw-collapsible mw-collapsed toccolours">

<span id="Command_line_build"></span>
===Kommandozeilen Bau===

<div class="mw-collapsible-content">

Die Schritte, wie man von der Kommandozeile aus kompiliert, hängen vom Compiler ab. Für MSVC 2017 sind die Schritte:
# Im Windows-Startmenü zu {{MenuCommand|Visual Studio 2017 → Visual Studio Tools}} wechseln und '''Developer Command Prompt for VS 2017''' auswählen.
# Wechsle in deinen Buildordner.
# Führe den Befehl aus

{{Code|code=msbuild ALL_BUILD.vcxproj /p:Configuration=Release}}

oder

{{Code|code=msbuild INSTALL.vcxproj /p:Configuration=Release}}

Diese Schritte können auch automatisiert werden. Hier ist zum Beispiel eine Lösung für MSVC 2017:
# Lade das Skript herunter [https://forum.freecad.org/download/file.php?id=92135 compile-FC.txt].
# Umbenennen in ''compile-FC.bat'''.
# Klicke im Datei-Explorer von Windows mit der rechten Maustaste auf Dein Build-Verzeichnis und benutze aus dem Kontextmenü ''Befehlszeile hier''.
# Führe den Befehl aus

{{Code|code=compile-FC install}}

Anstatt '''compile-FC''' mit der Option ''install'' aufzurufen, kannst Du auch ''debug'' oder ''release'' verwenden:

''debug'' &nbsp; - FreeCAD in Fehlersuchkonfiguration kompilieren

''release'' - kompiliere FreeCAD in der Veröffentlichungskonfiguration.

''install'' &nbsp;&nbsp;&nbsp; - kompiliert FreeCAD in der Freigabekonfiguration und erstellt ein Installationssetup.

</div>
</div>

<span id="Running_and_installing_FreeCAD"></span>
==Ausführen und Installieren von FreeCAD==

Es gibt 2 Methoden, um das kompilierte FreeCAD auszuführen:

Methode 1'': Du führst die FreeCAD.exe aus, die du in deinem Build Verzeichnis findest, im Unterverzeichnis ''bin'''.

''Methode 2'': Du baust das Ziel ''INSTALL''

Methode 2 ist die einfachere, da sie automatisch sicherstellt, dass sich alle für die Ausführung der FreeCAD.exe erforderlichen Bibliotheken im richtigen Ordner befinden. Die FreeCAD.exe und die Bibliotheken werden in dem Ordner ausgegeben, den du in der CMake-Variablen ''CMAKE_INSTALL_PREFIX'' angegeben hast.

Für Methode 1 müssen die Optionen '''FREECAD_COPY_*''' aktiviert werden, die oben in den [[#CMake|CMake]]-Konfigurationsschritten erwähnt wurden.

<span id="Troubleshooting"></span>
===Problembehebung===

Beim Start von FreeCAD können DLLs als fehlend erkannt werden. Die Fehlermeldung in der Konsole gibt keine Auskunft über den Namen der fehlenden DLL(s). Um diese Information zu bekommen muss ein externes tool verwendet werden:

* Download des aktuellen Releases von '''Dependencies''': https://github.com/lucasg/Dependencies/releases (Datei ''Dependencies_x64_Release.zip'')
* In der FreeCAD [[Python Konsole]] diese Kommandos ausführen:
 <nowiki>import os
os.system(r"~\DependenciesGui.exe")</nowiki>
'''Hinweis''': Bitte ''~\DependenciesGui.exe'' durch jenen Pfad ersetzen, wo die Datei ''DependenciesGui.exe'' gespeichert wurde.
* Ziehe nun per Drag'n'Drop die *.pyd Datei in das FreeCAD Fenster um eine Liste von fehlenden DLLs zu bekommen.

<span id="Updating_the_build"></span>
==Aktualisierung des Build==

FreeCAD ist sehr aktiv entwickelt. Daher ändert sich der Quellcode fast täglich. Neue Funktionen wurden hinzugefügt und Fehler behoben. Um von diesen Quellcode-Änderungen zu profitieren, musst Du Dein FreeCAD neu erstellen. Dies geschieht in zwei Schritten:
# Aktualisierung des Quellcodes
# Rekompilierung

<span id="Updating_the_source_code"></span>
===Aktualisierung des Quellcodes===

<span id="Using_a_frontend"></span>
====Verwendung eines Frontends====

Bei Verwendung des [https://en.wikipedia.org/wiki/Comparison_of_Git_GUIs Git-Frontends] TortoiseGit:
# Mit der rechten Maustaste auf den FreeCAD-Quellcodeordner im Windows-Datei-Explorer klicken und im Kontextmenü '''Pull''' auswählen.
# Es erscheint ein Dialogfeld. Darin den Entwicklungszweig auswählen, den man erhalten möchte. '''main'''' ist der Hauptzweig. Dieser sollte daher verwendet werden, es sei denn, es soll ein spezielles neues Feature aus einem Zweig kompiliert werden, der noch nicht mit ''main'' zusammengeführt wurde. (Für weitere Informationen über Git-Zweige siehe [[Source_code_management/de#Git_development_process|Git-Entwicklungsprozess]].)

Klicke abschließend auf ''OK'''.

<span id="Using_the_command_line"></span>
====Verwendung der Kommandozeile====

Öffne ein Terminal (Eingabeaufforderung) und wechsle dort in dein Quellverzeichnis. Dann tippe:

{{Code|code=
git pull https://github.com/FreeCAD/FreeCAD.git main
}}

wobei ''main'' der Name des Hauptentwicklungszweiges ist. Möchte man Code von einem anderen Zweig erhalten, wird dessen Namen anstelle von ''main'' verwendet.

<span id="Recompilation"></span>
===Rekompilierung===

# Öffne die MSVC-IDE, indem Du entweder auf die Datei ''FreeCAD.sln'' oder auf die Datei ''ALL_BUILD.vcxproj'' in Deinem Build-Verzeichnis doppelklickst.
# Fahre mit Schritt 2 aus dem Abschnitt [[#Building_with_Visual_Studio_15_.282017.29_or_newer|Building with Visual Studio 15 2017]] fort.

<span id="Updating_the_LibPack"></span>
==LibPack aktualisieren==

<div lang="en" dir="ltr" class="mw-content-ltr">
If a new major version of a third-party dependency like Open Cascade is released, or if a third-party dependency has important bug fixes, a new LibPack is released. You can find the latest version [https://github.com/FreeCAD/FreeCAD-LibPack/releases/ here].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
To update your LibPack the following recipe is best practice:
# Delete the ''bin'' folder in your build folder.
# Switch to your local LibPack folder and delete everything there.
# Extract the content of the new LibPack ZIP file into the existing, but now empty, local LibPack folder.
# Open CMake and there press the button '''Configure''' and then the button '''Generate'''. This recreates the ''bin'' folder you just deleted and also copies the new LibPack files into it.
# In CMake click the button '''Open Project''' and the MSVC IDE will open.
# In the MSVC IDE build the target ''INSTALL''.
</div>

<span id="Tools"></span>
==Werkzeuge==

Um an der FreeCAD Entwicklung teilzunehmen, solltest du die folgenden Werkzeuge kompilieren und installieren:

<span id="Qt_Designer_plugin"></span>
===Qt Designer Zusatzprogramm===

FreeCAD verwendet [https://en.wikipedia.org/wiki/Qt_(software) Qt] als Werkzeugsatz für seine Benutzeroberfläche. Alle Dialoge sind in UI-Dateien eingerichtet, die mit dem Programm [https://doc.qt.io/qt-5/qtdesigner-manual.html Qt Designer] bearbeitet werden können, das Teil jeder Qt Installation ist und auch im LibPack enthalten ist. FreeCAD hat seinen eigenen Satz von Qt Widgets, um spezielle Funktionen wie das Hinzufügen einer Einheit zu Eingabefeldern und das Setzen von Voreinstellungen zu ermöglichen.

<span id="Compilation"></span>
====Kompilierung====

Das Plugin kann nicht vom Qt Designer geladen werden, wenn es mit einer anderen Qt-Version kompiliert wurde, als der, auf der der aktuelle Qt Designer/Qt Creator basiert. Deshalb muss das Plugin mit FreeCAD zusammen kompiliert werden.

<div lang="en" dir="ltr" class="mw-content-ltr">
* In the CMake options (see [[Compile_on_Windows#Options_for_the_build_process|this section above]]) enable the option BUILD_DESIGNER_PLUGIN and reconfigure.
* open MSVC and build the target '''FreeCAD_widgets'''
</div>

Als Ergebnis erhält man die Plugin-Datei '''FreeCAD_widgets.dll'' im Ordner</br>''~\src\Tools\plugins\widget\Release''

<span id="Installation"></span>
====Einrichtung====

Um das Plugin zu installieren, wird die DLL wie folgt kopiert:
* Wird das LibPack verwendet, in den Ordner </br>''~\FreeCADLibs_2_8_x64_VC2019\plugins\designer''

* Ist eine vollständige Qt-Installation vorhanden, kann zwischen den Ordnern</br>''C:\Qt\Qt5.15.2\msvc2019_64\plugins\designer''</br>oder</br>''C:\Qt\Qt5.15.2\msvc2019_64\bin\designer'' ausgewählt werden (zuerst muss der Unterordner ''designer'' angelegt werden.)</br>(... und die Pfade an die Installation angepasst!).

Abschließend den Qt Designer (erneut) starten und sein Menü {{MenuCommand|Hilfe → Zusatzprogramme}} überprüfen. Wenn das Plugin '''FreeCAD_widgets.dll''' als geladen aufgeführt ist, können jetzt FreeCADs .ui-Dateien entworfen und geändert werden. Falls nicht, musst man die DLL selbst [[#Kompilierung|kompilieren]].

Soll lieber der [https://en.wikipedia.org/wiki/Qt_Creator Qt Creator] anstelle des Qt Designers verwenden werden, muss die Plugin-Datei in diesem Ordner abgelegt werden:</br>''C:\Qt\Qt5.15.2\Tools\QtCreator\bin\plugins\designer''</br>Dann den Qt Creator (erneut) Starten, in den Modus '''Design''' wechseln und dann das Menü {{MenuCommand|Werkzeuge → Formular Editor → Über Qt Designer Zusatzprogramme}} überprüfen. Wenn das Plugin '''FreeCAD_widgets.dll''' als geladen aufgeführt ist, können nun FreeCADs .ui-Dateien entworfen und geändert werden. Falls nicht, musst man die DLL selbst [[#Kompilierung|kompilieren]].

<span id="Thumbnail_Provider"></span>
====Miniaturansicht Anbieter===

FreeCAD hat die Funktion, Vorschau Miniaturbilder für *.FCStd Dateien bereitzustellen. Das bedeutet, dass im Windows Datei Explorer *.FCStd Dateien mit einem Bildschirmfoto des darin enthaltenen Modells angezeigt werden. Um diese Funktion anbieten zu können, muss FreeCAD die Datei '''FCStdThumbnail.dll''' unter Windows installiert haben.

<span id="Installation"></span>
====Einrichtung====

Die DLL wird auf diese Weise installiert:
# Lade [https://forum.freecad.org/download/file.php?id=13404 diese ZIP Datei] herunter und entpacke sie.
# Öffne eine Windows Befehlseingabeaufforderung mit Administratorrechten (diese Rechte sind eine Voraussetzung).
# Wechsle in den Ordner, in dem sich die DLL befindet.
# Führe diesen Befehl aus {{Code|code=regsvr32 FCStdThumbnail.dll}}

Prüfe also, ob es funktioniert, stelle sicher, dass in FreeCAD die Voreinstellungsoption '''[[Preferences_Editor/de#Dokument|Speichern der Miniaturansicht in Projektdatei beim speichern des Dokuments]]''' aktiviert ist und speichere ein Modell. Zeige dann im Windows Explorer den Ordner des gespeicherten Modells in einer Symbolansicht an. Du solltest nun ein Bildschirmfoto des Modells in der Ordneransicht sehen.

<span id="Compilation"></span>
====Kompilierung====

Zum Kompilieren von FCStdThumbnail.dll
# Wechsle zum FreeCAD-Quell-Code-Verzeichnis</br>''~\src\Tools\thumbs\ThumbnailProvider''
# Öffne die CMake-GUI
# Gibt dort als Quellverzeichnis das an, in dem du dich gerade befindest.
# Verwende den gleichen Ordner als build-Verzeichnis.
# Klicke '''Konfigurieren'''
# Gib im erscheinenden Dialog den Generator an, den du verwenden möchtest. Für den Standard MS Visual Studio benutze ''Visual Studio xx 2yyy'' wobei xx die Compiler-Version und 2yyy das Jahr ihrer Freigabe ist. Es wird empfohlen, die Vorgabeoption ''Use default native compilers'' zu verwenden.</br>'''Hinweis:''' Es ist wichtig, die richtige Bit-Variante anzugeben. Wenn du die 64-bit-Variante von LibPack hast, musst du auch den x64-Compiler verwenden.
# Klicke auf '''Generieren'''.
# Du sollte nun die Datei '''ALL_BUILD.vcxproj''' im Verzeichnis ''~\src\Tools\thumbs\ThumbnailProvider'' haben. Doppelklicke darauf und die MSVC-IDE wird sich öffnen.
# Stelle in der Werkzeugleiste der MSVC-IDE sicher, dass du das Kompilationsziel ''Release'' verwendest.
# Es gibt ein Fenster namens ''Solution Explorer''. Rechtklicke dort auf '''ALL_BUILD''' und wähle dann '''Build'''.
# Als Ergebnis solltest du nun eine Datei '''FCStdThumbnail.dll''' im Verzeichnis ''~\src\Tools\thumbs\ThumbnailProvider\release'' haben, die du wie oben beschrieben installieren kannst.

<span id="Compiling_Open_Cascade"></span>
==Open Cascade kompilieren==

Das LibPack kommt mit einer Version von [https://en.wikipedia.org/wiki/Open_Cascade Open Cascade], die für den allgemeinen Gebrauch geeignet ist. Unter bestimmten Umständen kann es jedoch wünschenswert sein, gegen eine alternative Version von Open Cascade zu kompilieren, wie z.B. eine der offiziellen Versionen oder einem gepatchten Zweig.

<div lang="en" dir="ltr" class="mw-content-ltr">
When compiling Open Cascade for FreeCAD note that there is no guarantee that FreeCAD will work with all versions of Open Cascade. Note also that when you are using the Netgen library, you must use the a NetGen version that it approved to compile with the Open Cascade version you like to compile.
</div>

Zum Kompilieren:
* Zuerst den Open Cascade-Quellcode beschaffen, entweder direkt von [https://github.com/Open-Cascade-SAS/OCCT Open Cascade's git repository] oder durch klonen des Zweiges eines dritten, wie z.B. [https://gitlab.com/blobfish/occt der "blobfish"-Zweig], der von dem Mitglied des  FreeCAD-Forums [https://forum.freecad.org/memberlist.php?mode=viewprofile&u=208 tanderson69] gepflegt wird.

* Dann die CMake-GUI öffnen, um das Build-System in einer ähnlichen Weise zu konfigurieren, wie den FreeCAD-Bau. Diese CMake-Optionen müssen gesetzt werden (oder explizit nicht gesetzt werden):
{| class="wikitable" style="text-align:left"
|-
! Variablenname       !! Beschreibung  !! Vorgabewert
|-
| 3RDPARTY_DIR
|| Der Pfad zu Drittanbieterkomponenten. Es wird empfohlen, den Ordner als Quellordner zu verwenden, der das LibPack enthält. Daher dieses Feld leer lassen.
|| leer
|-
| 3RDPARTY_DOXYGEN_EXECUTABLE
|| Der Pfad zu der ausführbaren Datei der Drittanbieterkomponente [https://en.wikipedia.org/wiki/Doxygen Doxygen]. Es wird empfohlen Doxygen zu installieren. CMake findet es dann automatisch.
|| leer
|-
| 3RDPARTY_FREETYPE_DIR
|| Der Pfad zu der benötigten Drittanbieterkomponente [https://en.wikipedia.org/wiki/FreeType Freetype]. Es wird empfohlen, den Ordner als Quellordner zu verwenden, der das LibPack enthält.
|| leer
|-
| 3RDPARTY_RAPIDJSON_DIR
|| Only available if '''USE_RAPIDJSON''' is used. Der Pfad zu der Drittanbieterkomponente [https://rapidjson.org/ RapidJSON]. Es wird empfohlen, den Ordner, der das LibPack enthält, NICHT als Quellordner zu verwenden. Man kann den RapidJSOn-Ordner eines LibPacks verwenden, aber er sollte in einen neuen Ordner kopiert werden und dieser als Quellordner verwendet werden.
|| leer
|-
| 3RDPARTY_TCL_DIR
|| Der Pfad zu der benötigten Drittanbieterkomponente [https://en.wikipedia.org/wiki/Tcl TCL]. Es wird empfohlen, den Ordner, der das LibPack enthält, NICHT als Quellordner zu verwenden. Man nimmt beispielsweise  eine [https://github.com/teclab-at/tcltk/releases dieser Veröffentlichungen], extrahiert sie und verwendet sie als Quellordner für CMake.
|| leer
|-
| 3RDPARTY_TK_DIR
|| Der Pfad zu der benötigten Drittanbieterkomponente [https://en.wikipedia.org/wiki/Tk_(software) TK]. Es wird empfohlen, den Ordner, der das LibPack enthält, NICHT als Quellordner zu verwenden. Man nimmt beispielsweise  eine [https://github.com/teclab-at/tcltk/releases dieser Veröffentlichungen], extrahiert sie und verwendet sie als Quellordner für CMake.
|| leer
|-
| 3RDPARTY_VTK_DIR|| Only available if '''USE_VTK''' is used. Der Pfad zu der necessary 3rdparty component [https://en.wikipedia.org/wiki/VTK VTK]. Es wird empfohlen, den Ordner als Quellordner zu verwenden, der das LibPack enthält. Wird ein anderer Ordner verwendet, sollte sichergestellt sein, dass nicht VTK 9.x oder neuer verwendet wird.
|| leer
|-
| BUILD_RELEASE_DISABLE_EXCEPTIONS
|| Deaktiviert das Error-Handling für Release-Builds. Fur FreeCAD muss es auf '''OFF''' gesetzt werden.
|| ON
|-
| INSTALL_DIR
|| Der Ausgabeordner, wenn das Ziel ''INSTALL'' erstellt wird. War die Erstellung erfolgreich, können Dateien aus diesem Ordner zum Aktualisieren des LibPacks verwendet werden.
|| Windows standardmäßiger Ordner zur Installation von Programmen
|-
| INSTALL_DIR_BIN
|| Der Ausgabe-Unterordner für die DLLs, wenn das Ziel ''INSTALL''' erstellt wird. Er muss zu '''bin''' geändert werden.
|| win64/vc14/bin
|-
| INSTALL_DIR_LIB|| Der Ausgabe-Unterordner für die .lib-Dateien, wenn  das Ziel ''INSTALL''' erstellt wird. Er muss zu '''lib''' geändert werden.
|| win64/vc14/lib
|-
| USE_RAPIDJSON|| Zum Kompilieren von Open Cascade mit Unterstützung für RapidJSON. Dies ist zwingend zu aktivieren, um Unterstützung für das Dateiformat [https://en.wikipedia.org/wiki/Gltf glTF] zu erhalten.
|| OFF
|-
| USE_VTK|| Zum Kompilieren von Open Cascade mit Unterstützung für VTK. Dies zu aktivieren ist optimal (optional?). Es kann zum Bau von Open Cascades VTK-Bridge verwendet werden.
|| OFF
|}

<div lang="en" dir="ltr" class="mw-content-ltr">
* Open the project in Visual Studio and first build the ALL_BUILD and then INSTALL targets in the '''Release''' mode.
* Repeat building the two targets in the '''Debug''' mode.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
To build FreeCAD using the self-compiled Open Cascade, you must do the following:
* Copy all folders from the INSTALL_DIR to your LibPack folder (overwrite the existing files)
* Switch to the LibPack folder and go there to the subfolder ''cmake''
* Open there the file ''OpenCASCADEDrawTargets.cmake'' with a text editor
* Search there for absolute paths to your LibPack folder and remove them. So e.g. the absolute path</br>''D:/FreeCADLibs_12.5.4_x64_VC17/lib/freetype.lib''</br>becomes just </br>''freetype.lib''</br>
* Do the same for the file ''OpenCASCADEVisualizationTargets.cmake''
</div>

<span id="Compiling_Netgen"></span>
==Netgen kompilieren==

<div lang="en" dir="ltr" class="mw-content-ltr">
The LibPack comes with a version of [https://ngsolve.org Netgen] that will was tested to be build with the Open Cascade version of the LibPack. The problem is that every new release of Netgen changes the API. Also every new release of Open Cascade does the same. Therefore one cannot just easily change the Netgen version.
</div>

Daher kann es sein, dass Netgen gebaut werden muss. Dies ist eine einfache Aufgabe:

<div lang="en" dir="ltr" class="mw-content-ltr">
* First obtain the Netgen source code, either directly from [https://github.com/NGSolve/netgen Netgen 's git repository].
* Then open the CMake GUI to configure the build system in a similar manner to building FreeCAD. These CMake options have to be set:
{| class="wikitable" style="text-align:left"
|-
! Variable name       !! Description  !! Default
|-
| CMAKE_INSTALL_PREFIX|| The output folder when building the target ''INSTALL''. If the build was successful, take the files from this folder to update your LibPack.
|| C:/netgen
|-
| OpenCasCade_DIR|| The path to the CMake files of Open Cascade. If you built Open Cascade as described in the section [[#Compiling_Open_Cascade|Compiling Open Cascade]] you can use the subfolder ''cmake'' of there folder you used as INSTALL_DIR. If not, use the subfolder ''cmake'' of your LibPack. Note hereby that the LibPack must then already contain a proper Open Cascade build. Independent what folder you use, you must now also create there a subfolder ''lib'' and copy in the files ''freetype.lib'' and ''freetyped.lib'' from your LibPack.
|| empty
|-
| USE_GUI|| set it to '''OFF'''
|| ON
|-
| USE_NATIVE_ARCH|| set it to '''OFF'''; this is only necessary important to support older CPU that don't have the [https://en.wikipedia.org/wiki/Advanced_Vector_Extensions AVX2] instruction set
|| ON
|-
| USE_OCC|| set it to '''ON'''
|| OFF
|-
| USE_PYTHON|| set it to '''OFF'''
|| ON
|-
| USE_SUPERBUILD|| set it to '''OFF'''
|| ON
|-
| ZLIB_INCLUDE_DIR|| The path to the necessary 3rdparty component [https://en.wikipedia.org/wiki/Zlib zlib]. It is recommended to use the folder as input where your used LibPack is.
|| empty
|-
| ZLIB_LIBRARY_DEBUG|| The path to the ZLib file ''zlibd.lib''. It is located in the subfolder ''lib'' of your LibPack folder.
|| empty
|-
| ZLIB_LIBRARY_RELEASE|| The path to the ZLib file ''zlib.lib''. It is located in the subfolder ''lib'' of your LibPack folder.
|| empty
|}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* Additionally you need to add a new CMake entry:
name: ''CMAKE_DEBUG_POSTFIX'', type: ''string'', content: '''_d'''</br>
This assures that he file names of the debug libraries get another name than the release libraries and can later not be accidentally exchanged.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* Press the ''Configure'' button in CMake to generate the *.cmake files.
* Only necessary if older CPU should be supported that don't have the AVX2 instruction set:
** Search your Netgen build folder for the file ''netgen-targets.cmake'' and open it with a text editor. Remove the setting '';/arch:AVX2'' in the Option INTERFACE_COMPILE_OPTIONS.
** Press the ''Configure'' button in CMake again.
* Press the ''Generate'' button in CMake.
* Open the project in Visual Studio and first build the ALL_BUILD and then INSTALL targets in the '''Release''' mode.
* Repeat building the two targets in the '''Debug''' mode.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
To build FreeCAD using the self-compiled Netgen, you must do the following:
* Copy all folders from the CMAKE_INSTALL_PREFIX to your LibPack folder (overwrite the existing files)
</div>

<span id="References"></span>
== Referenzen ==

Siehe auch
* [[Compiling_(Speeding_up)|Kompilieren - Beschleunigen]]


{{Docnav/de
|[[License/de|Lizenz]]
|[[Compile_on_Linux/de|Kompilieren unter Linux]]
}}

{{Userdocnavi{{#translation:}}}}
[[Category:Developer_Documentation{{#translation:}}]]
[[Category:Developer{{#translation:}}]]