<languages/>
{{Macro/de
|Name=Senkrecht zu Linienzug
|Icon=Macro_Perpendicular_To_Wire.png
|Description=Dieses Makro positioniert ein Objekt senkrecht zu einem ausgew√§hlten Linienzug.
|Author=Mario52
|Version=00.03
|Date=2020-03-31
|FCVersion=Alle
|Download=[https://wiki.freecad.org/images/0/0c/Macro_Perpendicular_To_Wire.png Werkzeugleisten-Symbol].
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==Description==
This macro positions an object perpendicularly to the selected wire.
</div>

<span id="Usage"></span>
==Anwendung== 

<div lang="en" dir="ltr" class="mw-content-ltr">
# Install the macro via the [[Image:Std_AddonMgr.svg|24px|link=Std_AddonMgr]] [[Std_AddonMgr|Addon Manager]]
# Select the path (may be an element or sub-element)
# Select the object to align
# Execute the macro
</div>

<span id="Script"></span>
==Skript==

Das Werkzeugleisten-Symbol: [[File:Macro Perpendicular To Wire.png|32px]]

'''Macro Perpendicular To Wire.FCMacro'''

{{MacroCode|code=
# -*- coding: utf-8 -*-
__title__   = "Macro Perpendicular To Wire"
__author__  = "Mario52"
__url__     = "https://wiki.freecad.org/Macro_Perpendicular_To_Wire"
__version__ = "00.03"
__date__    = "31/03/2020"

import Draft, Part

try:
    sel = FreeCADGui.Selection.getSelection()                               # Select an object
    
    lineSelected = FreeCADGui.Selection.getSelectionEx()[0].SubObjects[0]   # first object the Path object or SubObjects
    myCircle     = sel[1]                                                   # second object
    
    pointsDirection  = []
    
    pointsDirection = lineSelected.discretize(Number=500)                   # discretize the path line first selection
    
    v=pointsDirection[0].sub(pointsDirection[1])                            # avec vecteurs 1 et 2 (direction debut ligne)
    r=App.Rotation(App.Vector(0,0,1),v)
    
    pl=FreeCAD.Placement()                                                  # placement object
    pl.Rotation.Q = r.Q
    pl.Base = pointsDirection[0]
    myCircle.Placement = pl
    
    del pointsDirection[:]
    FreeCAD.ActiveDocument.recompute()
except Exception:
    print( "Select two objects. 1:The path 2:The object to align" )

}}

<span id="Options"></span>
==Optionen==

<div lang="en" dir="ltr" class="mw-content-ltr">
Essentially the line is cut in x points with {{incode|discretize()}} (for our purposes we default to {{incode|Number&#61;500}} but cuts may be modfied between  0 to 499)
</div>

{{Code|code=
    pointsDirection = lineSelected.Shape.discretize(Number=500)             # discretize the path line first selection
}}
<div lang="en" dir="ltr" class="mw-content-ltr">
1. The perpendicularity is calculated between 2 points:
</div>
{{Code|code=
v=pointsDirection[0].sub(pointsDirection[1])          # perpendicular of first > second point
}}

:[[File:Macro Perpendicular To Wire 01.png]]
{{clear}}
2:

{{Code|code=
v=pointsDirection[-1].sub(pointsDirection[-2])       # perpendicular of last > before last point
pl.Base = pointsDirection[-1]                        # position base last point}}

:[[File:Macro Perpendicular To Wire 02.png]]
{{clear}}
3:

{{Code|code=
v=pointsDirection[100].sub(pointsDirection[101])   # perpendicular of point 100 > point 101
pl.Base = pointsDirection[100]                     # position base point 100}}

:[[File:Macro Perpendicular To Wire 03.png]]
{{clear}}
4:

{{Code|code=
v=pointsDirection[0].sub(pointsDirection[-1])         # perpendicular of first point > last point
pl.Base = pointsDirection[0]                          # position base first point}}

:[[File:Macro Perpendicular To Wire 04.png]]
{{clear}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Other parameters to {{incode|discretize()}} are as follows:
</div>

{{Code|code=
# Discretizes the edge and returns a list of points.
# Forum thread: https://forum.freecad.org/viewtopic.php?f=12&t=16336#p129468
# The function accepts keywords as argument:
# discretize(Number=n) => gives a list of 'n' equidistant points
# discretize(QuasiNumber=n) => gives a list of 'n' quasi equidistant points (is faster than the method above)
# discretize(Distance=d) => gives a list of equidistant points with distance 'd'
# discretize(Deflection=d) => gives a list of points with a maximum deflection 'd' to the edge
# discretize(QuasiDeflection=d) => gives a list of points with a maximum deflection 'd' to the edge (faster)
# discretize(Angular=a,Curvature=c,[Minimum=m]) => gives a list of points with an angular deflection of 'a'
# and a curvature deflection of 'c'. Optionally a minimum number of points
# can be set which by default is set to 2.
}}

<span id="Example"></span>
==Beispiel==
<br /><br />
[[File:Macro Perpendicular To Wire 05.gif]]
{{clear}}

[[File:Macro Perpendicular To Wire.gif]]

<span id="Discussions"></span>
==Diskussionen==

* [[https://forum.freecad.org/viewtopic.php?f=13&t=19899&start=20 Spiralbohrer]] Diskussion im FreeCAD-Forum.
* https://forum.freecad.org/viewtopic.php?f=12&t=16336#p129468

==Version==

Ver 00.03 2020-03-21: Quelle und Kommentar Tippfehlerkorrekturen
Ver 00.02 2019-04-06: Python 3