<languages/>

{{Docnav/de
|[[Draft_Preferences/de|Einstellungen]]
|[[Draft_SVG/de|Scalable Vector Graphics .SVG]]
|[[Draft_Workbench/de|Draft]]
|IconL=
|IconR=
|IconC=Workbench_Draft.svg
}}

{{TOCright}}

<span id="Description"></span>
==Beschreibung==

Draft DXF ist ein Softwaremodul, das von den [[File:Std_Open.svg|24px]] [[Std_Open/de|Std Öffnen]], [[File:Std_Import.svg|24px]] [[Std_Import/de|Std Import]] und [[File:Std_Export.svg|24px]][[Std_Export/de|Std Export]] Befehlen verwendet wird, um das DXF-Dateiformat zu verarbeiten.

From the user's point of view, the DXF import/export module will be loaded automatically when any of those commands are invoked and the file to open, import or export is a DXF file. The main difference between [[Std_Open|Std Open]] and the import command is that the former will create a new FreeCAD document and then do the import, whereas the later will import the DXF file and insert the result in the currently active document.

[[Image:Screenshot qcad.jpg]]
{{Caption|QCAD-Zeichnung nach DXF exportiert, die anschließend in FreeCAD geöffnet wird}}

<span id="Importing"></span>
==Importieren==

Es stehen zwei Import-Module zur Verfügung, die unter {{MenuCommand|Bearbeiten → Einstellungen... → Import-Export → DXF}} festgelegt werden können: Der eine ist eingebaut, C++ basiert und schnell, der andere ist eine Altlast, in Python kodiert, langsamer und erfordert die Installation einer Erweiterung, kann aber manche Objekte besser verarbeiten und kann feinere FreeCAD-Objekte erstellen. Beide unterstützen alle DXF-Versionen seit R12.

3D-Festkörper innerhalb einer DXF-Datei werden unter einem binären "ACIS/SAT-Blob" gespeichert, der zur Zeit von FreeCAD nicht gelesen werden kann.


{| class="wikitable" style="text-align:left;"
|+ DXF importer entity support comparison
|-
! Entity
! C++ importer
! Legacy importer
|-
| Lines
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Polylines <small>(and LWPOLYLINES)</small>
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Arcs
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Circles
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Ellipses
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Splines
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Texts & MTexts
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Leaders
| style="text-align:center; color:red;" | '''✗'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Layers
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Points
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Dimensions
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Blocks
| style="text-align:center; color:green;" | '''✓''' <br><small>(Geometry only; texts, dimensions, and attributes inside blocks are skipped)</small>
| style="text-align:center; color:green;" | '''✓'''
|-
| Paper space objects
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| 3D Faces
| style="text-align:center; color:red;" | '''✗'''
| style="text-align:center; color:green;" | '''✓'''
|}

<span id="Exporting"></span>
==Exportieren==

Es gibt auch zwei Export-Module: Das Altdaten-Export-Modul exportiert in das DXF-Format R12, Das C++ Export-Modul in das DXF-Format R14. Beide Formate können mit vielen Programmen verarbeitet werden.

{| class="wikitable" style="text-align:left;"
|+ DXF exporter entity support comparison
|-
! Feature
! C++ exporter (R14)
! Legacy exporter (R12)
|-
| Supported 2D Geometry
| All except Bezier curves. Ellipses and Splines are exported natively.
| All except Points. Ellipses and B-splines may be inaccurate or exported as polylines.
|-
| Points
| style="text-align:center; color:green;" | '''✓''' <br><small>(If the "Export points" preference is enabled)</small>
| style="text-align:center; color:red;" | '''✗'''
|-
| 3D Objects
| Edges from faces are exported. Curved edges only if on XY plane. May create duplicate lines.
| Exported as flattened 2D views.
|-
| Texts and Dimensions
| style="text-align:center; color:red;" | '''✗'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Colors
| style="text-align:center; color:red;" | '''✗'''
| style="text-align:center; color:green;" | '''✓''' <br><small>(Based on object line color)</small>
|-
| Layers
| style="text-align:center; color:green;" | '''✓''' <br><small>(Mapped from object names)</small>
| style="text-align:center; color:green;" | '''✓''' <br><small>(Mapped from layers and nested groups)</small>
|-
| Compounds
| style="text-align:center; color:red;" | '''✗'''
| style="text-align:center; color:green;" | '''✓''' <br><small>(Exported as blocks)</small>
|}

<span id="Installing"></span>
==Installieren==

Aus lizenzrechtlichen Gründen sind die benötigten [[DXF/de|DXF]] Import/Export Bibliotheken, die von der Legacy Version des Importeurs benötigt werden, nicht Teil des FreeCAD Quellcodes.
Für weitere Informationen siehe: [[FreeCAD_and_DXF_Import/de|FreeCAD und DXF Import]].

<span id="Preferences"></span>
==Einstellungen== 

Siehe [[Import_Export_Preferences/de|Import-Export-Einstellungen]].

== DWG ==

Because the DWG format is a proprietary, closed and undocumented format it is hard for open-source projects like FreeCAD to support it. That is why FreeCAD relies on external converters to read and write DWG files. To import a DWG file a converter is used to create a DXF first, which can then be processed by the FreeCAD DXF importer. When exporting to DWG the opposite conversion happens: the DXF created by the FreeCAD DXF exporter is turned into a DWG.

Note that the DXF format allows a 1:1 conversion of the DWG format. All applications that can read and write DWG files can do the same with DXF files, with no data loss. So asking for DXF files instead of DWG files, and supplying DXF files in turn, should not cause any problems.

There is built-in support for the following DWG converters:
* [https://www.gnu.org/software/libredwg LibreDWG] (open-source, lacks support for some DWG entities).
* [https://www.opendesign.com/guestfiles/oda_file_converter ODA File Converter] (free).
* [https://qcad.org/en/qcad-command-line-tools#dwg2dwg QCAD pro] (commercial).

Siehe [[Import_Export_Preferences/de#DWG|Import Export Einstellungen]], [[FreeCAD_and_DWG_Import/de|FreeCAD and DWG Import]] für mehr Informationen.

<span id="Scripting"></span>
==Skripten==

Siehe auch: [https://freecad.github.io/SourceDoc/ Autogenerierte API-Dokumentation] und [[FreeCAD_Scripting_Basics/de|Grundlagen der Skripterstellung in FreeCAD]].

Um Objekte in eine DXF-Datei zu exportieren, wird die Methode {{incode|export}} des Moduls importDXF verwendet.

{{Code|code=
importDXF.export(objectslist, filename, nospline=False, lwPoly=False)
}}

* Für Windows: {{FileName|/}} (forward slash) wird als Pfad-Trennzeichen in {{Incode|filename}} verwendet.

Beispiel:

{{Code|code=
import FreeCAD as App
import Draft
import importDXF

doc = App.newDocument()

polygon1 = Draft.make_polygon(3, radius=500)
polygon2 = Draft.make_polygon(5, radius=1500)

doc.recompute()

objects = [polygon1, polygon2]
importDXF.export(objects, "/home/user/Pictures/myfile.dxf")
}}


{{Docnav/de
|[[Draft_Preferences/de|Einstellungen]]
|[[Draft_SVG/de|Scalable Vector Graphics .SVG]]
|[[Draft_Workbench/de|Draft]]
|IconL=
|IconR=
|IconC=Workbench_Draft.svg
}}

{{Draft Tools navi{{#translation:}}}}
{{Userdocnavi{{#translation:}}}}
[[Category:File Formats{{#translation:}}]]