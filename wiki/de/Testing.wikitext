<languages/>

{{Docnav/de
|[[Debugging/de|Fehlerdiagnose]]
|[[FreeCAD_Build_Tool/de|FreeCAD Bau Werkzeug]]
}}

[[Image:Workbench_Test.svg|thumb|128px|Erprobung Arbeitsbereichssymbol]]

{{TOCright}}

<span id="Introduction"></span>
== Einleitung ==

Der Arbeitsbereich [[Testing/de|Erprobung]] ist nicht wirklich ein Modellierungsarbeitsbereich, aber er enthält einen Satz von [[Python/de|Python]] Skripten, zum Durchzuführen verschiedener Tests an den Kernkomponenten von FreeCAD, um Probleme zu beheben. Siehe auch [[Debugging/de|Fehlerdiagnose]].

Du kannst die Tests auf der Kommandozeile ausführen, indem du die Optionen {{incode|-t}} oder {{incode|--run-test}} verwendest.

Führe alle Tests durch:

{{Code|code=
freecad --run-test 0
}}

Führe nur einige der angegebenen Komponententests aus, zum Beispiel:

{{Code|code=
freecad -t TestDraft
}}

Wenn ein Test die Benutzerschnittstelle (GUI) nicht braucht, kann er auch im Konsolenmodus gestartet werden durch das zusätzliche Setzen der Option {{incode|-c}} oder {{incode|--console}}. Daraus resultiert eine erheblich kürzere Startzeit, da die GUI nicht geladen wird. Zum Beispiel:

{{Code|code=
freecad -c -t TestPartDesignApp
}}

Von den Test-Prozeduren erzeugte Dateien (z. B. Eingabedateien von TestFemApp werden im FEM_unittests-Ordner gespeichert) werden im von FreeCAD genutzten temp-Verzeichnis gespeichert, dass mit dem folgenden Befehl der [[Python_console/de|Python-Konsole]] gefunden werden kann:

{{Code|code=
App.getTempPath()
}}

Sie könnten fürs Debuggen nützlich sein.

<span id="Test_menu"></span>
== Testmenü ==

Jedes oberste Verzeichnis in FreeCAD sollte eine Datei mit den Tests haben, die für diesen speziellen Arbeitsbereich oder dieses Modul ausgeführt werden können. Die Datei beginnt normalerweise mit dem Wort {{incode|Test}}.

Um einen Test aus FreeCAD heraus auszuführen, wechsle in den Arbeitsbereich Test, dann {{MenuCommand|Testbefehle → TestWerkzeugeGui → Selbsttest → Wähle Testbezeichnung}}, gib dann den Namen der Python-Datei mit den Tests ein; z. B. für die [[Draft Workbench/de|Arbeitsbereich Draft]] wäre dies {{MenuCommand|TestEntwurf}}, dann drücke {{Button|Start}}.

<span id="Test_functions"></span>
==Testfunktionen==

Dies ist die Liste der Testanwendungen ab 0.15 git 4207:

=== TestAPP.All ===

Testfunktion hinzufügen

<span id="BaseTests"></span>
=== Basistests ===

Testfunktion hinzufügen

<span id="UnitTests"></span>
=== EinheitTests ===

Testfunktion hinzufügen

<span id="Document"></span>
=== Dokument ===

Testfunktion hinzufügen

=== UnicodeTests ===

Testfunktion hinzufügen

=== MeshTestsApp ===

Testfunktion hinzufügen

=== TestDraft ===

Testfunktion hinzufügen

=== TestSketcherApp ===

Testfunktion hinzufügen

=== TestPartApp ===

Testfunktion hinzufügen

=== TestPartDesignApp ===

Testfunktion hinzufügen

<span id="TestCAMApp"></span>
===TestCAMApp===

Arbeitsbereich Path-Testfälle:
* depthTestCases: 
* PathTestUtils: 
* TestDressupDogbone: Test der Funktionalität von Dogbone Dressup.
* TestHoldingTags: Test der Funktionalität von Holding Tags Dressup.
* TestPathAdaptive: Testauswahlfähigkeit von Adaptiven Operationen.
* TestPathCore: Testet die Kernfunktionalität des Arbeitsbereich Path.
* TestPathDeburr: Allgemeine Funktionalität des Entgratvorgangs testen.
* TestPathGeom: Testet verschiedene Funktionen, die im PathGeom-Modul verfügbar sind.
* TestPathHelix: Testet die allgemeine Funktionalität von Helix-Operationen.
* TestPathLog: Testet verschiedene Funktionen, die im PathLog debugging und feedback-Modul vorhanden sind.
* TestPathOpTools: 
* TestPathPreferences: Test various functions available in the PathPreferences module.
* TestPathPropertyBag: 
* TestPathSetupSheet: 
* TestPathStock: 
* TestPathThreadMilling: 
* TestPathTool: 
* TestPathToolBit: 
* TestPathToolController: 
* TestPathTooltable: 
* TestPathUtil: Testet verschiedene Funktionen, die im PathUtil-Modul verfügbar sind.
* TestPathVcarve: Testet die allgemeine Funktionalität von Vcarve-Operationen.
* TestPathVoronoi:

<span id="Workbench"></span>
=== Arbeitsbereich ===

Testfunktion hinzufügen

<span id="Menu"></span>
=== Menü ===

Testfunktion hinzufügen

=== Menu.MenuDeleteCases ===

Testfunktion hinzufügen

=== Menu.MenuCreateCases ===

Testfunktion hinzufügen

<span id="Scripting"></span>
==Skripten==

{{Emphasis|Siehe auch:}} [[FreeCAD_Scripting_Basics/de|Grundlagen der Skripterstellung in FreeCAD]].

<span id="Get_a_list_of_all_top-level_test_modules"></span>
===Eine Liste aller Top-Level-Test-Module erhalten===

{{Code|code=
FreeCAD.__unit_test__
}}

Beachte, dass die Test-Module hier zurückgeben, ob sie von der GUI abhängig sind, oder nicht. Wenn sie bspw. im Konsolen-Modus ausgeführt werden, enden verschiedene Tests mit der Meldung "Gui are missing".

<span id="Run_specific_tests"></span>
===Spezifische Tests ausführen===

Es gibt verschiede Wege Tests mit [https://docs.python.org/3/library/unittest.html Pythons Unit-Test-Bibliothek] auszuführen. FreeCADs Test-Framework entfernt einige der Boiler-Plate-Test für die Standardfälle.

Alle Tests in einem bestimmten Python-Module ausführen:
{{Code|code=
import Test, TestFemApp
Test.runTestsFromModule(TestFemApp)
}}

Alle Tests in einer bestimmten Python-Klasse ausführen:
{{Code|code=
import Test, femtest.app.test_solver_calculix
Test.runTestsFromClass(femtest.app.test_solver_calculix.TestSolverCalculix)
}}

<span id="Example_1"></span>
===Beispiel 1===

Innerhalb der Python-Konsole von FreeCAD kann das folgende Code-Format benutzt werden, um eingebaute Tests auszuführen. Den roten Text "'''TestFem'''" im folgenden Code mit dem gewünschten Namen des Modultests ersetzen.
* Beispielsweise "'''TestPathApp'''" einsetzen, um alle Einheitentests des Unit-Test-Frameworks für den Arbeitsbereich Path auszuführen.
* Untermodule stehen über die Punktnotation zur Verfügung, wie "'''TestPathApp.TestPathAdaptive'''", um nur die adaptiven Einheitentests innerhalb des größeren Test-Frameworks für den Arbeitsbereich Path auszuführen.
* Mehrere Testmodule oder Untermodule können kombiniert werden, indem ein weiterer Methoden-Aufruf `'''suite.addTest(...)'''`,hinzugefügt wird, genau wie der im folgenden Code, aber mit einer anderen Modul- oder Untermodul-Referenz.
* Die Ausgaben des folgenden Codes werden im Ausgabefenster innerhalb der FreeCAD-GUI angezeigt.
* Die Code-Grundlage wurde aus dem Beitrag des FreeCAD-Forum-Benutzers ''sgrogan'' im Thema [https://forum.freecad.org/viewtopic.php?style=3&p=153251#p153251 unit tests per python] kopiert, wo Forum-Benutzer ''wmayer'' als Urheber genannt wird.

{{Code|code=
import unittest
suite = unittest.TestSuite()
suite.addTest(unittest.defaultTestLoader.loadTestsFromName("TestFem"))
r = unittest.TextTestRunner()
r.run(suite)
}}

<span id="Additional_Resources"></span>
== Zusätzliche Quellen ==

<span id="Forum_Topics"></span>
===Forum-Themen===

* [https://forum.freecad.org/viewtopic.php?style=3&f=27&t=18379 Support for running specific unit tests with --run-test #331] (Unterstützung für die Ausführung bestimmter Einheitentests mit --run-test #331)


{{Docnav/de
|[[Debugging/de|Fehlerdiagnose]]
|[[FreeCAD_Build_Tool/de|FreeCAD Bau Werkzeug]]
}}

<!--T:21-->
{{Userdocnavi{{#translation:}}}}
[[Category:Developer Documentation{{#translation:}}]]
[[Category:Test Framework{{#translation:}}]]
[[Category:Workbenches{{#translation:}}]]
[[Category:Testing{{#translation:}}]]