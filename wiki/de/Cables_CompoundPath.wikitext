<languages/>

{{Docnav/de
|[[Cables_RemoveVertexAttachment/de|KnotenbefestigungEntfernen]]
|[[Cables_Edit/de|Bearbeiten]]
|[[Cables_Workbench/de|Cables]]
|IconL=Cables_DetachWireFromTerminal.svg
|IconR=Cables_Edit.svg
|IconC=Cables_workbench_icon.svg
}}

{{GuiCommand/de
|Name=Cables CompoundPath
|Name/de=Cables Verbundverlauf
|MenuLocation=Leitungsverläufe → Verbundverlauf
|Workbenches=[[Cables_Workbench/de|Cables]]
|Shortcut={{KEY|C}} {{KEY|P}}
|Version=0.2.0
|SeeAlso=[[Cables_WireFlex/de|Cables Leitungsverlauf]]
}}

<span id="Description"></span>
==Beschreibung==

Der Befehl [[File:Cables_CompoundPath.svg|24px]] [[Cables_CompoundPath/de|Cables Verbundverlauf]] ist dazu gedacht, ein Linienzugobjekt zu erstellen, das auf einer Gruppe anderer Linienzugobjekte basiert. Seine topologische Form ist ein Verbund aus Linienzugformen oder eine einzelne Linienzugform.

Es ist möglich den '''Verbundverlauf''' als Basis für [[Cables_Cable/de|Leitungen]] oder [[Cables_CableConduit/de|Leitungsführungen]] zu nutzen. Die richtige Kombination von  [[Cables_WireFlex/de|Leitungsverläufen]] und [[Cables_CompoundPath/de|Verbundverläufen]] kann verwendet werden, um den Prozess der Herstellung komplexer Kabelbündel oder Kabel in Kabelkanälen zu vereinfachen und unnötige redundante Basisdrähte zu vermeiden. Einfache '''Leitungsverlaufs'''-Objekte können ein Teil von mehreren verschiedenen '''Verbundverlaufs'''-Objekten, die ihre Form beeinflussen.

Das untere Beispiel illustriert den Hauptzweck und die Möglichkeiten von '‘’Verbundverlaufs''' -Objekt. Die Quelldatei kann hier heruntergeladen werden: [https://github.com/sargo-devel/Cables/blob/master/examples/Harness%20examples/compoundPath_Test2.FCStd compoundPath_Test2.FCStd].

[[File:Cables_CompoundPath_Example1.png]]
{{Caption|Verbundverlauf aus zwei voneinander entfernten Drähten aufgebaut}}

Der '''Verbundverlauf''' kann nicht wie der [[Cables_WireFlex/de|Leitungsverlauf]] direkt bearbeitet werden. Seine Form ist das Ergebnis von Algorithmen hinter den '''Pfadtyp'''-Eigenschafts-Werten: {{Value|Komplex}}, {{Value|Linienzug}} oder {{Value|Einfach}} und anderen zusätzlichen Eigenschaften, die seine Basis-Linienzüge verarbeiten, angegeben unter der Eigenschaft '''Verknüpfungen'''.

<span id="Path_Type:_Complex"></span>
===Pfadtyp: Komplex===

Der Algorithmus '''Pfadtyp''':{{Value|Komplex}} erstellt eine einzige Leitungsform basierend auf allen in der Eigenschaft '''Verknüpfungen''' und teilweise auf ihrer '''Punkten'''-Eigenschaft. Daher ist die Verwendung dieses Algorithmus nur möglich, wenn alle in '''Verknüpfugen''' aufgeführten Basisobjekte die Eigenschaft '''Punkte''' haben. Andernfalls schlägt es fehl. Zusätzlich nutzt der Algorithmus andere Eigenschaften, um die Absichten des Benutzers zu „erraten” und die gewünschte Form zu erstellen.

Hier sind einige Regeln, die vom Algorithmus verwendet werden:
* Lücken zwischen Basisobjekten sind zulässig. Sie werden automatisch mit Linien und Bögen oder Bézier-Kurven verbunden. Zur Herstellung der Verbindung wird ein kleinerer Abstand zwischen den Enden der Basisobjekte gewählt.
* Die Richtung eines einzelnen Basisobjekts ist nicht wichtig. Die Basisobjekte werden in der Reihenfolge der Eigenschaft '''Verknüpfungen''' verbunden.
* Wenn zwischen den Basisobjekten keine Lücke vorhanden ist, wird die Verbindung mit Bogenverrundungen korrigiert.
* Wenn Eigenschaften für Verbindungsversatz verwendet werden, werden die Begrenzungskanten der Basisobjekte verschoben, um den Versatzpunkt zu erreichen.
* Wenn zwei aufeinanderfolgende Linienkanten eine einzelne Linie bilden, werden sie durch eine einzelne Kante ersetzt.
* Die Tangentialität wird nach Möglichkeit über alle Verbindungen hinweg beibehalten (z. B. wenn '''MinimumFilletRadius''' dies zulässt).

<span id="Path_Type:_Wire"></span>
===Pfadtyp: Linienzug===

Der Algorithmus '''Pfadtyp''':{{Value|Linienzug}} erstellt eine einzelne Linienzugform aus der Eigenschaft '''Punkte''' aller Objekte, die in der Eigenschaft '''Verknüpufngen''' aufgeführt sind. Daher ist die Verwendung dieses Algorithmus nur möglich, wenn alle in '''Verknüpufngen''' aufgeführten Basisobjekte über die Eigenschaft '''Punkte''' verfügen. Andernfalls schlägt er fehl. Er erzeugt einen Linienzug basierend auf bestimmten Punkten, ähnlich wie es der Befehl [[File:Draft_Wire.png|24px]] [[Draft_Wire/de|Draft Linienzug]] tun würde.

Die vom Algorithmus verwendeten Regeln ähneln denen des '''Pfadtyps'''':{{Value|Komplex}}, mit Ausnahme der Verwendung einer Bézier-Kurve. Die einzigen zulässigen Kantenformen in diesem Modus sind Linien und Bögen. Wenn das Basisobjekt andere Formen enthält (z. B. BSpline), werden diese durch die beiden oben genannten ersetzt.

<span id="Path_Type:_Simple"></span>
===Pfadtyp: Einfach===

Der '''Path Type''':{{Value|Simple}}-Algorithmus erzeugt einen Verbund von Draht-Formen, aufgelisted in der '''Links'''-Eigenschaft. Es erzeugt genau das gleiche Ergebnis, wie es der Befehl  [[File:Part_Compound.svg|24px]] [[Part_Compound/de|Part Verbund]] tun würde.

<div lang="en" dir="ltr" class="mw-content-ltr">
Here any wire like objects (see [[#Notes|Note 1]]) can be used as a base for '''CompoundPath''' shape not guaranteeing the success of producing the right wire to be useful as a base for a [[Cables_Cable|Cable]] or [[Cables_CableConduit|CableConduit]]. To successfully create such a wire (for [[Cables_CableConduit|CableConduit]]) the base shapes have to touch with their end vertices and additionally (to be useful as a base for [[Cables_Cable|Cable]]) they have to be properly ordered, i.e. the first vertex of the first shape must be the beginning of '''CompoundPath''' and the last vertex of the last shape must be the end of '''CompoundPath'''.
</div>

Mit dem Algorithmus {{Value|Einfach}} werden keine zusätzlichen automatischen Aktionen durchgeführt. Wenn beispielsweise Tangentialverbindungen zwischen Grundformen erforderlich sind, müssen diese manuell hergestellt werden.

Der {{Value|Einfach}}-Algorithmus kann verwendet werden, wenn die Ergebnisse der {{Value|Komplex}}- oder {{Value|Linienzug}}-Algorithmen nicht zufriedenstellend sind. Unter Berücksichtigung der oben genannten Regeln kann die Reihe miteinander verbundener [[Sketcher_Workbench/de|Skizzen]], die frei im 3D-Raum ausgerichtet sind, beispielsweise als Grundformen für einen '''VerbundPfad''' erstellt werden.

<span id="Usage"></span>
==Anwendung==

<div lang="en" dir="ltr" class="mw-content-ltr">
# Select at least two existing wire objects (see [[#Notes|Note 1]]) in the [[3D_View|3D View]] or [[Tree_View|Tree View]].
# Create '''CompoundPath''' by one of these methods:
#* Press the {{Button|[[File:Cables_CompoundPath.svg|16px]] [[Cables_CompoundPath|CompoundPath]]}} button.
#* Select the {{MenuCommand|Cable Wires → [[File:Cables_CompoundPath.svg|16px]] CompoundPath}} option from the menu.
#* Right-click in the [[Tree_View|Tree View]] or the [[3D_View|3D View]] and select the {{MenuCommand|Cable Wires → [[File:Cables_CompoundPath.svg|16px]] CompoundPath}} option from the context menu.
</div>

<span id="Example"></span>
==Beispiel==

Das Beispiel zeigt, wie man drei verschiedene '''VerbundPfade''' durch Verwendung von Basislinienzügen, die den Anfang, die Mitte und das Ende des Pfades markieren. Lücken zwischen einzelnen Linienzügen werden automatisch gefüllt. Zusätzlich wird der mittlere Linienzug von allen drei Pfaden mit einem unterschiedlichen Versatz verwendet. Details findet man in der Beispiel-Dokumentdatei: [https://github.com/sargo-devel/Cables/blob/master/examples/Harness%20examples/compoundPath_x3.FCStd compoundPath_x3.FCStd].

[[File:Cables_CompoundPath_Example2.png]]
{{Caption|(1) Anzahl Adern, (2) 3x Verbundverläufe mit Versatz, aufgebaut auf Adern, (3) Leitungen basierend auf Verbundverläufen}}

<span id="Notes"></span>
==Hinweise==

<div lang="en" dir="ltr" class="mw-content-ltr">
* Note 1: The following wire objects can be safely used for selection as base: [[Cables_WireFlex|WireFlex]], [[Draft_Wire|Draft Wire]] or another existing [[Cables_CompoundPath|CompoundPath]]. Other objects containing '''Points''' property (e.g. [[Draft_BSpline|Draft BSpline]], [[Draft_BezCurve|Draft BezCurve]]) can also be used, but results can be different from the expected outcome (especially when '''Path Type''' property has value: {{Value|Complex}}). Using other objects (e.g.[[Sketcher_Workbench|Sketches]]) can be successful when '''Path Type''' property has value: {{Value|Simple}}. However [[Cables_Cable|Cable]] or [[Cables_CableConduit|Cable Conduit]] creation can fail if there are e.g. gaps between such objects.
* Note 2: There can be some unexpected shape results or errors especially when using '''Connection Offset Dist''' property with relatively high values. When troubleshooting such a shape it is recommended to start with '''Connection Offset Dist''' set to 0 and other parameters close to defaults and increase these values with small steps trying to understand what is happening.
</div>

<span id="Properties"></span>
==Eigenschaften==

<span id="Data"></span>
===Daten===

{{TitleProperty|Basis}}

* {{PropertyData/de|Verknüpfungen|LinkList}}: enthält eine Liste der Objekte, die hinzugefügt wurden zu '''CompoundPath'''

{{TitleProperty|Compound Path}}

<div lang="en" dir="ltr" class="mw-content-ltr">
* {{PropertyData|Connection Offset Angle|Angle}}: specifies the angle of a connection offset distance.
* {{PropertyData|Connection Offset Dist|Length}}: specifies the distance of the offset point in relation to the calculated connection point of the boundary edges of two consecutive base wires. It is used e.g. to fit different '''CompoundPath'''s based on the same base wire inside a single cable conduit.
* {{PropertyData|Connection Type|Enumeration}}: specifies the type of curves used to connect base wires. Possible values are: {{Value|Arc}} or {{Value|Bez}} . Valid for {{Value|Complex}} '''Path Type''' only.
* {{PropertyData|Degree|Integer}}: specifies the degree of a Bezier function used in '''Connection Type''' property.
* {{PropertyData|Edge With Smallest Bending Radius|String}}: (read-only) shows the name of edge containing smallest radius or preceding smallest radius if radius is 0. It can be used, together with '''Smallest Bending Radius''', for identification of the edge with the smallest bending radius and comparing it with the specification of the cable built on its basis.
* {{PropertyData|Length|Length}}: specifies the length of this '''CompoundPath'''.
* {{PropertyData|Minimum Fillet Radius|Length}}: specifies the minimum fillet radius in the connections between base wires. The final radius can be longer if possible.
* {{PropertyData|Path Type|Enumeration}}: specifies the type of the '''CompoundPath''' shape. Possible values are: {{Value|Complex}}, {{Value|Wire}} or {{Value|Simple}}. They are presented in the [[#Description|Description]].
* {{PropertyData|Points|VectorList}}: specifies the points of the '''CompoundPath''' in its local coordinate system.
* {{PropertyData|Ratio|Float}}: specifies the proportions of segments in the curve created inside the gap between base wires. Usually the value between 1 and 2 gives the best results.
* {{PropertyData|Smallest Bending Radius|Length}}: (read-only) shows the smallest detected radius across all edges.
</div>


{{Docnav/de
|[[Cables_RemoveVertexAttachment/de|KnotenbefestigungEntfernen]]
|[[Cables_Edit/de|Bearbeiten]]
|[[Cables_Workbench/de|Cables]]
|IconL=Cables_DetachWireFromTerminal.svg
|IconR=Cables_Edit.svg
|IconC=Cables_workbench_icon.svg
}}

[[Category:External_Command_Reference{{#translation:}}]]
[[Category:Cables{{#translation:}}]]