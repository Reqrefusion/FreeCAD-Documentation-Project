<languages/>

<div class="mw-translate-fuzzy">
{{Docnav/de
|[[Cables_RemoveVertexAttachment/de|KnotenbefestigungEntfernen]]
|[[Cables_Edit/de|Bearbeiten]]
|[[Cables_Workbench/de|Cables]]
|IconL=Cables_RemoveVertexAttachment.svg
|IconR=Cables_Edit.svg
|IconC=Cables_workbench_icon.svg
}}
</div>

{{GuiCommand/de
|Name=Cables CompoundPath
|Name/de=Cables Verbundverlauf
|MenuLocation=Leitungsverläufe → Verbundverlauf
|Workbenches=[[Cables_Workbench/de|Cables]]
|Shortcut={{KEY|C}} {{KEY|P}}
|Version=0.2.0
|SeeAlso=[[Cables_WireFlex/de|Cables Leitungsverlauf]]
}}

<span id="Description"></span>
==Beschreibung==

Der Befehl [[File:Cables_CompoundPath.svg|24px]] [[Cables_CompoundPath/de|Cables Verbundverlauf]] ist dazu gedacht, ein Linienzugobjekt zu erstellen, das auf einer Gruppe anderer Linienzugobjekte basiert. Seine topologische Form ist ein Verbund aus Linienzugformen oder eine einzelne Linienzugform.

<div lang="en" dir="ltr" class="mw-content-ltr">
It is possible to use '''CompoundPath''' as a base for [[Cables_Cable|Cable]] or [[Cables_CableConduit|CableConduit]]. Proper combination of [[Cables_WireFlex|WireFlex]] and [[Cables_CompoundPath|CompoundPath]] can be used to simplify process of creation complex cable bundles or cables inside cable conduits avoiding unnecessary redundant base wires. Single '''WireFlex''' object can be a part of a few different '''CompoundPath''' objects influencing their shapes.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The below example ilustrates the main purpose and possibilities of '''CompoundPath''' object. The source example file can be downloaded from here: [https://github.com/sargo-devel/Cables/blob/master/examples/Harness%20examples/compoundPath_Test2.FCStd compoundPath_Test2.FCStd].
</div>

[[File:Cables_CompoundPath_Example1.png]]
{{Caption| Verbundverlauf aus zwei voneinander entfernten Drähten aufgebaut}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The '''CompoundPath''' cannot be directly edited like [[Cables_WireFlex|WireFlex]]. Its shape is a result of algorithms behind the '''Path Type''' property values: {{Value|Complex}}, {{Value|Wire}} or {{Value|Simple}} and other additional properties processing its base wires declared under '''Links''' property.
</div>

<span id="Path_Type:_Complex"></span>
===Pfadtyp: Komplex===

<div lang="en" dir="ltr" class="mw-content-ltr">
The '''Path Type''':{{Value|Complex}} algorithm creates a single wire shape based on all objects listed in '''Links''' property and partially on their '''Points''' property. Therefore, the use of this algorithm is possible only if all base objects listed in '''Links''' have '''Points''' property. Otherwise it will fail. Additionally the algorithm uses other properties "guessing" user intentions to create the desired shape.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Here are some rules used by the algorithm:
* Gaps between base objects are allowed. They will be connected automatically with lines and arcs or Bézier curve. A smaller distance between ends of base objects is chosen to create the connection.
* Direction of single base object is not important. The base objects will be connected in the order in the '''Links''' property.
* If there is no gap between base objects the connection will be corrected with arc fillets.
* If connection offset properties are used the boundary edges of base objects are shifted to reach the offset point.
* If two consecutive line edges form a single line they are replaced by a single edge.
* Tangency is preserved across all connections if possible (e.g. if '''MinimumFilletRadius''' allows it).
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
===Path Type: Wire===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The '''Path Type''':{{Value|Wire}} algorithm creates a single wire shape from '''Points''' property of all objects listed in '''Links''' property. Therefore, the use of this algorithm is possible only if all base objects listed in '''Links''' have '''Points''' property. Otherwise it will fail. It produces a wire shape based on a given points which is similar to what the command [[File:Draft_Wire.png|24px]] [[Draft_Wire|Draft Wire]] would do.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The rules used by the algorithm are similar to those used by the '''Path Type''':{{Value|Complex}} with the exception of a Bézier curve usage. The only allowed edge shapes in this mode are lines and arcs. If base object contains other shapes (e.g. BSpline), they will be replaced by the above two.
</div>

<span id="Path_Type:_Simple"></span>
===Pfadtyp: Einfach===

<div lang="en" dir="ltr" class="mw-content-ltr">
The '''Path Type''':{{Value|Simple}} algorithm creates a compound of wire shapes listed in '''Links''' property. It produces exactly the same result like the command [[File:Part_Compound.svg|24px]] [[Part_Compound|Part Compound]] would do.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Here any wire like objects (see [[#Notes|Note 1]]) can be used as a base for '''CompoundPath''' shape not guaranteeing the success of producing the right wire to be useful as a base for a [[Cables_Cable|Cable]] or [[Cables_CableConduit|CableConduit]]. To successfully create such a wire (for [[Cables_CableConduit|CableConduit]]) the base shapes have to touch with their end vertices and additionally (to be useful as a base for [[Cables_Cable|Cable]]) they have to be properly ordered, i.e. the first vertex of the first shape must be the beginning of '''CompoundPath''' and the last vertex of the last shape must be the end of '''CompoundPath'''.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
No additional automatic actions are done with {{Value|Simple}} algorithm. If e.g. tangent connections between base shapes are needed, they have to be done manually.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The {{Value|Simple}} algorithm can be used if results produced by {{Value|Complex}} or {{Value|Wire}} algorithms are not satisfactory. Keeping in mind the above rules, the series of connected [[Sketcher_Workbench|sketches]] freely aligned in a 3D space can be used for example as a base shapes for a '''CompoundPath'''.
</div>

<span id="Usage"></span>
==Anwendung==

<div lang="en" dir="ltr" class="mw-content-ltr">
# Select at least two existing wire objects (see [[#Notes|Note 1]]) in the [[3D_view|3D view]] or [[Tree_view|Tree view]].
# Create '''CompoundPath''' by one of these methods:
#* Press the {{Button|[[File:Cables_CompoundPath.svg|16px]] [[Cables_CompoundPath|CompoundPath]]}} button.
#* Select the {{MenuCommand|Cable Wires → [[File:Cables_CompoundPath.svg|16px]] CompoundPath}} option from the menu.
#* Right-click in the [[Tree_view|Tree view]] or the [[3D_view|3D view]] and select the {{MenuCommand|Cable Wires → [[File:Cables_CompoundPath.svg|16px]] CompoundPath}} option from the context menu.
</div>

<span id="Example"></span>
==Beispiel==

<div lang="en" dir="ltr" class="mw-content-ltr">
The example shows how to create three different '''CompoundPath'''s by using base wires marking the beginning, middle and end of path. Gaps between individual wires are filled in automatically. In addition the middle wire is used by all three paths with a different offset. For details see the example document file: [https://github.com/sargo-devel/Cables/blob/master/examples/Harness%20examples/compoundPath_x3.FCStd compoundPath_x3.FCStd].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
[[File:Cables_CompoundPath_Example2.png]]
{{Caption|(1) Set of base wires, (2) 3x CompoundPath with offsets built upon base wires, (3) Cables based on CompoundPaths}}
</div>

<span id="Notes"></span>
==Hinweise==

<div lang="en" dir="ltr" class="mw-content-ltr">
* Note 1: The following wire objects can be safely used for selection as base: [[Cables_WireFlex|WireFlex]], [[Draft_Wire|Draft Wire]] or another existing [[Cables_CompoundPath|CompoundPath]]. Other objects containing '''Points''' property (e.g. [[Draft_BSpline|Draft BSpline]], [[Draft_BezCurve|Draft BezCurve]]) can also be used, but results can be different from the expected outcome (especially when '''Path Type''' property has value: {{Value|Complex}}). Using other objects (e.g.[[Sketcher_Workbench|Sketches]]) can be successful when '''Path Type''' property has value: {{Value|Simple}}. However [[Cables_Cable|Cable]] or [[Cables_CableConduit|Cable Conduit]] creation can fail if there are e.g. gaps between such objects.
* Note 2: There can be some unexpected shape results or errors especially when using '''Connection Offset Dist''' property with relatively high values. When troubleshooting such a shape it is recommended to start with '''Connection Offset Dist''' set to 0 and other parameters close to defaults and increase these values with small steps trying to understand what is happening.
</div>

<span id="Properties"></span>
==Eigenschaften==

<span id="Data"></span>
===Daten===

{{TitleProperty|Basis}}

* {{PropertyData/de|Verknüpfungen|LinkList}}: enthält eine Liste der Objekte, die hinzugefügt wurden zu '''CompoundPath'''

{{TitleProperty|Compound Path}}

<div lang="en" dir="ltr" class="mw-content-ltr">
* {{PropertyData|Connection Offset Angle|Angle}}: specifies the angle of a connection offset distance.
* {{PropertyData|Connection Offset Dist|Length}}: specifies the distance of the offset point in relation to the calculated connection point of the boundary edges of two consecutive base wires. It is used e.g. to fit different '''CompoundPath'''s based on the same base wire inside a single cable conduit.
* {{PropertyData|Connection Type|Enumeration}}: specifies the type of curves used to connect base wires. Possible values are: {{Value|Arc}} or {{Value|Bez}} . Valid for {{Value|Complex}} '''Path Type''' only.
* {{PropertyData|Degree|Integer}}: specifies the degree of a Bezier function used in '''Connection Type''' property.
* {{PropertyData|Edge With Smallest Bending Radius|String}}: (read-only) shows the name of edge containing smallest radius or preceding smallest radius if radius is 0. It can be used, together with '''Smallest Bending Radius''', for identification of the edge with the smallest bending radius and comparing it with the specification of the cable built on its basis.
* {{PropertyData|Length|Length}}: specifies the length of this '''CompoundPath'''.
* {{PropertyData|Minimum Fillet Radius|Length}}: specifies the minimum fillet radius in the connections between base wires. The final radius can be longer if possible.
* {{PropertyData|Path Type|Enumeration}}: specifies the type of the '''CompoundPath''' shape. Possible values are: {{Value|Complex}}, {{Value|Wire}} or {{Value|Simple}}. They are presented in the [[#Description|Description]].
* {{PropertyData|Points|VectorList}}: specifies the points of the '''CompoundPath''' in its local coordinate system.
* {{PropertyData|Ratio|Float}}: specifies the proportions of segments in the curve created inside the gap between base wires. Usually the value between 1 and 2 gives the best results.
* {{PropertyData|Smallest Bending Radius|Length}}: (read-only) shows the smallest detected radius across all edges.
</div>


<div class="mw-translate-fuzzy">
{{Docnav/de
|[[Cables_RemoveVertexAttachment/de|KnotenbefestigungEntfernen]]
|[[Cables_Edit/de|Bearbeiten]]
|[[Cables_Workbench/de|Cables]]
|IconL=Cables_RemoveVertexAttachment.svg
|IconR=Cables_Edit.svg
|IconC=Cables_workbench_icon.svg
}}
</div>

[[Category:External_Command_Reference{{#translation:}}]]
[[Category:Cables{{#translation:}}]]