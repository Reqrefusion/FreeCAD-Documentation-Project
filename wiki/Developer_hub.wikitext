<languages>import cv2
import numpy as np
import trimesh
import os

def create_wall_mesh(p1, p2, height, thickness):
    """
    Creates a 3D wall mesh (a thin cuboid) between two points.

    Args:
        p1 (tuple): The (x, y) coordinates of the start point of the wall.
        p2 (tuple): The (x, y) coordinates of the end point of the wall.
        height (float): The height of the wall.
        thickness (float): The thickness of the wall.

    Returns:
        trimesh.Trimesh: A mesh object representing the wall.
    """
    # Calculate the direction vector and length of the wall
    direction = np.array([p2[0] - p1[0], p2[1] - p1[1], 0])
    length = np.linalg.norm(direction[:2])
    if length == 0:
        return None
    direction /= np.linalg.norm(direction)

    # Calculate the perpendicular vector for thickness
    perp = np.array([-direction[1], direction[0], 0]) * (thickness / 2.0)

    # Define the 8 vertices of the cuboid (wall)
    # Bottom vertices
    v0 = np.array([p1[0], p1[1], 0]) - perp
    v1 = np.array([p2[0], p2[1], 0]) - perp
    v2 = np.array([p2[0], p2[1], 0]) + perp
    v3 = np.array([p1[0], p1[1], 0]) + perp
    # Top vertices
    v4 = v0 + [0, 0, height]
    v5 = v1 + [0, 0, height]
    v6 = v2 + [0, 0, height]
    v7 = v3 + [0, 0, height]

    vertices = [v0, v1, v2, v3, v4, v5, v6, v7]

    # Define the 12 triangles (2 for each face) of the cuboid
    faces = [
        [0, 1, 2], [0, 2, 3],  # Bottom face
        [4, 6, 5], [4, 7, 6],  # Top face
        [0, 4, 5], [0, 5, 1],  # Front face
        [2, 6, 7], [2, 7, 3],  # Back face
        [1, 5, 6], [1, 6, 2],  # Right face
        [0, 3, 7], [0, 7, 4]   # Left face
    ]

    return trimesh.Trimesh(vertices=vertices, faces=faces)

def floorplan_to_3d(image_path, output_filename, wall_height, wall_thickness):
    """
    Main function to process a floor plan image and generate a 3D model.

    Args:
        image_path (str): The path to the input floor plan image.
        output_filename (str): The path to save the output 3D model (e.g., 'model.obj').
        wall_height (float): The desired height of the walls in the 3D model.
        wall_thickness (float): The desired thickness of the walls.
    """
    # --- 1. Image Loading and Preprocessing ---
    if not os.path.exists(image_path):
        print(f"Error: Image file not found at '{image_path}'")
        return

    img = cv2.imread(image_path)
    if img is None:
        print(f"Error: Could not read image from '{image_path}'")
        return

    # Convert to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Invert the image (lines become white, background black)
    # This is important for thresholding and line detection
    gray = cv2.bitwise_not(gray)

    # Apply a binary threshold to get a clean black and white image
    # This helps to remove noise and grid lines
    _, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)

    # --- 2. Line Detection ---
    # Use the Probabilistic Hough Line Transform to detect line segments.
    # Adjust parameters minLineLength and maxLineGap for your specific image.
    lines = cv2.HoughLinesP(
        thresh,
        rho=1,
        theta=np.pi/180,
        threshold=50,
        minLineLength=50,
        maxLineGap=10
    )

    if lines is None:
        print("No lines were detected. Try adjusting the Hough Transform parameters.")
        return

    print(f"Detected {len(lines)} line segments.")

    # --- 3. 3D Mesh Generation ---
    all_meshes = []
    for line in lines:
        x1, y1, x2, y2 = line[0]

        # The image coordinate system has (0,0) at the top-left.
        # We flip the y-axis to match a standard Cartesian system for the 3D model.
        img_height = img.shape[0]
        p1 = (x1, img_height - y1)
        p2 = (x2, img_height - y2)

        wall_mesh = create_wall_mesh(p1, p2, wall_height, wall_thickness)
        if wall_mesh:
            all_meshes.append(wall_mesh)

    if not all_meshes:
        print("Could not create any wall meshes from the detected lines.")
        return

    # Combine all individual wall meshes into a single scene
    combined_mesh = trimesh.util.concatenate(all_meshes)

    # --- 4. Exporting the Model ---
    try:
        # Export the combined mesh to the specified file format.
        # The format is inferred from the filename extension (e.g., .obj, .stl).
        combined_mesh.export(output_filename)
        print(f"Successfully exported 3D model to '{output_filename}'")
    except Exception as e:
        print(f"An error occurred during export: {e}")


# --- Main Execution ---
if __name__ == '__main__':
    # --- Configuration ---
    # Make sure to place the image file in the same directory as the script,
    # or provide the full path to the image.
    INPUT_IMAGE_PATH = 'IMG20250728213721.jpg'
    OUTPUT_MODEL_PATH = 'floorplan_model.obj' # You can also use .stl or .gltf

    # Set the dimensions for the 3D model.
    # You might need to adjust these based on the scale of your drawing.
    WALL_HEIGHT = 50.0
    WALL_THICKNESS = 5.0

    # Run the conversion process
    floorplan_to_3d(INPUT_IMAGE_PATH, OUTPUT_MODEL_PATH, WALL_HEIGHT, WALL_THICKNESS)

</languages>
{{TOCright}}
[[Image:Crystal_Clear_app_tutorials.png|64px]]
----
<translate>

<!--T:2-->
This is the place to come if you want to contribute to the development of the FreeCAD software. 

<!--T:3-->
These pages are in the early stage of development.  If you can't find the information you are looking for, or have found useful information somewhere we have not linked to, then please leave a comment on the [https://forum.freecad.org/index.php?sid=5f84150e79db8842e277b042077097ff  forum] and someone will look into it (or, if you are feeling bold, why not edit this page directly!).

== Developer Documentation == <!--T:32-->

<!--T:4-->
The developer documentation comprises the following sections:

=== Compiling FreeCAD === <!--T:33-->

<!--T:5-->
* [https://github.com/FreeCAD/FreeCAD Github repo]. If you are new to git, read [[Source code management|Source code management]]
* [[Compile_on_Docker|Compile with Docker]]
* [[Compile_on_Windows|Compiling on Windows]]
* [[Compile_on_Linux|Compiling on Linux]]
* [[Compile_on_MacOS|Compiling on MacOS]]
* [[License|License details]] about the FreeCAD licences and allowed uses of the source code and application
* [[Logo|Logo and other assets]] How the FreeCAD logo and other assets of FreeCAD should be used
* [[Third Party Libraries|Third Party Libraries]]
* [[Third Party Tools|Third Party Tools]]
* [[Start up and Configuration|Start up and Configuration]]
* [[Source documentation|Source documentation]]
* Use the [[Tracker|bug tracker]] when you have a problem or think you may have found a bug

=== Packaging === <!--T:19-->

<!--T:26-->
[[Packaging|Packaging]] consists in taking the compiled binaries and Python source files of FreeCAD, and distributing them for use in a particular system.

<!--T:20-->
* [[Linux_packaging|Linux packaging]]
** [[Debian_development|Debian development]]
** [[Debian_Unstable|Debian Unstable]]
** [[Git_buildpackage|Git buildpackage]]
* [[Windows_packaging|Windows packaging]]
* [[MacOS_packaging|MacOS packaging]]

=== Build Support Tools === <!--T:34-->

<!--T:6-->
* The [[FreeCAD Build Tool|FreeCAD Build Tool]]
** [[Workbench_creation|Adding an application module]] to FreeCAD
* [[Debugging|Debugging]] FreeCAD
* [[Testing|Testing]] FreeCAD
* [[Compiling (Speeding up)|Compiling (Speeding up)]] FreeCAD
* [[Continuous Integration|Continuous Integration]]

=== Modifying FreeCAD === <!--T:35-->

<!--T:7-->
* Understanding [[The FreeCAD source code|The FreeCAD source code]]
* [[Tracker#Submitting_patches|Submitting patches]]
* Add [[Gui Command|Features]] to FreeCAD or a Workbench
* [[Branding|Branding]] or ''how to give FreeCAD a unique look''
* [[Artwork|Artwork]] we made for FreeCAD, that you can freely reuse
* [[Artwork_Guidelines|Artwork guidelines]] standards for icons
* [[Localisation|Translating FreeCAD]]
* [[Extra python modules|Extra python modules]], or ''how to extend python functionality within FreeCAD''
* [[Google Summer of Code|Google Summer of Code]] get involved via Google's student support program
* [[Fine-tuning|Fine-tuning]] shows different options and parameter switches that can overcome problems
* [[Wrapping_a_Cplusplus_class_in_Python|Wrapping a C++ class in Python]] shows how to create the Python wrapper for a C++ class
* [[NewFeatureCheckList_C++|Checklist for adding a Feature to a C++ workbench]] provides an aid for contributors.

<!--T:16-->
* [[Translating an external workbench|Translating an external workbench]]

=== Module developer's guide === <!--T:36-->

<!--T:13-->
[https://github.com/qingfengxia/FreeCAD_Mod_Dev_Guide FreeCAD Mod Dev Guide]: This is an ebook under writing on github, please fork and send pull request to contribute.

<!--T:14-->
Chapters:
* Overview and Software Architecture
* Source code structure
* Base and App module
* Gui module
* Python wrapping
* Modular design
* Fem module source analysis (mixed C++ and Python)
* Development of CFD Module (pure Python)
* Module testing and debugging
* Contribute code with git

<!--T:15-->
Latest pdf preview can be downoaded from [https://github.com/qingfengxia/FreeCAD_Mod_Dev_Guide/tree/master/pdf pdf folder] of this git repo

=== Internals === <!--T:21-->

==== OpenCascade Documentation ==== <!--T:8-->

<!--T:17-->
OpenCascade is a software development platform for 3D surface and solid modeling, CAD data exchange, and visualization, mostly in the form of C++ libraries.

<!--T:18-->
* [http://opencascade.wikidot.com/romansarticles Roman Lygin's tutorials]
* [https://dev.opencascade.org/cdoc/overview/html/index.html Full Online Documentation]
* [https://dev.opencascade.org/doc/refman/html/index.html Reference Manual]
* [http://opencascade.wikidot.com The openCascade wiki] (currently containing ?? Chinese spam)

==== File format ==== <!--T:27-->

<!--T:28-->
[[File_Format_FCStd|File Format FCStd]]. The files created with FreeCAD are {{incode|.zip}} files that include the [https://en.wikipedia.org/wiki/Boundary_representation BREP] geometry, as well as XML data that describes the document.

==== Sketcher solver ==== <!--T:22-->

<!--T:23-->
* [https://forum.freecad.org/viewtopic.php?f=10&t=36355 Sketcher Solver Architecture Booklet] (forum thread), [https://github.com/abdullahtahiriyo/FreeCADBooks/tree/master/FreeCAD_Solver_Architecture source] in GitHub.
* [https://github.com/FreeCAD/FreeCAD/blob/master/src/Mod/Sketcher/App/planegcs/ PlaneGCS solver] in the FreeCAD source code; important files are [https://github.com/FreeCAD/FreeCAD/blob/master/src/Mod/Sketcher/App/planegcs/GCS.cpp GCS.cpp] and [https://github.com/FreeCAD/FreeCAD/blob/master/src/Mod/Sketcher/App/planegcs/SubSystem.cpp SubSystem.cpp].
* [https://forum.freecad.org/viewtopic.php?f=9&t=29192 Recent Several Sketcher improvements].

<!--T:24-->
The sketcher solver isn't perfect, as there are some issues with numerical precision when using large values, see [https://forum.freecad.org/viewtopic.php?f=10&t=40502 Adventure of fixing sketcher solver for large sketches].

<!--T:25-->
The development of a new solver architecture could improve the way the solver is used both in the [[Sketcher Workbench|Sketcher Workbench]], and for assembly of 3D bodies. See [https://forum.freecad.org/viewtopic.php?f=20&t=40525 Reimplementing constraint solver].

== Roadmap == <!--T:37-->

<!--T:9-->
FreeCAD, though usable in certain areas, is at the beginning of a long way into the CAD mainstream. There is still a lot to do 
to reach a state where we can compete with commercial software.

<!--T:39-->
[[FreeCAD_1.0_Development_Cycle|FreeCAD 1.0 Development Cycle]]

== Community == <!--T:30-->

<!--T:31-->
* [ircs://irc.libera.chat:6697/freecad IRC channel] ,synchronized with [https://gitter.im/FreeCAD/FreeCAD gitter channel]
* [https://forum.freecad.org/viewforum.php?f=6 Development forum]

<!--T:10-->
* [[Development roadmap|Development roadmap]]

<!--T:11-->
== Credits ==
[[Contributors|Contributors]]

</translate>
{{Userdocnavi{{#translation:}}}}
[[Category:Hubs{{#translation:}}]]
[[Category:Developer Documentation{{#translation:}}]]