<languages/>

{{Macro/it
|Name=Macro Perpendicular To Wire
|Icon=Macro_Perpendicular_To_Wire.png
|Translate=Perpendicolare a linea
|Description=Posiziona l'oggetto perpendicolarmente alla linea selezionata.<br />Versione 00.02 : 2019-04-06. Icona per la ToolBar: [https://www.freecad.org/wiki/images/0/0c/Macro_Perpendicular_To_Wire.png Icon].<br />
|Author=Mario52
|Version=00.02
|Date=2019-04-06
|FCVersion=All
|Download=[https://www.freecad.org/wiki/images/0/0c/Macro_Perpendicular_To_Wire.png ToolBar Icon]
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==Description==
</div>

<div class="mw-translate-fuzzy">
==Descrizione== 
Posiziona l'oggetto perpendicolarmente alla linea selezionata.
</div>

<span id="Usage"></span>
<div class="mw-translate-fuzzy">
==Uso==
</div> 

<div class="mw-translate-fuzzy">
# : selezionare il percorso (può essere un elemento o un sotto-elemento)
# : selezionare l'oggetto da posizionare
# : eseguire la macro
</div>

==Script==

<div class="mw-translate-fuzzy">
L'icona per la barra degli strumenti  [[File:Macro Perpendicular To Wire.png]]
</div>

'''Macro Perpendicular To Wire.FCMacro'''

{{MacroCode|code=
# -*- coding: utf-8 -*-
__title__   = "Macro Perpendicular To Wire"
__author__  = "Mario52"
__url__     = "https://wiki.freecad.org/Macro_Perpendicular_To_Wire"
__version__ = "00.03"
__date__    = "31/03/2020"

import Draft, Part

try:
    sel = FreeCADGui.Selection.getSelection()                               # Select an object
    
    lineSelected = FreeCADGui.Selection.getSelectionEx()[0].SubObjects[0]   # first object the Path object or SubObjects
    myCircle     = sel[1]                                                   # second object
    
    pointsDirection  = []
    
    pointsDirection = lineSelected.discretize(Number=500)                   # discretize the path line first selection
    
    v=pointsDirection[0].sub(pointsDirection[1])                            # avec vecteurs 1 et 2 (direction debut ligne)
    r=App.Rotation(App.Vector(0,0,1),v)
    
    pl=FreeCAD.Placement()                                                  # placement object
    pl.Rotation.Q = r.Q
    pl.Base = pointsDirection[0]
    myCircle.Placement = pl
    
    del pointsDirection[:]
    FreeCAD.ActiveDocument.recompute()
except Exception:
    print( "Select two objects. 1:The path 2:The object to align" )

}}

<span id="Options"></span>
==Opzioni==

<div class="mw-translate-fuzzy">
Principio di funzionamento :
</div>

{{Code|code=
    pointsDirection = lineSelected.Shape.discretize(Number=500)             # discretize the path line first selection
}}

<div class="mw-translate-fuzzy">
la perpendicolarità è calcolata tra 2 punti modificando :
</div>

{{Code|code=
v=pointsDirection[0].sub(pointsDirection[1])          # perpendicular of first > second point
}}

:[[File:Macro Perpendicular To Wire 01.png]]

2:

{{Code|code=
v=pointsDirection[-1].sub(pointsDirection[-2])       # perpendicular of last > before last point
pl.Base = pointsDirection[-1]                        # position base last point
}}

:[[File:Macro Perpendicular To Wire 02.png]]

3:

{{Code|code=
v=pointsDirection[100].sub(pointsDirection[101])   # perpendicular of point 100 > point 101
pl.Base = pointsDirection[100]                     # position base point 100
}}

:[[File:Macro Perpendicular To Wire 03.png]]

4:

{{Code|code=
v=pointsDirection[0].sub(pointsDirection[-1])         # perpendicular of first point > last point
pl.Base = pointsDirection[0]                          # position base first point
}}

:[[File:Macro Perpendicular To Wire 04.png]]

<div class="mw-translate-fuzzy">
per discretizzare gli altri parametri
</div>

{{Code|code=
# Discretizes the edge and returns a list of points.
# Forum thread: https://forum.freecad.org/viewtopic.php?f=12&t=16336#p129468
# The function accepts keywords as argument:
# discretize(Number=n) => gives a list of 'n' equidistant points
# discretize(QuasiNumber=n) => gives a list of 'n' quasi equidistant points (is faster than the method above)
# discretize(Distance=d) => gives a list of equidistant points with distance 'd'
# discretize(Deflection=d) => gives a list of points with a maximum deflection 'd' to the edge
# discretize(QuasiDeflection=d) => gives a list of points with a maximum deflection 'd' to the edge (faster)
# discretize(Angular=a,Curvature=c,[Minimum=m]) => gives a list of points with an angular deflection of 'a'
# and a curvature deflection of 'c'. Optionally a minimum number of points
# can be set which by default is set to 2.
}}

<span id="Example"></span>
== Esempio ==

[[File:Macro Perpendicular To Wire 05.gif]]

[[File:Macro Perpendicular To Wire.gif]]

<div lang="en" dir="ltr" class="mw-content-ltr">
==Discussions==
</div>

La discussione nel forum [[https://forum.freecad.org/viewtopic.php?f=13&t=19899&start=20 Spiralbohrer]]

<span id="Version"></span>
<div class="mw-translate-fuzzy">
==Version==
Ver 00.02 2019-04-06 : Python 3
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Ver 00.03 2020-03-21: Source and comment typo fixes 
Ver 00.02 2019-04-06: Python 3
</div>