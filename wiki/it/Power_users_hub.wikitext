<languages/>
{{TOCright}}
[[Image:Power_user_hub.png|64px]]
----

Questo è il posto per esplorare più a fondo FreeCAD. Qui si può imparare a personalizzazione e estendere FreeCAD secondo le proprie esigenze.

FreeCAD è estendibile con il codice [[Python/it|Python]] che viene eseguito direttamente nella [[Python_console/it|Console Python]] o che viene caricato dai moduli all'avvio. Questo significa che è possibile modificare FreeCAD senza dover ricompilare il programma. Ad esempio, è possibile:
* '''Creare e modificare elementi di geometria''': serve un particolare oggetto (forma o linea speciale) che non è presente nell'installazione di default FreeCAD? Si può facilmente creare un nuovo tipo di oggetto, sia partendo da zero che adattando un tipo di oggetto esistente.
* '''Creare strumenti e comandi personalizzati''': aggiungere un set di strumenti che eseguono il proprio codice.
* '''Modificare l'interfaccia''': creare delle barre degli strumenti per mettere i propri strumenti, creare finestre, pannelli o interfacce speciali per interagire con i propri strumenti.
*'''Modificare il grafo della scena''': per costruire e calcolare la geometria, FreeCAD usa processi diversi da quelli che usa per visualizzare la geometria sullo schermo. Si ha accesso totale al modo in cui i contenuti della scena vengono visualizzati sullo schermo, quindi è possibile modificare tale rappresentazione, interagire con essa, o aggiungere tutti i tipi di comportamenti personalizzati e agli accessori dello schermo, quali, ad esempio, informazioni, opzioni di trascinamento, ancoraggio o entità temporanee.

Se si desidera contribuire con contenuti a queste pagine, richiedere un account wiki con autorizzazioni dell'editor [https://forum.freecad.org/viewtopic.php?f=21&t=6830 nel forum] e leggere le [[WikiPages|WikiPages]] per le linee guida generali da seguire. Per gli altri modi di contribuire al progetto, vedere la pagina [[Help_FreeCAD/it|Contribuire a FreeCAD]].

<span id="Customizing_FreeCAD"></span>
== Personalizzare FreeCAD ==

* [[Interface Customization/it|Personalizzare l'interfaccia]]: Cominciando dall'inizio: le barre degli strumenti e i tasti di scelta rapida
* [[Macros/it|Operare con le Macro]]: Registrare semplicemente le operazioni che vengono ripetute spesso o creare il codice Python
* [[Macros_recipes/it|Esempi di macro]]
* [[Customize_Toolbars/it|Personalizzare la barra degli strumenti]]
* [[Installing_more_workbenches/it|Installare ambienti aggiuntivi]]

<span id="Scripting_in_FreeCAD"></span>
== Script in FreeCAD ==

<span id="General"></span>
===Generale===

* [[Scripting_and_macros/it|Scripting e Macros]] - Un elenco di pagine wiki rilevanti
* [[Introduction_to_Python/it|Introduzione a Python]] - Vedere anche altri tutorial Python in fondo a questa pagina
* [[Python_scripting_tutorial/it|Guida agli script in FreeCAD]] - Uno sguardo generale agli script in Python FreeCAD
* [[FreeCAD_Scripting_Basics/it|Script base in FreeCAD]]: Gli script di base.
* [[Manual:A_gentle_introduction/it|Manuale FreeCAD - Sezione Python Scripting]]: Introduzione in più capitoli agli script Python in FreeCAD
* [[Gui_Command/it|Comandi dell'interfaccia grafica]] : Aggiungere comandi personalizzati alla GUI
* [[Units/it|Unità]]: utilizzare unità miste in FreeCAD
* [[Profiling/it|Profilazione]] del codice Python
* [[Debugging/it#Eliminare errori Python|Debugging]] del codice Python
*[[Python_Development_Environment/it|Python Development Environment]] - Un ambiente di sviluppo semplicistico per Python all'interno di FreeCAD

<span id="Modules"></span>
=== Moduli ===

Le funzionalità di FreeCAD sono suddivise in moduli che trattano tipi specifici di dati e di applicazioni. FreeCAD è composto da moduli built-in e da moduli di estensione (plug-in). Quando i moduli plugin sono installati, sono disponibili come i moduli built-in. I moduli descritti di seguito sono i moduli di default, inclusi in ogni installazione FreeCAD.

* I [[Builtin modules/it|Moduli builtin]] sono i moduli principali di FreeCAD. Essi contengono gli strumenti per manipolare le configurazioni generali di FreeCAD, i documenti e il loro contenuto.
* La pagina [[Workbench creation/it|Creare un Ambiente di lavoro]] spiega come creare un proprio ambiente di lavoro.

<span id="Working_with_Meshes"></span>
====Lavorare con Meshes====

* [[Mesh Scripting/it|Script per Mesh]]: Come interagire con il  [[Mesh Workbench/it|Ambiente Mesh]]

<span id="Working_with_Parts"></span>
====Lavorare con Parts====

* [[Part_Workbench/it|L'ambiente Part]]: Come sono utilizzati gli strumenti e la struttura di [https://en.wikipedia.org/wiki/Open_CASCADE Open CASCADE Technology] in FreeCAD
* [[Topological data scripting/it|Script di dati topologici]]: Come interagire con il Modulo Parte
* [[PythonOCC]] - [[PythonOCC/it|PythonOCC]]: Come utilizzare tutta la potenza di Open CASCADE
* [[Mesh to Part/it|Da Mesh a Parte]]: Conversione tra tipi di oggetti

<span id="Accessing_the_Coin_scenegraph"></span>
====Accedere alla scenografia di Coin====


* [[Scenegraph/it|La grafica di scena di Coin/Inventor]]: Come funziona la rappresentazione della scena in FreeCAD
* [[Pivy/it|Pivy]]: Come accedere alla grafica della scena e come modificarla

<span id="Controlling_the_Qt_interface"></span>
===Controllare l'interfaccia di Qt===

* [[PySide/it|PySide]]: Come accedere alla gestione dell'interfaccia e modificare il suo contenuto
* [[Embedding FreeCADGui|Using the FreeCAD GUI]] - [[Embedding FreeCADGui/it|Utlizzare l'interfaccia grafica utente di FreeCAD]] in una diversa applicazione Qt tramite PyQt

<span id="Working_with_parametric_objects"></span>
===Lavorare con oggetti parametrici===

* [[Scripted_objects/it|Script di oggetti]]: come realizzare oggetti con script Python al 100%.
** [[Scripted_objects_with_attachment/it|Oggetti creati da script con parti associate]]: come rendere gli oggetti creati da script associabili ad altri oggetti.
** [[Scripted_objects_saving_attributes/it|Oggetti creati da script che salvano gli attributi]]: come salvare e ripristinare gli attributi della classe proxy con {{incode|dumps}} e {{incode|loads}}.
** [[Scripted_objects_migration/it|Migrazione di oggetti creati da script]]: come migrare dei vecchi oggetti creati da script in una nuova classe.

<span id="Examples"></span>
===Esempi===

* [[Code snippets/it|Parti di codici]] : Una raccolta di esempi di codice Python di FreeCAD, da utilizzare negli script ...
* [[Line drawing function/it|Funzione per tracciare linee]]: Come costruire un semplice strumento per tracciare linee
* [[Dialog creation/it|Creare finestre di dialogo]]: Come creare finestre di dialogo con Qt designer, e come utilizzarle in FreeCAD
* [[Embedding FreeCAD/it|Incorporare FreeCAD]]: Come importare FreeCAD sotto forma di un modulo Python in altre applicazioni
* L'[[Draft_Workbench/it|Ambiente Draft]] aggiunge a FreeCAD funzioni base di disegno 2D. E 'scritto interamente in Python, e costituisce un valido esempio per scrivere moduli personali.
* [[FreeCAD vector math library]] - [[FreeCAD vector math library/it|Libreria di matematica vettoriale di FreeCAD]] : Un paio di funzioni utili per manipolare i vettori in FreeCAD. Questa libreria è inclusa anche nel modulo Draft.

<span id="API_Functions"></span>
== Funzioni API ==

La documentazione completa di FreeCAD si trova in https://freecad.org/api/ . Essa contiene le API C++ e Python, e non è ancora del tutto formattata, il che può essere fonte di confusione quando si cerca solo il codice Python. Una versione delle API più facile da esplorare si trova [[:Category:API|in questa pagina in inglese]] e [[:Category:API/it|in questa in italiano]]. Ricordare che può essere incompleta in quanto viene aggiornata manualmente. Per informazioni più accurate, esplorare i moduli direttamente dalla console di FreeCAD.

Relazionato: [[Exposing_C%2B%2B_to_Python|Exposing C++ to Python]]

<span id="Advanced_modification"></span>
== Modifiche avanzate ==

* [[Start_up_and_Configuration/it|Avvio e configurazione]]: Avvio e opzioni della riga di comando
* [[Install_on_Windows/it|Installare in Windows]]: Utlizzando l'installatore di Windows
* [[Compile_on_Windows/it|Compilare FreeCAD in Windows]] e [[Compile_on_Linux/it|Compilare FreeCAD in Linux]]
* [[Branding/it|Marchiare e Personalizzare]]: Semplici modifiche che si possono apportare al codice sorgente per modificare alcuni aspetti del FreeCAD
* [[Extra_python_modules/it|Moduli extra in Python]] : Potenzia l'interprete di Python in FreeCAD con questi moduli aggiuntivi!

<span id="Python_tutorials"></span>
== Guide di Python ==

Questi sono buoni tutorial generici, non specifici per FreeCAD, che possono interessare chi è totalmente nuovo a Python.

'''Python'''
* [https://docs.python.org/3/tutorial/index.html Official python tutorial] - Una guida molto completa per scoprire Python
* [https://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_3 Non-programmer tutorial per Python] - Un eccellente wiki
* [http://npt.cc.rsu.ru/user/wanderer/ODP/Python_for_Newbies.htm Python per novizi] - Un grande manuale che si occupa di tutti i concetti base

'''PySide''' - Come creare e gestire l'interfaccia Qt di FreeCAD con Python
* [http://zetcode.com/gui/pysidetutorial/ PySide tutorial] : Una piattaforma che funge da tutorial mostrando esempi sull'uso di PySide
* [http://www.pythoncentral.io/series/python-pyside-pyqt-tutorial/ PySide/PyQt tutorial] : Un tutorial di facile lettura con esempi che riguardano PySide e PyQt
* [http://qt-project.org/wiki/PySideDocumentation PySide documentation] : dal Progetto Qt
* [http://qt-project.org/wiki/QtCreator_and_PySide Using QtCreator in PySide] : anche dal Progetto Qt
* [http://srinikom.github.io/pyside-docs/index.html PySide reference] : infiniti dettagli sulle minuzie di PySide e Qt, una fonte di riferimento attendibile
* [http://nullege.com/codes/search?cq=PySide PySide code snippets] : un ricercato database di parti di codice di PySide

I seguenti sono due riferimenti specifici di PyQt (non di PySide) che possono offrire alcune informazioni sul suo utilizzo:
* [http://www.cs.usfca.edu/~afedosov/qttut/ Tutorial base di PyQt] : Un semplice e breve tutorial basato su Linux che spiega come lavorare con PyQt e Qt Designer
* [http://vizzzion.org/?id=pyqt Programmare Applicazioni Qt in Python] : Un tutorial molto approfondito che copre tutti i processi di lavoro con Qt e Python.

'''Pivy''' - Come interagire con le scene 3D di FreeCAD
* [http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.108.947&rep=rep1&type=pdf Pivy - Embedding a Dynamic Scripting Language into a Scene Graph Library] : Tesi che illustra  Pivy nel dettaglio
* [http://ftp.ntua.gr/mirror/python/pycon/dc2004/papers/47/ High Level 3D Graphics Programming in Python] : esempio Pivy  da Pycon 2004
* [https://www.semanticscholar.org/paper/Integrating-Pivy-into-Studierstube-4.2-Gruber/08c9a89c8326c87f81c2d83428029fbfb6c2ae64 Introducing Pivy into studierstube] [https://www.researchgate.net/publication/228737136_Integrating_Pivy_into_Studierstube_42 (Mirror)] : Uno scritto che non è un vero tutorial, ma illustra bene come Pivy funziona (richiede un account accademico)

<span id="Community_projects"></span>
== Progetti della comunità == 

Nel [[FreeCAD Community Portal/it|Portale della comunità]], è possibile trovare altri progetti basati su FreeCAD e gestiti dalla comunità degli utenti di FreeCAD. Quando si avvia un nuovo progetto con FreeCAD, ricordarsi  di riferirlo nel Portale!

È anche disponibile una pagina dove è descritto come [[Help FreeCAD/it|Contribuire a FreeCAD]].


{{Powerdocnavi{{#translation:}}}}
[[Category:Hubs{{#translation:}}]]