<languages/>
<translate>

<!--T:19-->
{{Docnav
|[[Draft_Label|Label]]
|[[Draft_Move|Move]]
|[[Draft_Workbench|Draft]]
|IconL=Draft_Label.svg 
|IconR=Draft_Move.svg 
|IconC=Workbench_Draft.svg
}}

<!--T:1-->
{{GuiCommand
|Name=Draft AnnotationStyleEditor
|MenuLocation=Annotation → Annotation Styles<br>Manage → Annotation Styles
|Workbenches=[[Draft_Workbench|Draft]], [[BIM_Workbench|BIM]]
|SeeAlso=[[Draft_Text|Draft Text]], [[Draft_Label|Draft Label]], [[Draft_Dimension|Draft Dimension]]
|Version=0.19
}}

==Description== <!--T:2-->

<!--T:3-->
The [[Image:Draft_AnnotationStyleEditor.svg|24px]] '''Draft AnnotationStyleEditor''' command allows you to define styles that affect the visual properties of annotation-like objects, such as those create by the [[Draft_Text|Draft Text]], [[Draft_Dimension|Draft Dimension]] and [[Draft_Label|Draft Label]] commands.

</translate>
[[File:Draft_AnnotationStyleEditor_Dialog.png]]
<translate>
<!--T:4-->
{{Caption|The Annotation Styles Editor dialog box (version 1.1 layout)}}

== Usage == <!--T:5-->

<!--T:6-->
# There are several ways to invoke the command:
#* [[Draft_Workbench|Draft]]: Press the {{Button|[[Image:Draft_AnnotationStyleEditor.svg|16px]] [[Draft_AnnotationStyleEditor|Annotation Styles]]}} button.
#* Draft: Select the {{MenuCommand|Annotation → [[Image:Draft_AnnotationStyleEditor.svg|16px]] Annotation Styles}} option from the menu.
#* [[BIM_Workbench|BIM]]: Select the {{MenuCommand|Manage → [[Image:Draft_AnnotationStyleEditor.svg|16px]] Annotation Styles}} option from the menu.
# The {{MenuCommand|Annotation Styles Editor}} dialog box opens.
# Select a style from the {{MenuCommand|Style Name}} dropdown list, or choose {{Value|Add new...}} to define a new style.
# Optionally adjust the properties of the style.
# Optionally press the {{Button|[[File:Accessories-text-editor.svg|16px]] Rename}} button to rename the style.
# Optionally press the {{Button|[[File:Edit_Cancel.svg|16px]] Delete}} button to delete the style.
# Optionally press the {{Button|[[File:Std_Import.svg|16px]]}} button to import all styles from a {{FileName|.json}} file. This will overwrite existing styles with the same name.
# Optionally press the {{Button|[[File:Std_Export.svg|16px]]}} button to export all styles to a {{FileName|.json}} file.
# Press the {{Button|OK}} button to close the dialog box and finish the command.

== Apply == <!--T:27-->

<!--T:31-->
To apply an annotation style change the {{PropertyView|Annotation Style}} property of annotation objects. This property can be found on the {{MenuCommand|View}} tab of the [[Property_View|Property View]].

</translate>
[[File:Draft_AnnotationStyleEditor_Apply.png]]
<translate>
<!--T:30-->
{{Caption|Selecting an annotation style}}

== Scripting == <!--T:8-->

<!--T:21-->
See also: [https://freecad.github.io/SourceDoc/ Autogenerated API documentation] and [[FreeCAD Scripting Basics|FreeCAD Scripting Basics]].

<!--T:9-->
The annotation styles are saved as serialized dictionaries in the {{incode|Meta}} attribute of the document. This attribute is inspected by the annotation style editor when it is opened.

<!--T:10-->
Each style that appears in the editor is internally saved with the style name prefixed by {{incode|Draft_Style_}}. This will prevent name clashes with other keys that may be saved in {{incode|Meta}}, which can hold arbitrary information.

<!--T:11-->
You may define any new style by adding the necessary information to a key that starts with {{incode|Draft_Style_}}. The corresponding value of this key must be a dictionary serialized using {{incode|json}}.

</translate>
{{Code|code=
import json

meta = App.ActiveDocument.Meta
props = {"ArrowSizeStart": 7.0, "ArrowSizeEnd": 7.0, "LineWidth": 6}
meta["Draft_Style_Thick lines"] = json.dumps(props)
App.ActiveDocument.Meta = meta
}}
<translate>

<!--T:12-->
The properties not entered will be filled automatically when this style is selected in the style editor and the {{Button|OK}} button is pressed.

<!--T:13-->
In a similar way, any serialized dictionary can be unpacked for edition.

</translate>
{{Code|code=
import json

meta = App.ActiveDocument.Meta
props = json.loads(meta["Draft_Style_Text red"])
}}
<translate>

Where {{Incode|props}} may have this value:

</translate>
{{Code|code=
{"ArrowSizeStart": 2.0, "ArrowSizeEnd": 2.0, "ArrowTypeStart": 0, "ArrowTypeEnd": 0, "Decimals": 2, "DimOvershoot": 4.0, "ExtLines": 0.0, "ExtOvershoot": 4.0, "FontName": "DejaVu Sans", "FontSize": 10.0, "LineColor": 255, "LineSpacing": 1.0, "LineWidth": 2, "ScaleMultiplier": 1.0, "ShowLine": True, "ShowUnit": False, "TextColor": 4278190335, "TextSpacing": 3.0, "UnitOverride": ""}
}}
<translate>

<!--T:24-->
The properties must have the following types:

<!--T:15-->
Strings:

</translate>
{{Code|code=
props = {
    "FontName": "DejaVu Sans",
    "UnitOverride": ""
}
}}
<translate>

<!--T:25-->
Floats (must be supplied with a decimal point):

</translate>
{{Code|code=
props = {
    "ArrowSizeStart": 2.0,
    "ArrowSizeEnd": 2.0,
    "DimOvershoot": 4.0,
    "ExtLines": 0.0,
    "ExtOvershoot": 4.0
    "FontSize": 10.0,
    "LineSpacing": 1.0,
    "ScaleMultiplier": 1.0,
    "TextSpacing": 3.0
}
}}
<translate>

<!--T:26-->
Integers:

</translate>
{{Code|code=
props = {
    "ArrowTypeStart": 0,
    "ArrowTypeEnd": 0,
    "Decimals": 2,
    "LineColor": 255,
    "LineWidth": 2,
    "TextColor": 4278190335
}
}}
<translate>

<!--T:17-->
{{Incode|ArrowTypeStart}} and {{Incode|ArrowTypeEnd}} are enumerators. {{Incode|LineColor}} and {{Incode|TextColor}} correspond to 32-bit integers, from which the individual RGBA values can be extracted.

<!--T:18-->
Booleans:

</translate>
{{Code|code=
props = {
    "ShowLine": True,
    "ShowUnit": False
}
}}
<translate>


<!--T:20-->
{{Docnav
|[[Draft_Label|Label]]
|[[Draft_Move|Move]]
|[[Draft_Workbench|Draft]]
|IconL=Draft_Label.svg 
|IconR=Draft_Move.svg 
|IconC=Workbench_Draft.svg
}}

</translate>
{{Draft Tools navi{{#translation:}}}}
{{Userdocnavi{{#translation:}}}}