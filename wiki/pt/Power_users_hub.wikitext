<languages/>
{{TOCright}}
[[Image:Power_user_hub.png|64px]]
----

Este é o local ideal para você, se for um usuário experiente e deseja aprender mais sobre como personalizar e expandir o FreeCAD.

O FreeCAD é extensível por meio de código [[Python/pt-br|Python]] que é executado diretamente no [[Python_console/pt-br|console Python]], ou carregado a partir de módulos na inicialização. Isso significa que você pode modificar o FreeCAD sem precisar recompilar o programa. Por exemplo, você pode:

* '''Criar e modificar geometria''': você pode criar um novo tipo de objeto, seja do zero ou adaptando um tipo existente.
* '''Criar ferramentas e comandos personalizados''': adicione seu próprio conjunto de ferramentas que executam seu código.
* '''Modificar a interface''': crie barras de ferramentas para adicionar suas ferramentas, crie janelas especiais, painéis ou interfaces para interagir com suas ferramentas.
* '''Modificar a representação do scenegraph''': O FreeCAD possui processos separados para construir a geometria e exibi-la na tela. Você tem acesso total à maneira como o conteúdo da cena é exibido, portanto, pode modificar essa representação, interagir com ela ou adicionar comportamentos personalizados. Também é possível adicionar widgets de tela personalizados, como informações, manipuladores, âncoras ou entidades temporárias.

Se quiser contribuir com conteúdo para estas páginas, solicite uma conta wiki com permissões de editor [https://forum.freecad.org/viewtopic.php?f=21&t=6830 no fórum] e leia as [[WikiPages|WikiPages]] para obter as directrizes gerais que deve seguir. Para outras formas de contribuir para o projeto, consulte a página [[Help_FreeCAD|Ajuda do FreeCAD]].

<span id="Customizing_FreeCAD"></span>
== Customizando o FreeCAD ==

* [[Personalização da Interface|Personalização da Interface]]: Começar pelo princípio: Barras de ferramentas e atalhos
* [[Macros|Trabalhar com Macros]]: Grava facilmente tarefas repetidas com frequência ou código Python
* [[Macros_recipes|Receitas de Macros]]
* [[Customize_Toolbars|Personalizar Barras de Ferramentas]]
* [[Installing_more_workbenches|Installing more workbenches]]

<span id="Scripting_in_FreeCAD"></span>
== Scripting no FreeCAD ==

<span id="General"></span>
===Geral===

* [[Scripting_and_macros|Scripting e Macros]] - Uma lista de páginas wiki relevantes
* [[Introduction_to_Python|Introdução ao Python]] - Veja também outros tutoriais de Python no final desta página
* [[Python_scripting_tutorial|Tutorial de script do FreeCAD]] - Uma visão geral do script em Python no FreeCAD
* [[FreeCAD_Scripting_Basics|Noções básicas de script no FreeCAD]]: Bem, o básico
* [[Manual:A_gentle_introduction|Manual do FreeCAD - Secção Script em Python]]: Introdução em vários capítulos ao script em Python no FreeCAD
* [[Gui_Command|Comando GUI]]: Adicionar comandos personalizados à interface gráfica
* Utilização de [[Unidades|Unidades]] mistas no FreeCAD
* [[Profiling|Criando perfil]] o código Python
* [[Debugging#DebuggingPython|Debug]] o código Python código
*[[Python_Development_Environment|Ambiente de Desenvolvimento Python]] - Um ambiente de desenvolvimento simplificado para Python dentro do FreeCAD

<span id="Modules"></span>
=== Modulos ===

A funcionalidade do FreeCAD está dividida em Módulos, que lidam com tipos de dados e aplicações especiais. O FreeCAD possui módulos integrados e Módulos de Extensão (plug-ins). Após a instalação dos módulos plugin, estes ficam disponíveis para si com a mesma facilidade dos módulos integrados. Os módulos descritos abaixo são os módulos standard, incluídos em todas as instalações do FreeCAD.

* Os [[Módulos integrados|Módulos integrados]] são os principais módulos do FreeCAD. Eles contêm ferramentas para manipular as definições gerais do FreeCAD, documentos e os seus conteúdos.
* [[Criação de bancada|Criação de bancada]] mostra como criar a sua própria bancada

<span id="Working_with_Meshes"></span>
====Trabalhando com Malhas====

* [[Mesh Scripting|Mesh Scripting]]: Como interagir com o [[Mesh_Workbench|Mesh Workbench]]

<span id="Working_with_Parts"></span>
====Trabalhando com peças====

* [[Part_Workbench| Part Workbench]]: Como as ferramentas e a estrutura da [https://en.wikipedia.org/wiki/Open_CASCADE Open CASCADE Technology] são utilizadas no FreeCAD
* [[Topological data scripting|Scripting de dados topológicos]]: Como interagir com o Módulo Parts
* [[PythonOCC|PythonOCC]]: Como libertar todo o poder do Open CASCADE
* [[Mesh to Part|Malha para Peça]]: Conversão entre tipos de objetos

<span id="Accessing_the_Coin_scenegraph"></span>
====Aceder ao gráfico de cena da moeda====

* [[Scenegraph|The Coin/Inventor Scenegraph]]: Como funciona a representação de cenas do FreeCAD
* [[Pivy|Pivy]]: Como aceder e modificar o Scenegraph

<div lang="en" dir="ltr" class="mw-content-ltr">
===Controlling the Qt interface===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* [[PySide|PySide]]: How to access the interface, and modify its contents
* [[Embedding FreeCADGui|Using the FreeCAD GUI]] in another Qt application with PyQt
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
===Working with parametric objects===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* [[Scripted_objects|Scripted objects]]: how to make 100% Python-scripted objects.
** [[Scripted_objects_with_attachment|Scripted objects with attachment]]: how to make scripted objects attachable to other objects.
** [[Scripted_objects_saving_attributes|Scripted objects saving attributes]]: how to save and restore attributes of the proxy class with {{incode|dumps}} and {{incode|loads}}.
** [[Scripted_objects_migration|Scripted objects migration]]: how to migrate old scripted objects to a new class.
</div>

<span id="Examples"></span>
===Exemplos===

<div lang="en" dir="ltr" class="mw-content-ltr">
* [[Code snippets|Code snippets]] : A collection of pieces of FreeCAD Python code, to serve as ingredients in your scripts...
* [[Line drawing function|Line drawing function]]: How to build a simple tool to draw lines
* [[Dialog creation|Dialog creation]]: How to construct dialogs with Qt designer, and use them in FreeCAD
* [[Embedding FreeCAD|Embedding FreeCAD]]: How to import FreeCAD as a Python module in other applications
* The [[Draft_Workbench|Draft Workbench]] adds basic 2d drawing functions to freecad. It is written entirely in Python, so it can be a good example if you want to write your own modules.
* [[FreeCAD vector math library|FreeCAD vector math library]] : A couple of handy functions to manipulate FreeCAD vectors. This library is also included in the Draft module.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== API Functions ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The complete API documentation of FreeCAD is located at https://freecad.org/api/ . It contains both C++ and Python APIs, and is not totally well formatted yet, which can be confusing when looking for python-only code. An easier to browse version can be found [[:Category:API|here]]. Note that it can be incomplete, since it is updated manually. For more accurate information, browse the modules directly from FreeCAD's Python console.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Related: [[Exposing_C%2B%2B_to_Python|Exposing C++ to Python]]
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Advanced modification ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* [[Start_up_and_Configuration|Start up and Configuration]]: Startup and command line options
* [[Installing_on_Windows|Installing on Windows]]: Using the windows installer
* [[Compile_on_Windows|Compiling FreeCAD on Windows]] and [[Compile_on_Linux|Compiling FreeCAD on Linux]]
* [[Branding|Branding]]: Simple modifications you can do to the source code to change some aspects of FreeCAD
* [[Extra_python_modules|Extra python modules]] : Extend the FreeCAD python interpreter with these powerful modules!
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Python tutorials ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
These are good generic tutorials, not specific to FreeCAD, that might interest you if you are totally new to python.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
'''Python'''
* [https://docs.python.org/3/tutorial/index.html Official python tutorial] - A very complete tutorial for discovering python
* [https://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_3 Non-programmer tutorial for python] - an excellent wikibook
* [http://npt.cc.rsu.ru/user/wanderer/ODP/Python_for_Newbies.htm Python for newbies] - one big tutorial covering all the basics
</div>

'''PySide''' - Como criar e gerir a interface Qt UI do FreeCAD em Python
* [http://zetcode.com/gui/pysidetutorial/ Tutorial do PySide]: Um tutorial independente da plataforma que mostra a utilização do PySide com exemplos
* [http://www.pythoncentral.io/series/python-pyside-pyqt-tutorial/ Tutorial do PySide/PyQt]: Um tutorial de fácil leitura que aborda o PySide e o PyQt com exemplos
* [http://qt-project.org/wiki/PySideDocumentation Documentação do PySide]: do Qt Project (os mesmos autores)
* [http://qt-project.org/wiki/QtCreator_and_PySide Usando o QtCreator no PySide]: também do Qt Project
* [http://srinikom.github.io/pyside-docs/index.html PySide Reference]: Detalhes infinitos sobre os detalhes do PySide e do Qt, uma fonte de referência fiável
* [http://nullege.com/codes/search?cq=PySide Fragmentos de código do PySide]: uma base de dados pesquisável de fragmentos de código do PySide

As duas referências seguintes são específicas para PyQt (não para PySide), mas podem oferecer algumas informações úteis:
* [http://www.cs.usfca.edu/~afedosov/qttut/ PyQt basic tutorial]: Um tutorial simples e curto baseado em Linux que explicará como trabalhar com PyQt e Qt Designer
* [http://vizzzion.org/?id=pyqt Programação de aplicações Qt em Python]: Um tutorial mais aprofundado que abrange todo o processo de trabalho com QT e Python

'''Pivy''' - Como interagir com cenas 3D do FreeCAD
* [http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.108.947&rep=rep1&type=pdf Pivy - Incorporando uma Linguagem de Script Dinâmico numa Biblioteca de Gráficos de Cena]: Tese que explica o Pivy em detalhe
* [http://ftp.ntua.gr/mirror/python/pycon/dc2004/papers/47/ Programação de Gráficos 3D de Alto Nível em Python]: Exemplo de Pivy do Pycon 2004
* [https://www.semanticscholar.org/paper/Integrating-Pivy-into-Studierstube-4.2-Gruber/08c9a89c8326c87f81c2d83428029fbfb6c2ae64 Apresentando o Pivy ao studierstube] [https://www.researchgate.net/publication/228737136_Integrating_Pivy_into_Studierstube_42 (Mirror)]: Um artigo que não é propriamente um tutorial, mas que ilustra bem o funcionamento do Pivy (requer uma conta académica)

<span id="Community_projects"></span>
==Projetos comunitários== 

No [[Portal da Comunidade FreeCAD|Portal da Comunidade]], você pode encontrar outros projetos baseados no FreeCAD, geridos pela comunidade de utilizadores do FreeCAD. Se estiver a iniciar um novo projeto no FreeCAD, não deixe de o listar lá! Temos também uma página com dicas para si se quiser [[Ajudar o FreeCAD|Ajudar o FreeCAD]].


{{Powerdocnavi{{#translation:}}}}
[[Category:Hubs{{#translation:}}]]