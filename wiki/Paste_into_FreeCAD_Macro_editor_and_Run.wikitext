Paste into FreeCAD Macro editor and Run
# Tested with FreeCAD 0.20+ (should work on 0.19 also)

import os
import FreeCAD, Part, Mesh
from FreeCAD import Base

doc = FreeCAD.newDocument("SandHopper_28m3")

# ---------- PARAMETERS (edit these to match your GA precisely) ----------
output_dir = os.path.expanduser("~/SandHopper_Output")  # change if you want
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

units = "mm"

# Main hopper geometry (defaults based on GA approximate callouts)
shell_outer_dia = 3200.0        # outer diameter of cylindrical shell (mm)
shell_height = 2273.6           # cylindrical shell height (mm)
cone_top_dia = shell_outer_dia
cone_bottom_dia = 800.0         # outlet diameter of cone (mm)
cone_height = 1997.0            # cone vertical height (mm)
shell_thickness = 4.0           # shell plate thickness (mm)
cone_thickness = 4.0            # cone plate thickness (mm)

# Legs / frame (approx from GA - adjust as required)
leg_count = 4
leg_offset_radius = 1268.0 / 2  # C/C to leg center from centerline (example)
leg_section_width = 150.0
leg_section_depth = 75.0
leg_height = shell_height + cone_height  # total from top flange to base
base_plate_thk = 12.0
base_plate_size = 300.0

# Flange (discharge) (example)
flange_outer_dia = 323.9
flange_thk = 16.0
flange_bolt_dia = 14.0
flange_bolt_count = 8
flange_bolt_pitch_dia = 1218.0 / 10.0  # placeholder, adjust

# Color definitions (R,G,B,alpha 0..1)
color_hopper = (0.6, 0.8, 1.0, 0.9)     # light blue
color_frame = (0.6, 0.6, 0.6, 0.9)      # grey
color_access = (1.0, 0.9, 0.2, 0.95)    # yellow

# Filename prefixes
assembly_name = "SandHopper_28m3_Assembly"
# ---------------------------------------------------------------------

def make_cylinder(name, dia, height, thickness, color):
    """Create a hollow cylinder (shell)"""
    r_out = dia/2.0
    r_in = r_out - thickness
    outer = Part.makeCylinder(r_out, height, Base.Vector(0,0,-height/2.0))
    inner = Part.makeCylinder(r_in, height+2, Base.Vector(0,0,-height/2.0 -1.0))
    shell = outer.cut(inner)
    shell_obj = doc.addObject("Part::Feature", name)
    shell_obj.Shape = shell
    shell_obj.ViewObject.ShapeColor = color[:3]
    return shell_obj

def make_cone_frustum(name, top_dia, bottom_dia, height, thickness, color):
    # create outer frustum and inner frustum then subtract to get shell
    r1 = top_dia/2.0
    r2 = bottom_dia/2.0
    outer = Part.makeCone(r1, r2, height, Base.Vector(0,0,-height/2.0))
    inner = Part.makeCone(r1 - thickness, r2 - thickness, height+2, Base.Vector(0,0,-height/2.0 -1.0))
    cone_shell = outer.cut(inner)
    obj = doc.addObject("Part::Feature", name)
    obj.Shape = cone_shell
    obj.ViewObject.ShapeColor = color[:3]
    return obj

def make_leg(name, x, y, width, depth, height, color):
    box = Part.makeBox(width, depth, height, Base.Vector(x - width/2.0, y - depth/2.0, -height/2.0))
    leg = doc.addObject("Part::Feature", name)
    leg.Shape = box
    leg.ViewObject.ShapeColor = color[:3]
    return leg

def make_base_plate(name, x, y, size, thk, color):
    plate = Part.makeBox(size, size, thk, Base.Vector(x - size/2.0, y - size/2.0, -thk/2.0 - leg_height/2.0))
    obj = doc.addObject("Part::Feature", name)
    obj.Shape = plate
    obj.ViewObject.ShapeColor = color[:3]
    return obj

def make_flange_with_holes(name, center_z, outer_d, thk, bolt_count, bolt_dia, pitch_dia, color):
    # flange: simple disc with hole pattern (bolt holes only)
    outer = Part.makeCylinder(outer_d/2.0, thk, Base.Vector(0,0, center_z))
    # hub/pipe stub (small)
    hub = Part.makeCylinder(outer_d/4.0, thk+10, Base.Vector(0,0,center_z-5))
    flange = outer.fuse(hub)
    # create bolt holes (subtract)
    import math
    holes = []
    for i in range(bolt_count):
        ang = 2*math.pi*i/bolt_count
        hx = (pitch_dia/2.0) * math.cos(ang)
        hy = (pitch_dia/2.0) * math.sin(ang)
        hole = Part.makeCylinder(bolt_dia/2.0, thk+20, Base.Vector(hx, hy, center_z-10))