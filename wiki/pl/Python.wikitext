<languages/>
{{TOCright}}

<span id="Description"></span>
== Opis ==

[https://www.python.org Python] to wysokopoziomowy język programowania ogólnego przeznaczenia, który jest bardzo powszechnie wykorzystywany w dużych aplikacjach do automatyzacji pewnych zadań poprzez tworzenie skryptów lub [[macros/pl|makr]].

We FreeCAD, kod Pythona może być stosowany do tworzenia różnych elementów programowo, bez potrzeby klikania w interfejsie graficznym użytkownika. Ponadto, wiele narzędzi i środowisk pracy we FreeCAD jest zaprogramowanych w Pythonie.

Zobacz stronę [[Introduction_to_Python/pl|Wprowadzenie do Pythona]], aby zapoznać się z językiem programowania Python, a następnie sprawdź [[Python_scripting_tutorial/pl|Poradnik pisania skryptów w Pythonie]] oraz [[FreeCA_Scripting_Basics/pl|Podstawy tworzenia skryptów we FreeCAD]], aby rozpocząć tworzenie skryptów we FreeCAD.

<span id="Readability"></span>
== Czytelność ==

Czytelność kodu w Pythonie jest jednym z najważniejszych aspektów tego języka. Stosowanie jasnego i spójnego stylu w społeczności Pythona ułatwia wkład różnych programistów, ponieważ większość doświadczonych programistów Pythona oczekuje, że kod będzie sformatowany w określony sposób i będzie przestrzegał określonych zasad. Podczas pisania kodu w Pythonie zaleca się stosowanie do dokumentu [https://www.python.org/dev/peps/pep-0008/ PEP8: Style Guide for Python Code] oraz [https://www.python.org/dev/peps/pep-0257/ PEP257: Docstring Conventions].

Te dokumenty zawierają wyjaśnienia w bardziej przyjaznej dla użytkownika formie:
* [https://realpython.com/python-pep8/ How to Write Beautiful Python Code With PEP 8]
* [https://realpython.com/documenting-python-code/ Documenting Python Code: A Complete Guide].

== Konwencje ==
W tej dokumentacji należy stosować się do niektórych konwencji dotyczących przykładów w Pythonie.

To jest typowa sygnatura funkcji

{{Code|code=
Wire = make_wire(pointslist, closed=False, placement=None, face=None, support=None)
}}

* Argumenty w postaci par klucz-wartość są opcjonalne, a wartość domyślna jest podana w sygnaturze. Oznacza to, że następujące wywołania są równoważne:

{{Code|code=
Wire = make_wire(pointslist, False, None, None, None)
Wire = make_wire(pointslist, False, None, None)
Wire = make_wire(pointslist, False, None)
Wire = make_wire(pointslist, False)
Wire = make_wire(pointslist)
}}

: In this example the first argument doesn't have a default value so it should always be included.

* When the arguments are given with the explicit key, the optional arguments can be given in any order. This means that the following calls are equivalent:
{{Code|code=
Wire = make_wire(pointslist, closed=False, placement=None, face=None)
Wire = make_wire(pointslist, closed=False, face=None, placement=None)
Wire = make_wire(pointslist, placement=None, closed=False, face=None)
Wire = make_wire(pointslist, support=None, closed=False, placement=None, face=None)
}}

* Python's guidelines stress readability of code; in particular, parentheses should immediately follow the function name, and a space should follow a comma.

{{Code|code=
p1 = Vector(0, 0, 0)
p2 = Vector(1, 1, 0)
p3 = Vector(2, 0, 0)
Wire = make_wire([p1, p2, p3], closed=True)
}}

* If code needs to be broken over several lines, this should be done at a comma inside brackets or parentheses; the second line should be aligned with the previous one.

{{Code|code=
a_list = [1, 2, 3,
          2, 4, 5]

Wire = make_wire(pointslist,
                False, None,
                None, None)
}}

* Functions may return an object that can be used as the base of another drawing function.
{{Code|code=
Wire = make_wire(pointslist, closed=True, face=True)
Window = make_window(Wire, name="Big window")
}}

== Imports ==

Python functions are stored in files called modules. Before using any function in that module, the module must be included in the document with the {{incode|import}} instruction.

This creates prefixed functions, that is, {{incode|module.function()}}. This system prevents name clashes with functions that are named the same but that come from different modules.
For example, the two functions {{incode|Arch.make_window()}} and {{incode|myModule.make_window()}} may coexist without problem.

Full examples should include the necessary imports and the prefixed functions.

{{Code|code=
import FreeCAD as App
import Draft

p1 = App.Vector(0, 0, 0)
p2 = App.Vector(1, 1, 0)
p3 = App.Vector(2, 0, 0)
Wire = Draft.make_wire([p1, p2, p3], closed=True)
}}

{{Code|code=
import FreeCAD as App
import Draft
import Arch

p1 = App.Vector(0, 0, 0)
p2 = App.Vector(1, 0, 0)
p3 = App.Vector(1, 1, 0)
p4 = App.Vector(0, 2, 0)
pointslist = [p1, p2, p3, p4]

Wire = Draft.make_wire(pointslist, closed=True, face=True)
Structure = Arch.make_structure(Wire, name="Big pillar")
}}

{{Powerdocnavi{{#translation:}}}}
[[Category:Developer Documentation{{#translation:}}]]
[[Category:API{{#translation:}}]]
[[Category:Python Code{{#translation:}}]]
[[Category:Glossary{{#translation:}}]]