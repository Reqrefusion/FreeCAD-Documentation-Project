<languages/>

Wielkość jest połączeniem liczby zmiennoprzecinkowej i jednostki. Jest używana wszędzie we FreeCAD do obsługi parametrów i wszelkich innych danych wejściowych/wyjściowych. 

<span id="General"></span>
==Informacje ogólne==

W systemie CAD lub CAE bardzo ważne jest śledzenie jednostki danej wartości. Wiele problemów może pojawić się przy pomyleniu jednostek lub obliczaniu wyników w różnych systemach jednostek. Jedną z najsłynniejszych katastrof jest [https://pl.wikipedia.org/wiki/Mars_Climate_Orbiter#Utrata_sondy katastrofa sondy Mars Climate Orbiter] spowodowana pomyłką w jednostkach. Nawet w tym samym systemie jednostek istnieje wiele ich odmian, zawsze dostosowanych do obszaru zastosowania. Proste przykłady to np. prędkość w km/h (samochody), m/s (robotyka) czy mm/min (frezowanie). System CAD musi niezawodnie śledzić jednostki. Musi także wykonywać z nimi obliczenia i sprawdzać poprawność jednostki dla szczególnych parametrów. 

Z tego powodu powstała struktura jednostek we FreeCAD. Zawiera ona cały kod i obiekty potrzebne do obsługi jednostek, obliczeń z jednostkami, wprowadzania danych przez użytkownika, konwersji do innych systemów jednostek oraz estetycznego wyświetlania jednostek i wartości. W dłuższej perspektywie żaden parametr we FreeCAD nie powinien być jedynie liczbą. 

<span id="Supported_units"></span>
===Obsługiwane jednostki=== 

Parser danych wejściowych we FreeCAD obsługuje wiele jednostek i systemów jednostek. FreeCAD obsługuje grecką literę „µ” oznaczającą mikro, ale akceptuje także „u” jako zamiennik.
Pełną listę wszystkich obsługiwanych jednostek można znaleźć [[Expressions/pl#Jednostki|tutaj]].

Szczegółowe specyfikacje, które można znaleźć w kodzie:
* [https://github.com/FreeCAD/FreeCAD/blob/main/src/Base/QuantityLexer.c Lexer wielkości]  
* [https://github.com/FreeCAD/FreeCAD/blob/main/src/Base/Quantity.cpp#l167 Definicje wielkości]

<span id="Internal_representation"></span>
== Wewnętrzna reprezentacja ==

Wszystkie jednostki fizyczne można wyrazić jako połączenie siedmiu [https://pl.wikipedia.org/wiki/Uk%C5%82ad_SI jednostek SI]:

[[File:SI-Derived-Units.jpg|750px]]

Prostym sposobem wyrażenia jednostki jest tablica liczb całkowitych o rozmiarze 7 (liczba jednostek bazowych), która definiuje czym jest jednostka. 
Sygnatury 7 jednostek bazowych to:
* DŁUGOŚĆ: [1,0,0,0,0,0,0]
* MASA: [0,1,0,0,0,0,0]
* CZAS: [0,0,1,0,0,0,0]
* PRĄD ELEKTRYCZNY: [0,0,0,1,0,0,0]
* TEMPERATURA TERMODYNAMICZNA: [0,0,0,0,1,0,0]
* ILOŚĆ SUBSTANCJI: [0,0,0,0,0,1,0]
* NATĘŻENIE ŚWIATŁA: [0,0,0,0,0,0,1]

Z tych 7 jednostek jesteśmy w stanie wyrazić wszystkie jednostki pochodne zdefiniowane w [http://physics.nist.gov/cuu/pdf/sp811.pdf Przewodniku dotyczącym stosowania międzynarodowego systemu jednostek ''(SI)''] i w razie potrzeby stworzyć nowe, takie jak np:
* GĘSTOŚĆ MASY: [-3,1,0,0,0,0,0]
* POLE POWIERZCHNI: [0,2,0,0,0,0,0]

Ponieważ kąt jest fizycznie bezwymiarowy, ale istotny dla systemu CAD, dodajemy jeszcze jedną wirtualną jednostkę dla Kąta. To tworzy wektor 8 w sygnaturze jednostek FreeCAD.

<span id="Units_calculator"></span>
== Kalkulator jednostek ==

<div lang="en" dir="ltr" class="mw-content-ltr">
Often you are in need of converting values from one system of units to another. For example you have old parameter tables with wired units. In these cases FreeCAD offers a conversion tool called Units-Calculator which helps in translating units.
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
Its description in detail is here: [[Std_UnitsCalculator|Std_UnitsCalculator]]
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== InputField ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The InputField is a QLineEdit derived Qt widget to handle all kinds of user interaction with quantities and parameters. It features the following properties:
* parsing arbitrary value/unit input
* checking on the right unit (if given) and give the user feedback
* special context menu for operations on quantities/values
* history management (save the last used values)
* save often needed values as shortcut in context menu
* selecting values with mouse wheel and arrow keys (tbd)
* selecting with middle mouse button and mouse move (tbd)
* Python integration for usage in Python only dialogs (tbd)
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The UnitsCalculator uses the InputField already.
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
Code:
* [https://github.com/FreeCAD/FreeCAD/blob/main/src/Gui/InputField.h InputField.h]
* [https://github.com/FreeCAD/FreeCAD/blob/main/src/Gui/InputField.cpp InputField.cpp]
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Python scripting ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The Unit and Quantity system in FreeCAD is (as nearly everything) fully accessibly via Python.
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Unit ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The Unit class represents the fingerprint of any physical unit. As described in the Basics section a vector of eight numbers is used to represent this fingerprint. The Unit class allows the handling and calculation based on this information.
</div> 

{{Code|code=

from FreeCAD import Units

# creating a unit with certain signature
Units.Unit(0,1)      # Mass     (kg)
Units.Unit(1)        # Length   (mm)
Units.Unit(-1,1,-2)  # Pressure (kg/mm*s^2)

# using predefined constants
Units.Unit(Units.Length)
Units.Unit(Units.Mass)
Units.Unit(Units.Pressure)

# parsing unit out of a string
Units.Unit('kg/(m*s^2)')    # Pressure
Units.Unit('Pa')            # the same as combined unit Pascale
Units.Unit('J')             # Joule (work,energy) mm^2*kg/(s^2)

# you can use units from all supported systems of units
Units.Unit('psi')           # imperial pressure
Units.Unit('lb')            # imperial  mass
Units.Unit('ft^2')          # imperial area

# comparing units
Units.Unit(0,1) == Unit(Units.Mass)

# getting type of unit
Units.Unit('kg/(m*s^2)').Type == 'Pressure'

# calculating
Units.Unit('kg') * Units.Unit('m^-1*s^-2') == Units.Unit('kg/(m*s^2)')

}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The unit is mainly used to describe a certain type of unit for a parameter. Therefore a special property type in FreeCAD can pass a unit to check and ensure the right unit. 
A unit and a float value is called quantity.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Quantity ===
</div>

{{Code|code=

from FreeCAD import Units

# to create a quantity you need a value (float) and a unit
Units.Quantity(1.0,Units.Unit(0,1))     # Mass       1.0 kg
Units.Quantity(1.0,Units.Unit(1))       # Length    1.0 mm
Units.Quantity(1.0,Units.Unit(-1,1,-2)) # Pressure  1.0 kg/mm*s^2
Units.Quantity(1.0,Units.Pressure)      # Pressure  1.0 kg/mm*s^2

# you can directly give a signature
Units.Quantity(1.0,0,1)     # Mass       1.0 kg
Units.Quantity(1.0,1)       # Length    1.0 mm
Units.Quantity(1.0,-1,1,-2) # Pressure  1.0 kg/mm*s^2

# parsing quantities out of a string
Units.Quantity('1.0 kg/(m*s^2)') # Pressure
Units.Quantity('1.0 Pa')         # the same as combined Unit Pascale
Units.Quantity('1.0 J')          # Joule (Work,Energy) mm^2*kg/(s^2)

# You can use a point or comma as float delimiter
Units.Quantity('1,0 m')
Units.Quantity('1.0 m')

# you can use units from all supported systems of units
Units.Quantity('1.0 psi')  # imperial pressure
Units.Quantity('1.0 lb')   # imperial mass
Units.Quantity('1.0 ft^2') # imperial area

# the quantity parser can do calculations too
Units.Quantity('360/5 deg')        # splitting circle 
Units.Quantity('1/16 in')          # fractions
Units.Quantity('5.3*6.3 m^2')      # calculating an area
Units.Quantity('1/(log(2.3)/sin(pi)*3.4)+1.8e-3 m')
Units.Quantity('1ft 3in')          # imperial style

# and for sure calculation and comparison
Units.Quantity('1 Pa') * Units.Quantity(2.0) == Units.Quantity('2 Pa')
Units.Quantity('1 m') * Units.Quantity('2 m') == Units.Quantity('2 m^2')
Units.Quantity('1 m') * Units.Quantity('2 ft') + Units.Quantity('2 mm^2')
Units.Quantity('1 m') > Units.Quantity('2 ft')

# accessing the components
Units.Quantity('1 m').Value # get the number (always internal system (mm/kg/s))
Units.Quantity('1 m').Unit  # get the unit
Units.Quantity('1 m') == Units.Quantity( Units.Quantity('1 m').Value , Units.Quantity('1 m').Unit)

# translating the value into other units than the internal system (mm/kg/s)
Units.Quantity('1 km/h').getValueAs('m/s')                  # translate value
Units.Quantity('1 m').getValueAs(2.45,1)                    # translation value and unit signature
Units.Quantity('1 kPa').getValueAs(Units.Pascal)            # predefined standard units 
Units.Quantity('1 MPa').getValueAs(Units.Quantity('N/m^2')) # a quantity
          
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
=== User facing values ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Normally in scripts you can use Quantity for all kinds of calculations and checking, but there comes the time you have to output information to the user. You could use getValueAs() to force a certain unit, but normally the user sets his preferred unit-schema in the preferences. This unit-schema does all the translations to the representation the user likes to see. At the moment there are three schemes implemented:
* 1: Internal     (mm/kg/s) 
* 2: MKS          (m/kg/s)
* 3: US customary (in/lb) 
There can be easily additional schemas implemented in the future...
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The Quantity class has two options to use the actual schema translation:
</div>

{{Code|code=
from FreeCAD import Units

# Use the translated string:
Units.Quantity('1m').UserString           # '1000 mm' in 1; '1 m' in 2; and '1.09361 yr' in 3
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
This does the job if you only need a string. But sometimes you need more control, e.g. if you want to have a dialog button which dials up and down. Then you need more information about the translation output. Therefore the getUserPreferred() method of quantity is used:
</div>

{{Code|code=
Units.Quantity('22 m').getUserPreferred() # gets a tuple:('22 m', 1000.0, 'm')
Units.Quantity('2  m').getUserPreferred() # Tuple: ('2000 mm', 1.0, 'mm')
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Here you get more information using a tuple (three items). You get the string as before, plus the factor of the value and the raw string with only the unit chosen by the translation schema. With this information you can implement a much richer user interaction.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The code of the schema translation can be found here:
* [https://github.com/FreeCAD/FreeCAD/blob/main/src/Base/UnitsSchemaInternal.cpp Internal]
* [https://github.com/FreeCAD/FreeCAD/blob/main/src/Base/UnitsSchemaMKS.cpp MKS]
* [https://github.com/FreeCAD/FreeCAD/blob/main/src/Base/UnitsSchemaImperial1.cpp Imperial]
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Precision ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The precision of quantities is within FreeCAD dialogs the number of decimals specified [[Preferences_Editor#Units|in the preferences]]. To use this settings for your script (for example in dialogs), you can get it with this code:
</div>
{{Code|code=
import FreeCAD

params = App.ParamGet("User parameter:BaseApp/Preferences/Units")
params.GetInt('Decimals') # returns an int
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
== Appendix ==
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Parser supported units ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Although all physical units can be described with the seven SI units, most of the units used in technical areas are common combined units (like Pa = N/m^2 Pascal ). Therefore the units parser in FreeCAD supports lot of SI and Imperial combined units. These units are defined in src/Base/QuantityParser.l file and can be further expanded in the future.
</div> 

{{Code|code=

from FreeCAD import Units

 "nm"  = Units.Quantity(1.0e-6    ,Units.Unit(1));         // nano meter
 "µm"  = Units.Quantity(1.0e-3    ,Units.Unit(1));         // micro meter
 "mm"  = Units.Quantity(1.0       ,Units.Unit(1));         // milli meter
 "cm"  = Units.Quantity(10.0      ,Units.Unit(1));         // centi meter
 "dm"  = Units.Quantity(100.0     ,Units.Unit(1));         // deci meter
 "m"   = Units.Quantity(1.0e3     ,Units.Unit(1));         // meter
 "km"  = Units.Quantity(1.0e6     ,Units.Unit(1));         // kilo meter
 "l"   = Units.Quantity(1000000.0 ,Units.Unit(3));         // liter dm^3
                                                  
 "µg"  = Units.Quantity(1.0e-9    ,Units.Unit(0,1));       // micro gram
 "mg"  = Units.Quantity(1.0e-6    ,Units.Unit(0,1));       // milli gram
 "g"   = Units.Quantity(1.0e-3    ,Units.Unit(0,1));       // gram
 "kg"  = Units.Quantity(1.0       ,Units.Unit(0,1));       // kilo gram
 "t"   = Units.Quantity(1000.0    ,Units.Unit(0,1));       // ton
                                                  
 "s"   = Units.Quantity(1.0       ,Units.Unit(0,0,1));     // second (internal standard time)
 "min" = Units.Quantity(60.0      ,Units.Unit(0,0,1));     // minute
 "h"   = Units.Quantity(3600.0    ,Units.Unit(0,0,1));     // hour  
                                                  
 "A"   = Units.Quantity(1.0       ,Units.Unit(0,0,0,1));   // Ampere (internal standard electric current)
 "mA"  = Units.Quantity(0.001     ,Units.Unit(0,0,0,1));   // milli Ampere         
 "kA"  = Units.Quantity(1000.0    ,Units.Unit(0,0,0,1));   // kilo Ampere         
 "MA"  = Units.Quantity(1.0e6     ,Units.Unit(0,0,0,1));   // Mega Ampere         
                                                  
 "K"   = Units.Quantity(1.0       ,Units.Unit(0,0,0,0,1)); // Kelvin (internal standard thermodynamic temperature)
 "mK"  = Units.Quantity(0.001     ,Units.Unit(0,0,0,0,1)); // Kelvin         
 "µK"  = Units.Quantity(0.000001  ,Units.Unit(0,0,0,0,1)); // Kelvin         

 "mol" = Units.Quantity(1.0       ,Units.Unit(0,0,0,0,0,1)); // Mole (internal standard amount of substance)        

 "cd"  = Units.Quantity(1.0       ,Units.Unit(0,0,0,0,0,0,1)); // Candela (internal standard luminous intensity)        

 "deg" = Units.Quantity(1.0         ,Units.Unit(0,0,0,0,0,0,0,1)); // degree (internal standard angle)
 "rad" = Units.Quantity(180/M_PI    ,Units.Unit(0,0,0,0,0,0,0,1)); // radian         
 "gon" = Units.Quantity(360.0/400.0 ,Units.Unit(0,0,0,0,0,0,0,1)); // gon         

 "in"  = Units.Quantity(25.4        ,Units.Unit(1));       // inch
 "\""  = Units.Quantity(25.4        ,Units.Unit(1));       // inch
 "fo"  = Units.Quantity(304.8       ,Units.Unit(1));       // foot
 "'"   = Units.Quantity(304.8       ,Units.Unit(1));       // foot
 "th"  = Units.Quantity(0.0254      ,Units.Unit(1));       // thou
 "yd"  = Units.Quantity(914.4       ,Units.Unit(1));       // yard

 "lb"  = Units.Quantity(0.45359237   ,Units.Unit(0,1));    // pound
 "oz"  = Units.Quantity(0.0283495231 ,Units.Unit(0,1));    // ounce
 "st"  = Units.Quantity(6.35029318   ,Units.Unit(0,1));    // Stone
 "cwt" = Units.Quantity(50.80234544  ,Units.Unit(0,1));    // hundredweights
}}

{{Powerdocnavi{{#translation:}}}}
[[Category:Developer Documentation{{#translation:}}]]
[[Category:Python Code{{#translation:}}]]
{{clear}}