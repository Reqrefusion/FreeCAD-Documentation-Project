<languages/>
{{TOCright}}

<span id="Introduction"></span>
==Wprowadzenie==

Program FreeCAD można uruchomić bez jego interfejsu graficznego użytkownika (GUI), w trybie powszechnie określanym jako 'headless'. To daje dostęp do różnych efektywnych metod tworzenia skryptów, automatyzacji i osadzania jego możliwości w innych aplikacjach. Ta strona opisuje różne sposoby uruchamiania programu FreeCAD w trybie 'headless'.

<span id="Via_the_FreeCAD_Python_Console"></span>
=== Poprzez konsolę Pythona we FreeCAD ===

To interaktywny tryb, w którym FreeCAD uruchamiany jest bezpośrednio w konsoli Pythona. Ta konsola jest w pełni funkcjonalnym środowiskiem Pythona ze wszystkimi modułami Pythona programu FreeCAD, takimi jak {{incode|Part}}, {{incode|BIM}} oraz {{incode|Draft}}, dostępnymi przez ich publiczne API. Moduł rdzenia {{incode|FreeCAD}} jest wbudowany, więc nie trzeba go jawnie importować korzystając z sesji konsoli. Inne moduły można importować w czasie sesji (np. {{incode|import Part}}) zgodnie z potrzebami.

Ten tryb można uruchomić z linii poleceń używając {{incode|FreeCAD -c}} lub {{incode|FreeCADCmd}}. Zapewnia to taką samą funkcjonalność jak konsola Pythona dostępna w pełnej aplikacji FreeCAD.

Najlepiej używać tej opcji do szybkiego testowania kodu Pythona, który korzysta  dostępu do API programu FreeCAD lub do debugowania niewielkich skryptów, które można łatwo wkleić w konsolę.

<span id="Via_Python_script"></span>
=== Poprzez skrypt Pythona ===

W tym trybie, FreeCAD jest używany jako standardowa biblioteka Pythona. Pozwala to na importowanie jego pełnego API Pythona do dowolnego zewnętrznego skryptu Pythona lub aplikacji, traktując go jako natywny moduł.

Aby to uruchomić, interpreter Pythona musi mieć możliwość zlokalizowania pliku biblioteki FreeCAD o nazwie {{incode|FreeCAD.so}} na Linux i macOS lub {{incode|FreeCAD.pyd}} na innych platformach. Dokonuje się tego poprzez dodanie jego ścieżki do ścieżek wyszukiwania Pythona na samym początku skryptu. Po ustawieniu ścieżki, reszta skryptu może korzystać z dostępu do FreeCAD API jak do dowolnego innego modułu Pythona.

Poniżej znajduje się prosty przykład, który tworzy kostkę i podaje jej objętość oraz pole powierzchni:

{{Code|code=
# Set the path to your FreeCAD installation
# Example for Linux:
# FREECADPATH = '/usr/lib/freecad/lib'
# Example for macOS:
# FREECADPATH = '/Applications/FreeCAD.app/Contents/Resources/lib'
# Example for Windows:
FREECADPATH = 'C:\\Program Files\\FreeCAD\\bin'
import sys
sys.path.append(FREECADPATH)

# The rest of the script can now import and use the FreeCAD API
import FreeCAD
import Part

# Create a simple geometric shape
my_box = Part.makeBox(10, 20, 30)

# Access its properties
print(f"The volume of the box is: {my_box.Volume}")
print(f"The area of the box is: {my_box.Area}")
}}

To run the example script, save the code into a file (e.g., {{incode|run_box.py}}) and execute it from your system's terminal with the Python interpreter:
{{Code|lang=bash|code=
$ python run_box.py
The volume of the box is: 6000.0
The area of the box is: 2200.0
}}

Jest to bardzo efektywne narzędzie, które odblokowuje pełne możliwości programu FreeCAD w zakresie automatyzacji i integracji. Przykładowo, można by napisać skrypt, który korzysta z API zarówno FreeCAD, jak i Blendera do automatycznego importu obiektów z pliku {{incode|.FCStd}} bezpośrednio do sceny Blendera.

Zauważ, że ten tryb jest przeznaczony do użycia FreeCAD API bez GUI. Podczas gdy niektóre moduły zorientowane na GUI mogą zostać zaimportowane, użycie API, które korzysta z bezpośredniego dostępu lub manipuluje komponentami GUI jest bardzo ograniczone i generalnie niewspierane w kontekście trybu 'headless'.

Zobacz stronę [[Embedding_FreeCAD/pl|Osadzanie programu FreeCAD]].

<span id="Via_shell_script"></span>
=== Poprzez skrypt w powłoce ===

Możesz również uruchomić FreeCAD w trybie 'headless' z poziomu skryptu w shellu, wywołując {{incode|FreeCAD -c}} lub {{incode|FreeCADCmd}} a następnie podając wymagane argumenty.

Pełna lista dostępnych argumentów linii poleceń może zostać wyświetlona przy pomocy flagi {{incode|--help}}. Oto przykład informacji uzyskanych na wyjściu dla FreeCAD 1.0.2:

{| class="wikitable mw-collapsible mw-collapsed" style="width:100%;"
|+ style="text-align: left;" | '''Command-line arguments for FreeCAD 1.0.2 (Click to expand)'''
|-
| {{Code|lang=bash|code=
$ FreeCAD -c --help
FreeCAD

For a detailed description see https://wiki.freecad.org/Start_up_and_Configuration

Usage: FreeCAD [options] File1 File2 ...

Allowed options:

Generic options:
  -v [ --version ]          Prints version string
  --verbose                 Prints verbose version string
  -h [ --help ]             Prints help message
  -c [ --console ]          Starts in console mode
  --response-file arg       Can be specified with '@name', too
  --dump-config             Dumps configuration
  --get-config arg          Prints the value of the requested configuration key
  --set-config arg          Sets the value of a configuration key
  --keep-deprecated-paths   If set then config files are kept on the old 
                            location

Configuration:
  -l [ --write-log ]        Writes FreeCAD.log to the user directory.
  --log-file arg            Unlike --write-log this allows logging to an 
                            arbitrary file
  -u [ --user-cfg ] arg     User config file to load/save user settings
  -s [ --system-cfg ] arg   System config file to load/save system settings
  -t [ --run-test ] arg     Run a given test case (use 0 (zero) to run all 
                            tests). If no argument is provided then return list
                            of all available tests.
  -r [ --run-open ] arg     Run a given test case (use 0 (zero) to run all 
                            tests). If no argument is provided then return list
                            of all available tests.  Keeps UI open after 
                            test(s) complete.
  -M [ --module-path ] arg  Additional module paths
  -E [ --macro-path ] arg   Additional macro paths
  -P [ --python-path ] arg  Additional python paths
  --disable-addon arg       Disable a given addon.
  --single-instance         Allow to run a single instance of the application
  --safe-mode               Force enable safe mode
  --pass arg                Ignores the following arguments and pass them 
                            through to be used by a script
}}
|}

Ta metoda jest idealna do skryptów dokonujących automatyzacji i ciągłej integracji (CI). Częste przypadki jej użycia obejmują uruchamianie całego zestawu testów z poleceniem {{incode|FreeCADCmd -t 0}} lub uruchamianie testów dla wybranego środowiska, jak np. {{incode|FreeCADCmd -t TestArch}} (wszystkie testy dla środowiska BIM) lub {{incode|FreeCADCmd -t TestArch.TestWall}} (tylko testy ścian środowiska BIM).

<span id="Executing_Python_code_directly"></span>
==== Uruchamianie kodu Pythona bezpośrednio ====

Pliki wykonywalne linii poleceń FreeCAD mogą również służyć jako wyspecjalizowane interpretery Pythona, pozwalając na bezpośrednie uruchamianie kodu Pythona. To zapewnia wygodną i efektywną alternatywę dla osadzania programu FreeCAD w obrębie zewnętrznego skryptu Pythona.

'''Uruchamianie wbudowanego skryptu'''

Możesz przekazać ciąg kodu Pythona bezpośrednio jako pojedynczy argument. Jest to przydatne do bardzo krótkich poleceń o jednym celu. Zauważ, że argument linii poleceń nie może być ścieżką do istniejącego pliku żeby to działało.

* '''Tryb headless''': Używając {{incode|FreeCADCmd}} uruchamia kod a następnie natychmiast wychodzi. Jest to idealne do korzystania ze skryptów.
{{Code|lang=bash|code=
$ FreeCADCmd "import Part; print(Part.makeBox(10,5,15).Volume)"
}}
* '''Tryb interaktywny''': Używając {{incode|FreeCAD -c}} uruchamia kod a następnie otwiera sesję interaktywnej konsoli Pythona. Jest to przydatne do szybkich testów gdy chcesz sprawdzić stan po zastosowaniu kodu.
{{Code|lang=bash|code=
$ FreeCAD -c "import Part; my_box = Part.makeBox(10,5,15)"
}}

'''Uruchamianie pliku skryptu'''

Bardziej efektywną metodą jest użycie programu FreeCAD do bezpośredniego uruchomienia pliku skryptu Pythona. Jest to zalecane podejście dla każdego nietrywialnego zadania w trybie headless.

{{Code|lang=bash|code=
$ FreeCADCmd /path/to/my_script.py
}}

Gdy skrypt jest uruchamiany w ten sposób, środowisko FreeCAD jest już skonfigurowane. Kluczową zaletą jest to, że skrypt '''nie''' potrzebuje szablonowego kodu {{incode|sys.path.append()}}. Moduły FreeCAD są natychmiast dostępne do importu.

Przykładowo, plik nazwany {{incode|create_box.py}} mógłby zawierać:
{{Code|lang=python|code=
import Part
# Moduł FreeCAD jest już dostępny, ale może być importowany jawnie
import FreeCAD

# Utwórz nowy dokument i dodaj do niego kostkę
doc = FreeCAD.newDocument()
box_obj = doc.addObject("Part::Box", "MyBox")
doc.recompute()

# Eksportuj część do pliku STEP
Part.export([box_obj], "my_box_model.step")

print("Box created and exported successfully to my_box_model.step")
}}
Uruchomienie tego skryptu z terminala jest tak proste jak:
{{Code|lang=bash|code=
$ FreeCADCmd create_box.py
Box created and exported successfully to my_box_model.step
}}

<span id="Examples"></span>
==Przykłady==

<span id="Searching_FreeCAD_modules"></span>
===Przeszukiwanie modułów FreeCAD===

# Otwórz terminal i wpisz:
#:{{incode|$ /path/to/FreeCAD -c}}
#::lub
#:{{incode|$ /ścieżka/do/FreeCADCmd}}
# Powłoka Python uruchomi się z promptem. Wpisz {{incode|help()}}.
# Zostanie wyświetlony tekst pomocy.
# Wpisz {{incode|modules freecad}}.

<span id="Scenegraph_representation"></span>
==Reprezentacja scenografii==

Ponieważ nie jest możliwe utworzenie lub dostęp do [[Viewprovider/pl|dostawcy widoku]] w trybie bez użycia GUI. Co jest możliwe, to załadowanie {{incode|FreeCADGui}} w trybie bez GUI, ale nie ma możliwości dostępu do dokumentu GUI, ponieważ nie zostanie on utworzony i w konsekwencji nie będzie istniał żaden dostawca widoku.

Możliwe jest jednak stworzenie [[Scenegraph/pl|Scenogramu]] reprezentacji obiektu:

{{Code|lang=python|code=
import FreeCADGui as Gui
from pivy import coin

Gui.setupWithoutGUI()
doc = App.newDocument()
obj = doc.addObject("Part::Box","Box")
doc.recompute()
view = Gui.subgraphFromObject(obj)
}}

Zobacz: [https://forum.freecad.org/viewtopic.php?f=10&t=55794&p=481586#p481586 wątek na forum].

<span id="Related"></span>
==Powiązane==

* [[Embedding_FreeCAD/pl#U.C5.BCywanie_FreeCAD_bez_GUI|Osadzanie FreeCAD]]
* [[Start_up_and_Configuration/pl#Uruchamianie_FreeCAD_bez_GUI|Uruchomienie i Konfiguracja]]


[[Category:Developer Documentation{{#translation:}}]]
[[Category:Poweruser Documentation{{#translation:}}]]