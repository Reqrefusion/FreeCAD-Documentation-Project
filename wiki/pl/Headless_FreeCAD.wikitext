<languages/>
{{TOCright}}

<span id="Introduction"></span>
==Wprowadzenie==

Program FreeCAD można uruchomić bez jego interfejsu graficznego użytkownika (GUI), w trybie powszechnie określanym jako 'headless'. To daje dostęp do różnych potężnych metod tworzenia skryptów, automatyzacji i osadzania jego możliwości w innych aplikacjach. Ta strona opisuje różne sposoby uruchamiania programu FreeCAD w trybie 'headless'.

<span id="Via_the_FreeCAD_Python_Console"></span>
=== Poprzez konsolę Pythona we FreeCAD ===

To interaktywny tryb, w którym FreeCAD uruchamiany jest bezpośrednio w konsoli Pythona. Ta konsola jest w pełni funkcjonalnym środowiskiem Pythona ze wszystkimi modułami Pythona programu FreeCAD, takimi jak {{incode|Part}}, {{incode|BIM}} oraz {{incode|Draft}}, dostępnymi przez ich publiczne API. Moduł rdzenia {{incode|FreeCAD}} jest wbudowany, więc nie trzeba go jawnie importować korzystając z sesji konsoli. Inne moduły można importować w czasie sesji (np. {{incode|import Part}}) zgodnie z potrzebami.

Ten tryb można uruchomić z linii poleceń używając {{incode|FreeCAD -c}} lub {{incode|FreeCADCmd}}. Zapewnia to taką samą funkcjonalność jak konsola Pythona dostępna w pełnej aplikacji FreeCAD, z istotnym wyjątkiem w postaci braku wsparcia dla automatycznego uzupełniania w wersji linii poleceń.

Najlepiej używać tej opcji do szybkiego testowania kodu Pythona, który korzysta  dostępu do API programu FreeCAD lub do debugowania niewielkich skryptów, które można łatwo wkleić w konsolę.

<span id="Via_Python_script"></span>
=== Poprzez skrypt Pythona ===

W tym trybie, FreeCAD jest używany jako standardowa biblioteka Pythona. Pozwala to na importowanie jego pełnego API Pythona do dowolnego zewnętrznego skryptu Pythona lub aplikacji, traktując go jako natywny moduł.

<div lang="en" dir="ltr" class="mw-content-ltr">
To enable this, the Python interpreter must be able to locate the FreeCAD library file, which is named {{incode|FreeCAD.so}} on Linux and macOS or {{incode|FreeCAD.pyd}} on other platforms. This is done by appending its directory to Python's search paths at the very beginning of your script. Once the path is set, the rest of the script can access the FreeCAD API like any other Python module.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Below is a simple example that creates a box and prints its volume and area:
</div>

{{Code|code=
# Set the path to your FreeCAD installation
# Example for Linux:
# FREECADPATH = '/usr/lib/freecad/lib'
# Example for macOS:
# FREECADPATH = '/Applications/FreeCAD.app/Contents/Resources/lib'
# Example for Windows:
FREECADPATH = 'C:\\Program Files\\FreeCAD\\bin'
import sys
sys.path.append(FREECADPATH)

# The rest of the script can now import and use the FreeCAD API
import FreeCAD
import Part

# Create a simple geometric shape
my_box = Part.makeBox(10, 20, 30)

# Access its properties
print(f"The volume of the box is: {my_box.Volume}")
print(f"The area of the box is: {my_box.Area}")
}}

To run the example script, save the code into a file (e.g., {{incode|run_box.py}}) and execute it from your system's terminal with the Python interpreter:
{{Code|lang=bash|code=
$ python run_box.py
The volume of the box is: 6000.0
The area of the box is: 2200.0
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
This is a very powerful feature that unlocks the full capabilities of FreeCAD for automation and integration tasks. For example, one could write a script that leverages both the FreeCAD and Blender APIs to programmatically import objects from a {{incode|.FCStd}} file directly into a Blender scene.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Note that this mode is intended for using the FreeCAD API without a GUI. While some GUI-related modules can be imported, API usage that directly accesses or manipulates GUI components is very limited and generally not supported in a headless context.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
See [[Embedding_FreeCAD|Embedding FreeCAD]].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Via shell script ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
You can also execute FreeCAD headlessly from a shell script by calling {{incode|FreeCAD -c}} or {{incode|FreeCADCmd}} followed by the necessary arguments.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
A full list of available command-line arguments can be displayed by using the {{incode|--help}} flag. Here is an example of the help output for FreeCAD 1.0.2:
</div>

{{Code|lang=bash|code=
$ FreeCAD -c --help
FreeCAD

For a detailed description see https://wiki.freecad.org/Start_up_and_Configuration

Usage: FreeCAD [options] File1 File2 ...

Allowed options:

Generic options:
  -v [ --version ]          Prints version string
  --verbose                 Prints verbose version string
  -h [ --help ]             Prints help message
  -c [ --console ]          Starts in console mode
  --response-file arg       Can be specified with '@name', too
  --dump-config             Dumps configuration
  --get-config arg          Prints the value of the requested configuration key
  --set-config arg          Sets the value of a configuration key
  --keep-deprecated-paths   If set then config files are kept on the old 
                            location

Configuration:
  -l [ --write-log ]        Writes FreeCAD.log to the user directory.
  --log-file arg            Unlike --write-log this allows logging to an 
                            arbitrary file
  -u [ --user-cfg ] arg     User config file to load/save user settings
  -s [ --system-cfg ] arg   System config file to load/save system settings
  -t [ --run-test ] arg     Run a given test case (use 0 (zero) to run all 
                            tests). If no argument is provided then return list
                            of all available tests.
  -r [ --run-open ] arg     Run a given test case (use 0 (zero) to run all 
                            tests). If no argument is provided then return list
                            of all available tests.  Keeps UI open after 
                            test(s) complete.
  -M [ --module-path ] arg  Additional module paths
  -E [ --macro-path ] arg   Additional macro paths
  -P [ --python-path ] arg  Additional python paths
  --disable-addon arg       Disable a given addon.
  --single-instance         Allow to run a single instance of the application
  --safe-mode               Force enable safe mode
  --pass arg                Ignores the following arguments and pass them 
                            through to be used by a script
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
This method is ideal for automated tasks and continuous integration (CI) scripts. Common uses include executing the entire test suite with {{incode|FreeCADCmd -t 0}} or running tests for a specific module, such as {{incode|FreeCADCmd -t TestArch}} (all BIM workbench tests) or {{incode|FreeCADCmd -t TestArch.TestWall}} (only BIM worckbench's wall tests).
</div>

<span id="Examples"></span>
==Przykłady==

<span id="Searching_FreeCAD_modules"></span>
===Przeszukiwanie modułów FreeCAD===

# Otwórz terminal i wpisz:
#:{{incode|$ /path/to/FreeCAD -c}}
#::lub
#:{{incode|$ /ścieżka/do/FreeCADCmd}}
# Powłoka Python uruchomi się z promptem. Wpisz {{incode|help()}}.
# Zostanie wyświetlony tekst pomocy.
# Wpisz {{incode|modules freecad}}.

<span id="Scenegraph_representation"></span>
==Reprezentacja scenografii==

Ponieważ nie jest możliwe utworzenie lub dostęp do [[Viewprovider/pl|dostawcy widoku]] w trybie bez użycia GUI. Co jest możliwe, to załadowanie {{incode|FreeCADGui}} w trybie bez GUI, ale nie ma możliwości dostępu do dokumentu GUI, ponieważ nie zostanie on utworzony i w konsekwencji nie będzie istniał żaden dostawca widoku.

Możliwe jest jednak stworzenie [[Scenegraph/pl|Scenogramu]] reprezentacji obiektu:

{{Code|lang=python|code=
import FreeCADGui as Gui
from pivy import coin

Gui.setupWithoutGUI()
doc = App.newDocument()
obj = doc.addObject("Part::Box","Box")
doc.recompute()
view = Gui.subgraphFromObject(obj)
}}

Zobacz: [https://forum.freecad.org/viewtopic.php?f=10&t=55794&p=481586#p481586 wątek na forum].

<span id="Related"></span>
==Powiązane==

* [[Embedding_FreeCAD/pl#U.C5.BCywanie_FreeCAD_bez_GUI|Osadzanie FreeCAD]]
* [[Start_up_and_Configuration/pl#Uruchamianie_FreeCAD_bez_GUI|Uruchomienie i Konfiguracja]]


[[Category:Developer Documentation{{#translation:}}]]
[[Category:Poweruser Documentation{{#translation:}}]]