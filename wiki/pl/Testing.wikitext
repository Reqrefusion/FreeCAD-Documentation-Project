<languages/>

{{Docnav/pl
|[[Debugging/pl|Debugowanie]]
|[[FreeCAD_Build_Tool/pl|FreeCAD Narzędzie do kompilacji]]
}}

{{VeryImportantMessage|Od wersji 1.1 to środowisko pracy jest domyślnie wyłączone. Zobacz stronę [[Workbenches/pl#Aktualne|Środowiska pracy]].}}

[[Image:Workbench_Test.svg|thumb|128px|Ikonka FreeCAD dla środowiska pracy Test]]

{{TOCright}}

<span id="Introduction"></span>
==Wprowadzenie==

Środowisko pracy [[Testing/pl|Test]] nie jest tak naprawdę programem do modelowania, ale zawiera zestaw skryptów środowiska [[Python/pl|Python]] do wykonywania różnych testów na głównych komponentach programu FreeCAD w celu usuwania problemów. Zobacz także stronę [[Debugging/pl|debugowanie]].

Testy można uruchamiać z wiersza poleceń, używając opcji {{incode|-t}} lub {{incode|--run-test}}.

Przeprowadzenie wszystkich testów:

{{Code|code=
freecad --run-test 0
}}

Przeprowadzenie tylko niektórych testów jednostkowych, np:

{{Code|code=
freecad -t TestDraft
}}

Jeśli test nie wymaga GUI, można go także wykonać w trybie konsoli, ustawiając dodatkowo opcję {{incode|-c}} lub {{incode|--console}}. Zwykle powoduje to znacznie szybszy czas uruchamiania, ponieważ GUI nie jest ładowane. Na przykład:

{{Code|code=
freecad -c -t TestPartDesignApp
}}

Pliki generowane przez procedurę testowania (np. pliki wejściowe z TestFemApp przechowywane w folderze FEM_unittests) są zapisywany do ścieżki temp używanej przez FreeCAD, którą można zlokalizować wprowadzając następujące polecenie w [[Python_console/pl|konsoli Pythona]]:

{{Code|code=
App.getTempPath()
}}

Mogą one być przydatne do debugowania.

<span id="Test_menu"></span>
==Menu Narzędzia test==

W każdym katalogu najwyższego poziomu w programie FreeCAD powinien znajdować się plik z testami, które można uruchomić dla danego programu lub modułu. Plik ten zwykle zaczyna się od słowa {{incode|Test}}.

Aby uruchomić test z poziomu programu FreeCAD, należy przejść do środowiska Test Workbench, następnie {{MenuCommand|Test commands → TestToolsGui → Self test → Select test name}}, a następnie wpisać nazwę pliku Python z testami. Na przykład dla środowiska pracy [[Draft_Workbench/pl|Rysunek Roboczy]] będzie to {{MenuCommand|TestDraft}}, po czym należy nacisnąć przycisk {{Button|Start}}.

<span id="Test_functions"></span>
==Funkcje testujące==

To jest lista aplikacji testowych od wersji 0.15 git 4207:

=== TestAPP.All ===

Dodanie funkcji testowania

<span id="BaseTests"></span>
===Testy podstawowe===

Dodaj funkcje testowania

<span id="UnitTests"></span>
===Testy jednostkowe===

Dodaj funkcje testowania

<span id="Document"></span>
===Dokument===

Dodaj funkcje testowania

<span id="UnicodeTests"></span>
===Testy Unicode===

Dodaj funkcje testowania

=== MeshTestsApp ===

Dodaj funkcje testowania

<span id="TestDraft"></span>
===Test środowiska Rysunek Roboczy===

Dodaj funkcje testowania

=== TestSketcherApp ===

Dodaj funkcje testowania

=== TestPartApp ===

Dodaj funkcje testowania

=== TestPartDesignApp ===

Dodaj funkcje testowania

=== TestCAMApp ===

Testowanie środowiska pracy Path:
* depthTestCases: 
* PathTestUtils: 
* TestDressupDogbone: Test funkcjonalności ulepszenia podcięcia w narożnikach.
* TestHoldingTags: Test funkcjonalności ulepszenia mostki utrzymujące.
* TestPathAdaptive: Testowanie możliwości wyboru trybu pracy adaptacyjnej.
* TestPathCore:Test głównych funkcji środowiska pracy Path.
* TestPathDeburr: Test ogólnej funkcjonalności operacji usuwania zadziorów.
* TestPathGeom: Test różnych funkcji dostępnych w module PathGeom.
* TestPathHelix: Test ogólnej funkcjonalności działania operacji Helisy.
* TestPathLog: Przetestuj różne funkcje dostępne w module debugowania i informacji zwrotnej PathLog.
* TestPathOpTools: 
* TestPathPreferences: Test różnych funkcji dostępnych w module PathPreferences.
* TestPathPropertyBag: 
* TestPathSetupSheet: 
* TestPathStock: 
* TestPathThreadMilling: 
* TestPathTool: 
* TestPathToolBit: 
* TestPathToolController: 
* TestPathTooltable: 
* TestPathUtil: Test różnych funkcji dostępnych w module PathUtil.
* TestPathVcarve: Test ogólnej funkcjonalności działania funkcji Vcarve.
* TestPathVoronoi:

<span id="Workbench"></span>
===Środowiska pracy===

Dodaj funkcje testowania

<span id="Menu"></span>
===Menu===

Dodaj funkcje testowania

=== Menu.MenuDeleteCases ===

Dodaj funkcje testowania

=== Menu.MenuCreateCases ===

Dodaj funkcje testowania

<span id="Scripting"></span>
==Tworzenie skryptów==

{{Emphasis|Zobacz również:}} [[FreeCAD_Scripting_Basics/pl|FreeCAD podstawy tworzenia skryptów]].

<span id="Get_a_list_of_all_top-level_test_modules"></span>
===Wyświetl listę wszystkich modułów testowych najwyższego poziomu===

{{Code|code=
FreeCAD.__unit_test__
}}

Należy zauważyć, że zwracane tutaj moduły testowe zależą od tego, czy dostępny jest interfejs graficzny, czy nie. Tzn. jeśli test jest wykonywany w trybie konsoli, brakuje różnych testów kończących się na "Gui".

<span id="Run_specific_tests"></span>
===Wykonaj określone testy===

Istnieje wiele sposobów uruchamiania testów przy użyciu [https://docs.python.org/3/library/unittest.html biblioteki unittest Python]. Szkielet testowy programu FreeCAD usuwa niektóre z najczęściej występujących przypadków.

Uruchamia wszystkie testy zdefiniowane w module Python:
{{Code|code=
import Test, TestFemApp
Test.runTestsFromModule(TestFemApp)
}}

Uruchamia wszystkie testy zdefiniowane w klasie Python:
{{Code|code=
import Test, femtest.app.test_solver_calculix
Test.runTestsFromClass(femtest.app.test_solver_calculix.TestSolverCalculix)
}}

<span id="Example_1"></span>
===Przykład 1===

W konsoli Pythona programu FreeCAD do uruchamiania wbudowanych testów można użyć kodu w następującym formacie.  Zamień tekst w kolorze czerwonym {{incode|"TestFem"}} w poniższym kodzie na nazwę żądanego testu modułu.
* Na przykład użyj {{incode|TestPathApp}}, aby uruchomić wszystkie testy jednostkowe środowiska pracy Path.
* Moduły podrzędne są dostępne przy użyciu notacji kropkowej, na przykład {{incode|TestPathApp.TestPathAdaptive}}, aby uruchomić tylko testy jednostkowe Adaptive w ramach większego frameworka testowego środowiska pracy Path.
* Wiele modułów testowych lub modułów podrzędnych można połączyć, dodając kolejne wywołanie metody {{incode|suite.addTest(...)}}, tak jak w poniższym kodzie, ale z innym odniesieniem do modułu lub modułu podrzędnego.
* Dane wyjściowe poniższego kodu będą znajdować się w panelu Widoku raportu w graficznym interfejsie użytkownika programu FreeCAD.
* Źródło kodu jest skopiowane z postu użytkownika forum FreeCAD, ''sgrogana'', w temacie [https://forum.freecad.org/viewtopic.php?style=3&p=153251#p153251 testy jednostkowe w pythonie], z przypisaniem do użytkownika forum, ''wmayer''.

{{Code|code=
import unittest
suite = unittest.TestSuite()
suite.addTest(unittest.defaultTestLoader.loadTestsFromName("TestFem"))
r = unittest.TextTestRunner()
r.run(suite)
}}

<span id="Additional_Resources"></span>
==Zasoby dodatkowe==

<span id="Forum_Topics"></span>
===Tematy na forum===

* [https://forum.freecad.org/viewtopic.php?style=3&f=27&t=18379 Support for running specific test jednostkowy z --run-test #331]


{{Docnav/pl
|[[Debugging/pl|Debugowanie]]
|[[FreeCAD_Build_Tool/pl|FreeCAD Narzędzie do kompilacji]]
}}

<!--T:21-->
{{Userdocnavi{{#translation:}}}}
[[Category:Developer Documentation{{#translation:}}]]
[[Category:Test Framework{{#translation:}}]]
[[Category:Workbenches{{#translation:}}]]
[[Category:Testing{{#translation:}}]]