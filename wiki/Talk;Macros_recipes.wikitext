# ----- PARAMETERS -----
R = 450.0  # mm radius
stations = [(45,100),(90,95),(180,80),(270,70),(360,60),(428,55)]
lam, alpha, a = 6.0, 7.0, 1.0/3.0
rib_thk, spar_sz = 1.5, 6.0
spar_xc = 0.25  # spar at 25 % chord
# -----------------------

def inflow(rR): return math.degrees(math.atan((1-a)/(lam*rR)))
def twist(r):   return max(inflow(r/R)-alpha,0)

# ---- Airfoil coordinates (S1223, unit chord) ----
pts=[]
for line in """1.000008 -0.000603
0.993590 0.004571
0.984245 0.012118
0.973460 0.019356
0.960629 0.026115
0.945181 0.032828
0.926651 0.039823
0.904888 0.047136
0.880175 0.054646
0.853159 0.062178
0.824597 0.069567
0.795138 0.076682
0.765247 0.083427
0.735212 0.089726
0.705156 0.095528
0.675078 0.100807
0.644896 0.105565
0.614475 0.109826
0.583664 0.113638
0.552312 0.117069
0.520322 0.120208
0.487705 0.123147
0.454613 0.125962
0.421345 0.128687
0.388333 0.131296
0.356067 0.133693
0.325069 0.135736
0.295877 0.137245
0.268829 0.138004
0.243824 0.137815
0.220501 0.136565
0.198525 0.134215
0.177669 0.130750
0.157780 0.126169
0.138782 0.120491
0.120666 0.113761
0.103486 0.106051
0.087355 0.097503
0.072468 0.088363
0.059073 0.078993
0.047384 0.069795
0.037477 0.061099
0.029267 0.053058
0.022556 0.045678
0.017111 0.038903
0.012709 0.032674
0.009161 0.026935
0.006322 0.021632
0.004084 0.016712
0.002373 0.012124
0.001136 0.007829
0.000346 0.003794
0.000000 0.000000
0.000148 -0.003618
0.001048 -0.007135
0.003101 -0.010197
0.006279 -0.012396
0.010205 -0.013812
0.014714 -0.014733
0.019844 -0.015341
0.025736 -0.015731
0.032611 -0.015943
0.040792 -0.015966
0.050753 -0.015760
0.063168 -0.015251
0.078900 -0.014329
0.098689 -0.012866
0.122429 -0.010732
0.149044 -0.007808
0.177620 -0.004025
0.207919  0.000539
0.239715  0.005648
0.272508  0.011062
0.305760  0.016602
0.338938  0.022101
0.371734  0.027427
0.404046  0.032486
0.435855  0.037195
0.467171  0.041486
0.498039  0.045298
0.528502  0.048580
0.558624  0.051295
0.588451  0.053408
0.618035  0.054896
0.647410  0.055736
0.676624  0.055913
0.705695  0.055415
0.734644  0.054236
0.763446  0.052373
0.792057  0.049829
0.820348  0.046615
0.848083  0.042767
0.874843  0.038343
0.900019  0.033457
0.922926  0.028253
0.943072  0.022860
0.960360  0.017351
0.975009  0.011771
0.987349  0.006199
1.000008 -0.000603""".splitlines():
   x,y=[float(v) for v in line.split()]
   pts.append(FreeCAD.Vector(x-0.25, y, 0))

doc = FreeCAD.newDocument("BalsaBlade")

rib_objs=[]
for i,(r,c) in enumerate(stations,1):
   sc=[FreeCAD.Vector(p.x*c, p.y*c, p.z) for p in pts]
   wire=Part.makePolygon(sc+[sc[0]])
   face=Part.Face(wire)
   rib=face.extrude(FreeCAD.Vector(0,0,rib_thk))
   ang=twist(r)
   rib.rotate(FreeCAD.Vector(0,1,0), ang)
   rib.translate(FreeCAD.Vector(r,0,0))
   rib_objs.append(rib)

# Make spar
spar_len=R+60
spar=Part.makeBox(spar_sz,spar_sz,spar_len)
spar.translate(FreeCAD.Vector(spar_xc*100,-spar_sz/2,-30))
spar.rotate(FreeCAD.Vector(0,1,0),90)

# Combine into one solid
compound=Part.makeCompound(rib_objs+[spar])
Part.show(compound)
step=FreeCAD.ConfigGet("UserAppData")+"/blade_S1223_balsa_3Dsolid.step"
dxf =FreeCAD.ConfigGet("UserAppData")+"/blade_S1223_balsa_3Dsolid.dxf"
compound.exportStep(step)
compound.exportDXF(dxf)
FreeCAD.Console.PrintMessage(f"\nExported:\n{step}\n{dxf}\n")