<languages/>
<translate>

{{Docnav
|[[Arch_Schedule|Schedule]]
|[[BIM_Preflight|Preflight]]
|[[BIM_Workbench|BIM]]
|IconL=Arch_Schedule.svg
|IconR=BIM_Preflight.png
|IconC=Workbench_BIM.svg
}}

{{VeryImportantMessage|THIS COMMAND IS EXPERIMENTAL AND NOT PART OF FREECAD. It is a work in progress PR (https://github.com/FreeCAD/FreeCAD/pull/24078) that needs to be reviewed and tested. This is a placeholder to host documentation for testers.}}

{{GuiCommand
|Name=BIM Report
|MenuLocation=Manage → Report
|Workbenches=[[BIM_Workbench|BIM]]
|SeeAlso=
}}

==Description==

The '''BIM Report''' is a tool for generating schedules and data reports from a FreeCAD model. It uses a SQL-like query language to select, filter, and aggregate data, offering a declarative alternative to other scheduling tools. Ultimately, it enables users to create and automatically populate a [[Spreadsheet_Workbench|spreadsheet]] with data gathered from the model.

You might choose the BIM Report tool when you need to perform:
* '''Complex Filtering:''' Select objects based on a combination of properties, including nested data (e.g., an object's placement coordinates).
* '''Data Aggregation:''' Calculate totals, counts, minimums, or maximums across many objects (e.g., find the total area of all "Space" objects).
* '''Hierarchical Queries:''' Select objects based on their relationship to other objects (e.g., find all windows hosted in walls on a specific floor).

==Usage==

# Open or create a FreeCAD document which contains some objects.
# Press the {{Button|[[Image:BIM_Report.svg|16px]] [[BIM_Report|Report]]}} button.
# The new Report will open its Task Panel automatically. Create one or more statements for the report. You can optionally use the provided statement editor to see a preview of executing those statements.
# Press {{Button|OK}} to save the report and refresh the associated spreadsheet with the query results.

=== User Interface ===

The BIM Report system consists of three main components: the '''Report''' Object in the Tree view, the Target '''Spreadsheet''' for the results, and the '''Task Panel''' where you configure the report.

When you create a new report, you will see two new objects in the '''Tree view''': the Report object, which stores all your settings, and its associated ReportResult spreadsheet.

Double-clicking the {{PropertyData|Report}} object opens the '''Task Panel''', which is the primary workspace for editing your report. The panel is divided into two main areas: the ''Report Statements Overview'' and the ''Statement Editor''.

[[File:BIM_Report_Task_Panel_Overview.png|thumb|The BIM Report Task Panel, showing the Statements Overview section at the top.]]

==== Report Statements Overview ====

This section is always visible at the top of the Task Panel and gives you a summary of all the queries (or "statements") that make up your report.

The main feature is a '''table''' listing each statement. From here, you can see and directly edit the '''Description''', and toggle key options for each query:
* '''Pipe:''' Enables pipeline mode for that statement, using the output of the previous one as its input.
* '''Header:''' Uses the statement's description as a merged section header in the spreadsheet.
* '''Cols:''' Includes the column names (e.g., {{incode|Label}}, {{incode|Area}}) as a header row for that statement's results.

Below the table are buttons to {{Button|[[Image:List-add.svg|16px]] Add}}, {{Button|[[Image:List-remove.svg|16px]] Remove}}, {{Button|[[Image:Edit-copy.svg|16px]] Duplicate}}, or {{Button|[[Image:Edit-edit.svg|16px]] Edit}} the selected statement.

Finally, the '''Report Templates''' dropdown menu allows you to load complete, pre-configured reports, such as a "Room and Area Schedule".

==== Statement Editor ====

This section appears at the bottom of the Task Panel when you select a statement and click {{Button|[[Image:Edit-edit.svg|16px]] Edit Selected}}. This is where you write and configure an individual SQL query.

[[File:BIM_Report_Statement_Editor.png|thumb|The Statement Editor, showing the SQL editor, preview pane, and display options.]]

* The '''SQL Query Editor''' is a text box with syntax highlighting. Autocompletion for SQL keywords and property names from your model is automatically enabled.
* Below the editor, a '''Live Validation''' status label gives you immediate feedback, indicating if your syntax is valid and showing a live count of matching objects.
* The {{Button|[[Image:Std_ToggleVisibility.svg|16px]] Show Preview}} button will run the current query on-demand and display the full data results in a temporary table, allowing you to test your query without closing the editor.
* The {{Button|[[Image:Help-browser.svg|16px]] Help}} button opens a dialog with a "cheatsheet" of all supported SQL clauses and functions.
* The '''Display Options''' group contains checkboxes for controlling the final formatting in the spreadsheet:
** {{CheckBox|Use as Pipeline Step}}: When checked, this statement will use the results of the previous statement as its data source instead of querying the entire document. This is the key control for enabling pipeline workflows.
** {{CheckBox|Use Description as Section Header}}: When checked, the statement's description (e.g., "Room List") will be written as a merged, centered header row in the spreadsheet before its data results.
** {{CheckBox|TRUE|Include Column Names}}: This option, enabled by default, includes the column headers (e.g., {{incode|Label}}, {{incode|Area}}) in the spreadsheet output for this statement.
** {{CheckBox|Add Empty Row After}}: When checked, a blank row will be inserted after this statement's results, providing visual separation in a multi-section report.
** {{CheckBox|Print Results in Bold}}: Renders the data cells for this statement's results in a bold font for emphasis.
* The '''Query Presets''' dropdown allows you to load and save individual, commonly used SQL queries.

==Workflow==

This small tutorial guides you through creating a complete room schedule, from a simple list to a multi-part report with calculated totals.

=== Step 1: Creating a New Report ===
# Click the {{Button|[[Image:BIM_Report.svg|16px]] [[BIM_Report|Report]]}} button in the BIM workbench toolbar.
# FreeCAD will create a '''Report object''' and a '''ReportResult spreadsheet''' in the Tree view and automatically open the Task Panel.

=== Step 2: Creating a Simple Statement ===
First, let's create a simple list of all spaces and their areas.
# In the '''Report Statements Overview''', click the {{Button|[[Image:List-add.svg|16px]] Add Statement}} button. A new, empty statement will appear in the list.
# With the new statement selected, click the {{Button|[[Image:Edit-edit.svg|16px]] Edit Selected}} button. The '''Statement Editor''' will appear at the bottom of the Task Panel.
# In the '''Description''' field, type {{incode|Room List}}.
# In the '''SQL Query''' editor, enter the following query. This selects the name and area of all objects that are {{incode|Space}}s and sorts them alphabetically.
{{Code|lang=sql|code=
SELECT Label, Area FROM document WHERE IfcType = 'Space' ORDER BY Label ASC
}}

# Click the {{Button|[[Image:Document-save.svg|16px]] Save}} button in the editor to commit your changes to the statement.

=== Step 3: Creating a Multi-Section Report ===
Now, let's add a second statement to calculate the total area.
# In the overview, click {{Button|[[Image:List-add.svg|16px]] Add Statement}} again to create a second statement.
# With this new statement selected, click {{Button|[[Image:Edit-edit.svg|16px]] Edit Selected}}.
# Set the '''Description''' to {{incode|Total Area}}.
# In the '''SQL Query''' editor, enter this aggregation query:
{{Code|lang=sql|code=
SELECT 'Total Usable Area', SUM(Area) FROM document WHERE IfcType = 'Space'
}}
# Under '''Display Options''', uncheck '''Include Column Names''' (since our first column is a custom label) and check '''Print Results in Bold''' for emphasis.
# Click {{Button|[[Image:Document-save.svg|16px]] Save}}. You now have a two-statement report. Click the main {{Button|OK}} button at the bottom of the Task Panel to execute it. The associated spreadsheet will open automatically with the formatted results.

=== Step 4: Using Pipelining for Advanced Queries ===
Pipelining allows you to chain queries together, where the output of one becomes the input for the next. This is useful for complex hierarchical selections.

For example, to find all doors located on the "Ground Floor", we must first find all objects on that floor, and ''then'' filter that list for doors.

# Create a new report.
# '''Statement 1: Find the Floor's Contents'''
#* Add a statement with the description {{incode|Ground Floor Objects}}.
#* Use this query to select all the child objects of the floor object:
{{Code|lang=sql|code=
SELECT * FROM CHILDREN(SELECT * FROM document WHERE Label = 'Ground Floor')
}}
# '''Statement 2: Filter for Doors'''
#* Add a second statement with the description {{incode|Doors on Ground Floor}}.
#* In the editor for this statement, under '''Display Options''', check the '''Use as Pipeline Step''' checkbox. This is the key step that links this query to the previous one.
#* Use this query to filter the incoming objects for doors:
{{Code|lang=sql|code=
SELECT Label, Width, Height FROM document WHERE IfcType = 'Door'
}}

Note: In a pipeline, {{incode|FROM document}} is a placeholder; the engine uses the data from the previous step as the actual source.

# Click {{Button|OK}}. The report will execute the two-step pipeline, and the spreadsheet will show only the doors found on the ground floor.

=== Step 5: Using Presets and Templates ===
* '''Report Templates''' load a full, multi-statement report. In the '''Report Statements Overview''', select a template like "Room and Area Schedule" from the dropdown to instantly load the configuration from Steps 2 & 3. You can save your own reports as new templates for reuse.
* '''Query Presets''' load a single query into the editor. In the '''Statement Editor''', select a preset like "All Walls" from the dropdown to populate the SQL editor. You can save your own frequently used queries by clicking the {{Button|Save...}} button.

== BIM SQL Dialect Reference ==

This section provides a detailed reference for the SQL dialect used by the BIM Report tool.

'''Note''': The most up-to-date reference for all clauses and functions can always be found in the UI by clicking the {{Button|[[Image:Help-browser.svg|16px]] Help}} button within the report's Task Panel editor.

=== Clauses ===
* {{incode|SELECT}}: Specifies the columns of data to return. Can use {{incode|*}} to select a default identifier for all objects.
* {{incode|FROM}}: Specifies the data source. In a standalone query, this is always {{incode|document}}. In a pipeline, {{incode|document}} is a placeholder for the data from the previous step. Can also use the {{incode|CHILDREN()}} function.
* {{incode|WHERE}}: Filters objects based on conditions.
* {{incode|GROUP BY}}: Groups rows that have the same values into summary rows, typically used with aggregate functions.
* {{incode|ORDER BY}}: Sorts the final results. Can be followed by {{incode|ASC}} (ascending, default) or {{incode|DESC}} (descending). Supports sorting by multiple columns.
* {{incode|AS}}: Creates an alias (a custom name) for a column in the {{incode|SELECT}} clause, e.g., {{incode|SELECT Area AS "My Area"}}.

==== Usage Notes for GROUP BY and ORDER BY ====
The dialect has specific rules for how to use expressions (like functions or arithmetic) in the {{incode|GROUP BY}} and {{incode|ORDER BY}} clauses.

* '''For {{incode|GROUP BY}}:''' When grouping by an expression, you must repeat the entire expression in the {{incode|GROUP BY}} clause. Using an alias from the {{incode|SELECT}} list is not supported.
** ✅ '''Correct:''' {{Code|lang=sql|code=SELECT TYPE(*) ... GROUP BY TYPE(*)}}
** ❌ '''Incorrect:'''{{Code|lang=sql|code=SELECT TYPE(*) AS BimType ... GROUP BY BimType}}

* '''For {{incode|ORDER BY}}:''' Conversely, sorting by a raw expression is not supported. To sort by the result of an expression, you '''must''' first include it in the {{incode|SELECT}} list with an {{incode|AS}} alias, and then refer to that alias in the {{incode|ORDER BY}} clause.
** ✅ '''Correct:'''{{Code|lang=sql|code=SELECT Label, LOWER(Label) AS sort_key ... ORDER BY sort_key}}
** ❌ '''Incorrect:'''{{Code|lang=sql|code=SELECT Label ... ORDER BY LOWER(Label)}}

=== Functions ===

The dialect includes a library of built-in functions for data manipulation and analysis.
{| class="wikitable"
! Category
! Function
! Description
|-
| '''Aggregate'''
| {{incode|COUNT(property<nowiki>|</nowiki>*)}}
| Counts the number of objects. {{incode|COUNT(*)}} counts all rows; {{incode|COUNT(property)}} counts rows where the specified property is not {{incode|NULL}}.
|-
|
| {{incode|SUM(property)}}
| Calculates the sum of a numerical property.
|-
|
| {{incode|MIN(property)}}
| Finds the minimum value of a numerical property.
|-
|
| {{incode|MAX(property)}}
| Finds the maximum value of a numerical property.
|-
| '''Hierarchical'''
| {{incode|PARENT(*)}}
| Returns the architecturally significant parent of an object (e.g., the Wall a Window is in), transparently skipping over generic groups.
|-
|
| {{incode|CHILDREN(subquery)}}
| A function used in the {{incode|FROM}} clause. Returns all children of objects found by the subquery, resolving both containment ({{incode|.Group}}) and hosting ({{incode|.Hosts}}) relationships. This function is '''not recursive'''. To find grandchildren or deeper descendants, chain multiple {{incode|CHILDREN()}} steps together using a pipeline.
|-
| '''Utility'''
| {{incode|TYPE(*)}}
| Returns the object's user-facing type, as determined by its proxy (e.g., {{incode|Wall}}, {{incode|Space}}, {{incode|Part::Box}}).
|-
|
| {{incode|CONVERT(quantity, 'unit')}}
| Converts a FreeCAD Quantity object to a new unit and returns it as a raw number. Example: {{incode|CONVERT(Area, 'm^2')}}.
|-
| '''String'''
| {{incode|LOWER(property)}}
| Converts a text property to lowercase.
|-
|
| {{incode|UPPER(property)}}
| Converts a text property to uppercase.
|-
|
| {{incode|CONCAT(val1, val2, ...)}}
| Joins multiple text values and properties together into a single string.
|}

=== Property Access ===

You can access any property of an object, including nested data structures.

* '''Direct Access:''' Access a simple property directly by its name.
** Example: {{incode|Label}}, {{incode|IfcType}}
* '''Nested Access:''' Use dot notation to access sub-properties.
** Example: {{incode|Shape.Volume}}, {{incode|Placement.Base.z}}
* '''Chained Access:''' Chain property access onto the result of a function, most commonly {{incode|PARENT()}}.
** Example: {{incode|PARENT(*).Label}}, {{incode|PARENT(*).PARENT(*).Height}}

=== Operators ===

{| class="wikitable"
! Type
! Operators
! Description
|-
| '''Comparison'''
| {{incode|{{:=}}}}, {{incode|!{{:=}}}}, {{incode|>}}, {{incode|<}}, {{incode|>{{:=}}}}, {{incode|<{{:=}}}}
| Standard comparison operators.
|-
|
| {{incode|LIKE}}
| Case-insensitive pattern matching. Use {{incode|%}} for multiple characters and {{incode|_}} for a single character.
|-
|
| {{incode|IS NULL}}, {{incode|IS NOT NULL}}
| Checks if a property has a value.
|-
|
| {{incode|IN (value1, value2, ...)}}
| Checks if a property's value is in a given list of literals.
|-
| '''Logical'''
| {{incode|AND}}, {{incode|OR}}
| Used in the {{incode|WHERE}} clause to combine multiple conditions.
|-
| '''Arithmetic'''
| {{incode|+}}, {{incode|-}}, {{incode|*}}, {{incode|/}}
| Perform calculations on numerical properties. Obeys standard operator precedence; use {{incode|()}} to override.
|}

=== General Syntax ===

* '''Literals and Quotes''': Both single quotes ({{incode|'}}) and double quotes ({{incode|"}}) can be used for text literals (strings). For example, {{incode|WHERE Label {{:=}} 'Wall'}} and {{incode|WHERE Label {{:=}} "Wall"}} are equivalent.
* '''Comments''': The parser ignores both single-line comments, which start with {{incode|--}}, and multi-line comments, which are enclosed in {{incode|/* ... */}}.
* '''Internationalization''': The parser correctly handles non-ASCII (Unicode) characters in property names (e.g., Fläche).

==  Sample Queries ==

This section provides a collection of practical queries that you can use directly or modify for your reports.

=== Basic Selections ===

'''Select all structural elements (Columns and Beams):'''
{{Code|lang=sql|code=
SELECT Label, IfcType 
FROM document 
WHERE IfcType IN ('Column', 'Beam') 
ORDER BY IfcType, Label
}}

'''Select all walls with "Exterior" in their name:'''
{{Code|lang=sql|code=
SELECT Label, Length, Height 
FROM document 
WHERE IfcType = 'Wall' AND Label LIKE '%Exterior%'
}}

=== Data Aggregation & Summaries ===

'''Count all BIM objects, grouped by their type:'''
{{Code|lang=sql|code=
SELECT IfcType, COUNT(*) 
FROM document 
WHERE IfcType IS NOT NULL 
GROUP BY IfcType 
ORDER BY IfcType ASC
}}

'''Get a full quantity takeoff for all walls:'''
This query calculates the total number of walls, their combined length, and the minimum and maximum wall heights.
{{Code|lang=sql|code=
SELECT 
    COUNT(*) AS "Total Count", 
    SUM(Length) AS "Total Length (mm)", 
    MIN(Height) AS "Min Height (mm)", 
    MAX(Height) AS "Max Height (mm)" 
FROM document 
WHERE IfcType = 'Wall'
}}

=== Hierarchical Queries ===

'''List all objects located directly on the "Ground Floor":'''
This uses the {{incode|CHILDREN()}} function to query the contents of a specific container object.
{{Code|lang=sql|code=
SELECT Label, IfcType 
FROM CHILDREN(SELECT * FROM document WHERE Label = 'Ground Floor') 
ORDER BY IfcType
}}

'''List all doors and the specific wall they are hosted in:'''
This uses the {{incode|PARENT()}} function to find the host of each door.
{{Code|lang=sql|code=
SELECT 
    Label AS "Door_Name", 
    PARENT(*).Label AS "Host_Wall_Name" 
FROM document 
WHERE IfcType = 'Door' 
ORDER BY "Host_Wall_Name"
}}

'''Find all windows on the "Ground Floor" (by checking the grandparent):'''
This query finds windows, checks their parent (the wall), and then checks that wall's parent (the floor).
{{Code|lang=sql|code=
SELECT Label 
FROM document 
WHERE IfcType = 'Window' AND PARENT(*).PARENT(*).Label = 'Ground Floor'
}}

=== Advanced Queries ===

'''Generate a complete room and area schedule:'''
This query produces a formatted list of all spaces, grouped by the floor they belong to, with their area converted to square meters.
{{Code|lang=sql|code=
SELECT 
    PARENT(*).Label AS "Floor", 
    Label AS "Room Name", 
    CONVERT(Area, 'm^2') AS "Area (m²)" 
FROM document 
WHERE IfcType = 'Space' 
ORDER BY "Floor", "Room Name"
}}

== Scripting API ==

The BIM Report engine is fully accessible through Python, allowing you to integrate its advanced query capabilities into your own scripts and automations.

=== Arch.selectObjects(query_string) ===

This is the primary function for executing a single, straightforward SQL query. It takes a query string as input and returns a list of the FreeCAD DocumentObjects that match the query. If the query is invalid or finds no objects, it returns an empty list and prints an error to the console.

'''Example: Get all Wall objects with "Exterior" in their name'''
{{Code|lang=python|code=
import FreeCAD
import Arch

# This query selects all Wall objects whose Label contains the substring "Exterior"
query = "SELECT * FROM document WHERE IfcType = 'Wall' AND Label LIKE '%Exterior%'"

exterior_walls = Arch.selectObjects(query)

# The result is a list of FreeCAD objects
FreeCAD.Console.PrintMessage(f"Found {len(exterior_walls)} exterior walls.\n")
for wall in exterior_walls:
    FreeCAD.Console.PrintMessage(f"- {wall.Label} (Length: {wall.Length})\n")
}}

=== Arch.selectObjectsFromPipeline(statements) ===

For more complex, multi-step selections, you can use this function to execute a pipeline. It takes a list of {{incode|ArchSql.ReportStatement}} objects and returns the final list of FreeCAD DocumentObjects that result from the full pipeline.

This is the programmatic equivalent of using the '''"Use as Pipeline Step"''' checkbox in the UI.

'''Example: Find all doors on the "Ground Floor"'''
This requires a multi-step process: first find the floor, then find its direct children (like walls), and finally find the children of those objects (the doors).
{{Code|lang=python|code=
import FreeCAD
import Arch
import ArchSql

# Step 1: Define the pipeline statements as ReportStatement objects.
# The ReportStatement class must be imported from the ArchSql module.

# Statement 1: Find the parent floor
stmt1 = ArchSql.ReportStatement(
    query_string="SELECT * FROM document WHERE Label = 'Ground Floor'"
)

# Statement 2: Find all direct children of the floor.
# Note that is_pipelined=True links this to the output of stmt1.
stmt2 = ArchSql.ReportStatement(
    query_string="SELECT * FROM CHILDREN(SELECT * FROM document)",
    is_pipelined=True
)

# Statement 3: Find the children of the walls (the doors) and filter them.
stmt3 = ArchSql.ReportStatement(
    query_string="SELECT * FROM CHILDREN(SELECT * FROM document) WHERE IfcType = 'Door'",
    is_pipelined=True
)

# Step 2: Execute the pipeline.
# The function takes a list of the statement objects.
pipeline_statements = [stmt1, stmt2, stmt3]
doors_on_floor = Arch.selectObjectsFromPipeline(pipeline_statements)

# The result is the final list of door objects.
FreeCAD.Console.PrintMessage(f"Found {len(doors_on_floor)} doors on the ground floor.\n")
for door in doors_on_floor:
    FreeCAD.Console.PrintMessage(f"- {door.Label}\n")
}}

{{Docnav
|[[Arch_Schedule|Schedule]]
|[[BIM_Preflight|Preflight]]
|[[BIM_Workbench|BIM]]
|IconL=Arch_Schedule.svg
|IconR=BIM_Preflight.png
|IconC=Workbench_BIM.svg
}}

</translate>
{{BIM_Tools_navi{{#translation:}}}}
{{Userdocnavi{{#translation:}}}}